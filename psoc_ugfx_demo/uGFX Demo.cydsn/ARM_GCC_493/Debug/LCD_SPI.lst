ARM GAS  C:\Users\joel\AppData\Local\Temp\ccm1GvVc.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"LCD_SPI.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.comm	LCD_SPI_txBuffer,8,4
  19              		.comm	LCD_SPI_txBufferFull,1,1
  20              		.comm	LCD_SPI_txBufferRead,1,1
  21              		.comm	LCD_SPI_txBufferWrite,1,1
  22              		.comm	LCD_SPI_rxBuffer,8,4
  23              		.comm	LCD_SPI_rxBufferFull,1,1
  24              		.comm	LCD_SPI_rxBufferRead,1,1
  25              		.comm	LCD_SPI_rxBufferWrite,1,1
  26              		.global	LCD_SPI_initVar
  27              		.bss
  28              		.type	LCD_SPI_initVar, %object
  29              		.size	LCD_SPI_initVar, 1
  30              	LCD_SPI_initVar:
  31 0000 00       		.space	1
  32              		.comm	LCD_SPI_swStatusTx,1,1
  33              		.comm	LCD_SPI_swStatusRx,1,1
  34              		.section	.text.LCD_SPI_Init,"ax",%progbits
  35              		.align	2
  36              		.global	LCD_SPI_Init
  37              		.thumb
  38              		.thumb_func
  39              		.type	LCD_SPI_Init, %function
  40              	LCD_SPI_Init:
  41              	.LFB0:
  42              		.file 1 ".\\Generated_Source\\PSoC5\\LCD_SPI.c"
   1:.\Generated_Source\PSoC5/LCD_SPI.c **** /*******************************************************************************
   2:.\Generated_Source\PSoC5/LCD_SPI.c **** * File Name: LCD_SPI.c
   3:.\Generated_Source\PSoC5/LCD_SPI.c **** * Version 2.50
   4:.\Generated_Source\PSoC5/LCD_SPI.c **** *
   5:.\Generated_Source\PSoC5/LCD_SPI.c **** * Description:
   6:.\Generated_Source\PSoC5/LCD_SPI.c **** *  This file provides all API functionality of the SPI Master component.
   7:.\Generated_Source\PSoC5/LCD_SPI.c **** *
   8:.\Generated_Source\PSoC5/LCD_SPI.c **** * Note:
   9:.\Generated_Source\PSoC5/LCD_SPI.c **** *  None.
  10:.\Generated_Source\PSoC5/LCD_SPI.c **** *
  11:.\Generated_Source\PSoC5/LCD_SPI.c **** ********************************************************************************
  12:.\Generated_Source\PSoC5/LCD_SPI.c **** * Copyright 2008-2015, Cypress Semiconductor Corporation.  All rights reserved.
  13:.\Generated_Source\PSoC5/LCD_SPI.c **** * You may use this file only in accordance with the license, terms, conditions,
  14:.\Generated_Source\PSoC5/LCD_SPI.c **** * disclaimers, and limitations in the end user license agreement accompanying
  15:.\Generated_Source\PSoC5/LCD_SPI.c **** * the software package with which this file was provided.
ARM GAS  C:\Users\joel\AppData\Local\Temp\ccm1GvVc.s 			page 2


  16:.\Generated_Source\PSoC5/LCD_SPI.c **** *******************************************************************************/
  17:.\Generated_Source\PSoC5/LCD_SPI.c **** 
  18:.\Generated_Source\PSoC5/LCD_SPI.c **** #include "LCD_SPI_PVT.h"
  19:.\Generated_Source\PSoC5/LCD_SPI.c **** 
  20:.\Generated_Source\PSoC5/LCD_SPI.c **** #if(LCD_SPI_TX_SOFTWARE_BUF_ENABLED)
  21:.\Generated_Source\PSoC5/LCD_SPI.c ****     volatile uint8 LCD_SPI_txBuffer[LCD_SPI_TX_BUFFER_SIZE];
  22:.\Generated_Source\PSoC5/LCD_SPI.c ****     volatile uint8 LCD_SPI_txBufferFull;
  23:.\Generated_Source\PSoC5/LCD_SPI.c ****     volatile uint8 LCD_SPI_txBufferRead;
  24:.\Generated_Source\PSoC5/LCD_SPI.c ****     volatile uint8 LCD_SPI_txBufferWrite;
  25:.\Generated_Source\PSoC5/LCD_SPI.c **** #endif /* (LCD_SPI_TX_SOFTWARE_BUF_ENABLED) */
  26:.\Generated_Source\PSoC5/LCD_SPI.c **** 
  27:.\Generated_Source\PSoC5/LCD_SPI.c **** #if(LCD_SPI_RX_SOFTWARE_BUF_ENABLED)
  28:.\Generated_Source\PSoC5/LCD_SPI.c ****     volatile uint8 LCD_SPI_rxBuffer[LCD_SPI_RX_BUFFER_SIZE];
  29:.\Generated_Source\PSoC5/LCD_SPI.c ****     volatile uint8 LCD_SPI_rxBufferFull;
  30:.\Generated_Source\PSoC5/LCD_SPI.c ****     volatile uint8 LCD_SPI_rxBufferRead;
  31:.\Generated_Source\PSoC5/LCD_SPI.c ****     volatile uint8 LCD_SPI_rxBufferWrite;
  32:.\Generated_Source\PSoC5/LCD_SPI.c **** #endif /* (LCD_SPI_RX_SOFTWARE_BUF_ENABLED) */
  33:.\Generated_Source\PSoC5/LCD_SPI.c **** 
  34:.\Generated_Source\PSoC5/LCD_SPI.c **** uint8 LCD_SPI_initVar = 0u;
  35:.\Generated_Source\PSoC5/LCD_SPI.c **** 
  36:.\Generated_Source\PSoC5/LCD_SPI.c **** volatile uint8 LCD_SPI_swStatusTx;
  37:.\Generated_Source\PSoC5/LCD_SPI.c **** volatile uint8 LCD_SPI_swStatusRx;
  38:.\Generated_Source\PSoC5/LCD_SPI.c **** 
  39:.\Generated_Source\PSoC5/LCD_SPI.c **** 
  40:.\Generated_Source\PSoC5/LCD_SPI.c **** /*******************************************************************************
  41:.\Generated_Source\PSoC5/LCD_SPI.c **** * Function Name: LCD_SPI_Init
  42:.\Generated_Source\PSoC5/LCD_SPI.c **** ********************************************************************************
  43:.\Generated_Source\PSoC5/LCD_SPI.c **** *
  44:.\Generated_Source\PSoC5/LCD_SPI.c **** * Summary:
  45:.\Generated_Source\PSoC5/LCD_SPI.c **** *  Inits/Restores default SPIM configuration provided with customizer.
  46:.\Generated_Source\PSoC5/LCD_SPI.c **** *
  47:.\Generated_Source\PSoC5/LCD_SPI.c **** * Parameters:
  48:.\Generated_Source\PSoC5/LCD_SPI.c **** *  None.
  49:.\Generated_Source\PSoC5/LCD_SPI.c **** *
  50:.\Generated_Source\PSoC5/LCD_SPI.c **** * Return:
  51:.\Generated_Source\PSoC5/LCD_SPI.c **** *  None.
  52:.\Generated_Source\PSoC5/LCD_SPI.c **** *
  53:.\Generated_Source\PSoC5/LCD_SPI.c **** * Side Effects:
  54:.\Generated_Source\PSoC5/LCD_SPI.c **** *  When this function is called it initializes all of the necessary parameters
  55:.\Generated_Source\PSoC5/LCD_SPI.c **** *  for execution. i.e. setting the initial interrupt mask, configuring the
  56:.\Generated_Source\PSoC5/LCD_SPI.c **** *  interrupt service routine, configuring the bit-counter parameters and
  57:.\Generated_Source\PSoC5/LCD_SPI.c **** *  clearing the FIFO and Status Register.
  58:.\Generated_Source\PSoC5/LCD_SPI.c **** *
  59:.\Generated_Source\PSoC5/LCD_SPI.c **** * Reentrant:
  60:.\Generated_Source\PSoC5/LCD_SPI.c **** *  No.
  61:.\Generated_Source\PSoC5/LCD_SPI.c **** *
  62:.\Generated_Source\PSoC5/LCD_SPI.c **** *******************************************************************************/
  63:.\Generated_Source\PSoC5/LCD_SPI.c **** void LCD_SPI_Init(void) 
  64:.\Generated_Source\PSoC5/LCD_SPI.c **** {
  43              		.loc 1 64 0
  44              		.cfi_startproc
  45              		@ args = 0, pretend = 0, frame = 0
  46              		@ frame_needed = 1, uses_anonymous_args = 0
  47 0000 80B5     		push	{r7, lr}
  48              		.cfi_def_cfa_offset 8
  49              		.cfi_offset 7, -8
  50              		.cfi_offset 14, -4
ARM GAS  C:\Users\joel\AppData\Local\Temp\ccm1GvVc.s 			page 3


  51 0002 00AF     		add	r7, sp, #0
  52              		.cfi_def_cfa_register 7
  65:.\Generated_Source\PSoC5/LCD_SPI.c ****     /* Initialize the Bit counter */
  66:.\Generated_Source\PSoC5/LCD_SPI.c ****     LCD_SPI_COUNTER_PERIOD_REG = LCD_SPI_BITCTR_INIT;
  53              		.loc 1 66 0
  54 0004 1B4B     		ldr	r3, .L2
  55 0006 0F22     		movs	r2, #15
  56 0008 1A70     		strb	r2, [r3]
  67:.\Generated_Source\PSoC5/LCD_SPI.c **** 
  68:.\Generated_Source\PSoC5/LCD_SPI.c ****     /* Init TX ISR  */
  69:.\Generated_Source\PSoC5/LCD_SPI.c ****     #if(0u != LCD_SPI_INTERNAL_TX_INT_ENABLED)
  70:.\Generated_Source\PSoC5/LCD_SPI.c ****         CyIntDisable         (LCD_SPI_TX_ISR_NUMBER);
  57              		.loc 1 70 0
  58 000a 1B4B     		ldr	r3, .L2+4
  59 000c 0222     		movs	r2, #2
  60 000e 1A60     		str	r2, [r3]
  71:.\Generated_Source\PSoC5/LCD_SPI.c ****         CyIntSetPriority     (LCD_SPI_TX_ISR_NUMBER,  LCD_SPI_TX_ISR_PRIORITY);
  61              		.loc 1 71 0
  62 0010 0120     		movs	r0, #1
  63 0012 0721     		movs	r1, #7
  64 0014 FFF7FEFF 		bl	CyIntSetPriority
  72:.\Generated_Source\PSoC5/LCD_SPI.c ****         (void) CyIntSetVector(LCD_SPI_TX_ISR_NUMBER, &LCD_SPI_TX_ISR);
  65              		.loc 1 72 0
  66 0018 0120     		movs	r0, #1
  67 001a 1849     		ldr	r1, .L2+8
  68 001c FFF7FEFF 		bl	CyIntSetVector
  73:.\Generated_Source\PSoC5/LCD_SPI.c ****     #endif /* (0u != LCD_SPI_INTERNAL_TX_INT_ENABLED) */
  74:.\Generated_Source\PSoC5/LCD_SPI.c **** 
  75:.\Generated_Source\PSoC5/LCD_SPI.c ****     /* Init RX ISR  */
  76:.\Generated_Source\PSoC5/LCD_SPI.c ****     #if(0u != LCD_SPI_INTERNAL_RX_INT_ENABLED)
  77:.\Generated_Source\PSoC5/LCD_SPI.c ****         CyIntDisable         (LCD_SPI_RX_ISR_NUMBER);
  69              		.loc 1 77 0
  70 0020 154B     		ldr	r3, .L2+4
  71 0022 0122     		movs	r2, #1
  72 0024 1A60     		str	r2, [r3]
  78:.\Generated_Source\PSoC5/LCD_SPI.c ****         CyIntSetPriority     (LCD_SPI_RX_ISR_NUMBER,  LCD_SPI_RX_ISR_PRIORITY);
  73              		.loc 1 78 0
  74 0026 0020     		movs	r0, #0
  75 0028 0721     		movs	r1, #7
  76 002a FFF7FEFF 		bl	CyIntSetPriority
  79:.\Generated_Source\PSoC5/LCD_SPI.c ****         (void) CyIntSetVector(LCD_SPI_RX_ISR_NUMBER, &LCD_SPI_RX_ISR);
  77              		.loc 1 79 0
  78 002e 0020     		movs	r0, #0
  79 0030 1349     		ldr	r1, .L2+12
  80 0032 FFF7FEFF 		bl	CyIntSetVector
  80:.\Generated_Source\PSoC5/LCD_SPI.c ****     #endif /* (0u != LCD_SPI_INTERNAL_RX_INT_ENABLED) */
  81:.\Generated_Source\PSoC5/LCD_SPI.c **** 
  82:.\Generated_Source\PSoC5/LCD_SPI.c ****     /* Clear any stray data from the RX and TX FIFO */
  83:.\Generated_Source\PSoC5/LCD_SPI.c ****     LCD_SPI_ClearFIFO();
  81              		.loc 1 83 0
  82 0036 FFF7FEFF 		bl	LCD_SPI_ClearFIFO
  84:.\Generated_Source\PSoC5/LCD_SPI.c **** 
  85:.\Generated_Source\PSoC5/LCD_SPI.c ****     #if(LCD_SPI_RX_SOFTWARE_BUF_ENABLED)
  86:.\Generated_Source\PSoC5/LCD_SPI.c ****         LCD_SPI_rxBufferFull  = 0u;
  83              		.loc 1 86 0
  84 003a 124B     		ldr	r3, .L2+16
  85 003c 0022     		movs	r2, #0
ARM GAS  C:\Users\joel\AppData\Local\Temp\ccm1GvVc.s 			page 4


  86 003e 1A70     		strb	r2, [r3]
  87:.\Generated_Source\PSoC5/LCD_SPI.c ****         LCD_SPI_rxBufferRead  = 0u;
  87              		.loc 1 87 0
  88 0040 114B     		ldr	r3, .L2+20
  89 0042 0022     		movs	r2, #0
  90 0044 1A70     		strb	r2, [r3]
  88:.\Generated_Source\PSoC5/LCD_SPI.c ****         LCD_SPI_rxBufferWrite = 0u;
  91              		.loc 1 88 0
  92 0046 114B     		ldr	r3, .L2+24
  93 0048 0022     		movs	r2, #0
  94 004a 1A70     		strb	r2, [r3]
  89:.\Generated_Source\PSoC5/LCD_SPI.c ****     #endif /* (LCD_SPI_RX_SOFTWARE_BUF_ENABLED) */
  90:.\Generated_Source\PSoC5/LCD_SPI.c **** 
  91:.\Generated_Source\PSoC5/LCD_SPI.c ****     #if(LCD_SPI_TX_SOFTWARE_BUF_ENABLED)
  92:.\Generated_Source\PSoC5/LCD_SPI.c ****         LCD_SPI_txBufferFull  = 0u;
  95              		.loc 1 92 0
  96 004c 104B     		ldr	r3, .L2+28
  97 004e 0022     		movs	r2, #0
  98 0050 1A70     		strb	r2, [r3]
  93:.\Generated_Source\PSoC5/LCD_SPI.c ****         LCD_SPI_txBufferRead  = 0u;
  99              		.loc 1 93 0
 100 0052 104B     		ldr	r3, .L2+32
 101 0054 0022     		movs	r2, #0
 102 0056 1A70     		strb	r2, [r3]
  94:.\Generated_Source\PSoC5/LCD_SPI.c ****         LCD_SPI_txBufferWrite = 0u;
 103              		.loc 1 94 0
 104 0058 0F4B     		ldr	r3, .L2+36
 105 005a 0022     		movs	r2, #0
 106 005c 1A70     		strb	r2, [r3]
  95:.\Generated_Source\PSoC5/LCD_SPI.c ****     #endif /* (LCD_SPI_TX_SOFTWARE_BUF_ENABLED) */
  96:.\Generated_Source\PSoC5/LCD_SPI.c **** 
  97:.\Generated_Source\PSoC5/LCD_SPI.c ****     (void) LCD_SPI_ReadTxStatus(); /* Clear Tx status and swStatusTx */
 107              		.loc 1 97 0
 108 005e FFF7FEFF 		bl	LCD_SPI_ReadTxStatus
  98:.\Generated_Source\PSoC5/LCD_SPI.c ****     (void) LCD_SPI_ReadRxStatus(); /* Clear Rx status and swStatusRx */
 109              		.loc 1 98 0
 110 0062 FFF7FEFF 		bl	LCD_SPI_ReadRxStatus
  99:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 100:.\Generated_Source\PSoC5/LCD_SPI.c ****     /* Configure TX and RX interrupt mask */
 101:.\Generated_Source\PSoC5/LCD_SPI.c ****     LCD_SPI_TX_STATUS_MASK_REG = LCD_SPI_TX_INIT_INTERRUPTS_MASK;
 111              		.loc 1 101 0
 112 0066 0D4B     		ldr	r3, .L2+40
 113 0068 0022     		movs	r2, #0
 114 006a 1A70     		strb	r2, [r3]
 102:.\Generated_Source\PSoC5/LCD_SPI.c ****     LCD_SPI_RX_STATUS_MASK_REG = LCD_SPI_RX_INIT_INTERRUPTS_MASK;
 115              		.loc 1 102 0
 116 006c 0C4B     		ldr	r3, .L2+44
 117 006e 2022     		movs	r2, #32
 118 0070 1A70     		strb	r2, [r3]
 103:.\Generated_Source\PSoC5/LCD_SPI.c **** }
 119              		.loc 1 103 0
 120 0072 80BD     		pop	{r7, pc}
 121              	.L3:
 122              		.align	2
 123              	.L2:
 124 0074 8C640040 		.word	1073767564
 125 0078 80E100E0 		.word	-536813184
ARM GAS  C:\Users\joel\AppData\Local\Temp\ccm1GvVc.s 			page 5


 126 007c 00000000 		.word	LCD_SPI_TX_ISR
 127 0080 00000000 		.word	LCD_SPI_RX_ISR
 128 0084 00000000 		.word	LCD_SPI_rxBufferFull
 129 0088 00000000 		.word	LCD_SPI_rxBufferRead
 130 008c 00000000 		.word	LCD_SPI_rxBufferWrite
 131 0090 00000000 		.word	LCD_SPI_txBufferFull
 132 0094 00000000 		.word	LCD_SPI_txBufferRead
 133 0098 00000000 		.word	LCD_SPI_txBufferWrite
 134 009c 8A640040 		.word	1073767562
 135 00a0 8B640040 		.word	1073767563
 136              		.cfi_endproc
 137              	.LFE0:
 138              		.size	LCD_SPI_Init, .-LCD_SPI_Init
 139              		.section	.text.LCD_SPI_Enable,"ax",%progbits
 140              		.align	2
 141              		.global	LCD_SPI_Enable
 142              		.thumb
 143              		.thumb_func
 144              		.type	LCD_SPI_Enable, %function
 145              	LCD_SPI_Enable:
 146              	.LFB1:
 104:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 105:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 106:.\Generated_Source\PSoC5/LCD_SPI.c **** /*******************************************************************************
 107:.\Generated_Source\PSoC5/LCD_SPI.c **** * Function Name: LCD_SPI_Enable
 108:.\Generated_Source\PSoC5/LCD_SPI.c **** ********************************************************************************
 109:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 110:.\Generated_Source\PSoC5/LCD_SPI.c **** * Summary:
 111:.\Generated_Source\PSoC5/LCD_SPI.c **** *  Enable SPIM component.
 112:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 113:.\Generated_Source\PSoC5/LCD_SPI.c **** * Parameters:
 114:.\Generated_Source\PSoC5/LCD_SPI.c **** *  None.
 115:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 116:.\Generated_Source\PSoC5/LCD_SPI.c **** * Return:
 117:.\Generated_Source\PSoC5/LCD_SPI.c **** *  None.
 118:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 119:.\Generated_Source\PSoC5/LCD_SPI.c **** *******************************************************************************/
 120:.\Generated_Source\PSoC5/LCD_SPI.c **** void LCD_SPI_Enable(void) 
 121:.\Generated_Source\PSoC5/LCD_SPI.c **** {
 147              		.loc 1 121 0
 148              		.cfi_startproc
 149              		@ args = 0, pretend = 0, frame = 8
 150              		@ frame_needed = 1, uses_anonymous_args = 0
 151 0000 80B5     		push	{r7, lr}
 152              		.cfi_def_cfa_offset 8
 153              		.cfi_offset 7, -8
 154              		.cfi_offset 14, -4
 155 0002 82B0     		sub	sp, sp, #8
 156              		.cfi_def_cfa_offset 16
 157 0004 00AF     		add	r7, sp, #0
 158              		.cfi_def_cfa_register 7
 122:.\Generated_Source\PSoC5/LCD_SPI.c ****     uint8 enableInterrupts;
 123:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 124:.\Generated_Source\PSoC5/LCD_SPI.c ****     enableInterrupts = CyEnterCriticalSection();
 159              		.loc 1 124 0
 160 0006 FFF7FEFF 		bl	CyEnterCriticalSection
 161 000a 0346     		mov	r3, r0
ARM GAS  C:\Users\joel\AppData\Local\Temp\ccm1GvVc.s 			page 6


 162 000c FB71     		strb	r3, [r7, #7]
 125:.\Generated_Source\PSoC5/LCD_SPI.c ****     LCD_SPI_COUNTER_CONTROL_REG |= LCD_SPI_CNTR_ENABLE;
 163              		.loc 1 125 0
 164 000e 124A     		ldr	r2, .L5
 165 0010 114B     		ldr	r3, .L5
 166 0012 1B78     		ldrb	r3, [r3]
 167 0014 DBB2     		uxtb	r3, r3
 168 0016 43F02003 		orr	r3, r3, #32
 169 001a DBB2     		uxtb	r3, r3
 170 001c 1370     		strb	r3, [r2]
 126:.\Generated_Source\PSoC5/LCD_SPI.c ****     LCD_SPI_TX_STATUS_ACTL_REG  |= LCD_SPI_INT_ENABLE;
 171              		.loc 1 126 0
 172 001e 0F4A     		ldr	r2, .L5+4
 173 0020 0E4B     		ldr	r3, .L5+4
 174 0022 1B78     		ldrb	r3, [r3]
 175 0024 DBB2     		uxtb	r3, r3
 176 0026 43F01003 		orr	r3, r3, #16
 177 002a DBB2     		uxtb	r3, r3
 178 002c 1370     		strb	r3, [r2]
 127:.\Generated_Source\PSoC5/LCD_SPI.c ****     LCD_SPI_RX_STATUS_ACTL_REG  |= LCD_SPI_INT_ENABLE;
 179              		.loc 1 127 0
 180 002e 0C4A     		ldr	r2, .L5+8
 181 0030 0B4B     		ldr	r3, .L5+8
 182 0032 1B78     		ldrb	r3, [r3]
 183 0034 DBB2     		uxtb	r3, r3
 184 0036 43F01003 		orr	r3, r3, #16
 185 003a DBB2     		uxtb	r3, r3
 186 003c 1370     		strb	r3, [r2]
 128:.\Generated_Source\PSoC5/LCD_SPI.c ****     CyExitCriticalSection(enableInterrupts);
 187              		.loc 1 128 0
 188 003e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 189 0040 1846     		mov	r0, r3
 190 0042 FFF7FEFF 		bl	CyExitCriticalSection
 129:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 130:.\Generated_Source\PSoC5/LCD_SPI.c ****     #if(0u != LCD_SPI_INTERNAL_CLOCK)
 131:.\Generated_Source\PSoC5/LCD_SPI.c ****         LCD_SPI_IntClock_Enable();
 191              		.loc 1 131 0
 192 0046 FFF7FEFF 		bl	LCD_SPI_IntClock_Start
 132:.\Generated_Source\PSoC5/LCD_SPI.c ****     #endif /* (0u != LCD_SPI_INTERNAL_CLOCK) */
 133:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 134:.\Generated_Source\PSoC5/LCD_SPI.c ****     LCD_SPI_EnableTxInt();
 193              		.loc 1 134 0
 194 004a FFF7FEFF 		bl	LCD_SPI_EnableTxInt
 135:.\Generated_Source\PSoC5/LCD_SPI.c ****     LCD_SPI_EnableRxInt();
 195              		.loc 1 135 0
 196 004e FFF7FEFF 		bl	LCD_SPI_EnableRxInt
 136:.\Generated_Source\PSoC5/LCD_SPI.c **** }
 197              		.loc 1 136 0
 198 0052 0837     		adds	r7, r7, #8
 199              		.cfi_def_cfa_offset 8
 200 0054 BD46     		mov	sp, r7
 201              		.cfi_def_cfa_register 13
 202              		@ sp needed
 203 0056 80BD     		pop	{r7, pc}
 204              	.L6:
 205              		.align	2
 206              	.L5:
ARM GAS  C:\Users\joel\AppData\Local\Temp\ccm1GvVc.s 			page 7


 207 0058 9C640040 		.word	1073767580
 208 005c 9A640040 		.word	1073767578
 209 0060 9B640040 		.word	1073767579
 210              		.cfi_endproc
 211              	.LFE1:
 212              		.size	LCD_SPI_Enable, .-LCD_SPI_Enable
 213              		.section	.text.LCD_SPI_Start,"ax",%progbits
 214              		.align	2
 215              		.global	LCD_SPI_Start
 216              		.thumb
 217              		.thumb_func
 218              		.type	LCD_SPI_Start, %function
 219              	LCD_SPI_Start:
 220              	.LFB2:
 137:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 138:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 139:.\Generated_Source\PSoC5/LCD_SPI.c **** /*******************************************************************************
 140:.\Generated_Source\PSoC5/LCD_SPI.c **** * Function Name: LCD_SPI_Start
 141:.\Generated_Source\PSoC5/LCD_SPI.c **** ********************************************************************************
 142:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 143:.\Generated_Source\PSoC5/LCD_SPI.c **** * Summary:
 144:.\Generated_Source\PSoC5/LCD_SPI.c **** *  Initialize and Enable the SPI Master component.
 145:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 146:.\Generated_Source\PSoC5/LCD_SPI.c **** * Parameters:
 147:.\Generated_Source\PSoC5/LCD_SPI.c **** *  None.
 148:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 149:.\Generated_Source\PSoC5/LCD_SPI.c **** * Return:
 150:.\Generated_Source\PSoC5/LCD_SPI.c **** *  None.
 151:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 152:.\Generated_Source\PSoC5/LCD_SPI.c **** * Global variables:
 153:.\Generated_Source\PSoC5/LCD_SPI.c **** *  LCD_SPI_initVar - used to check initial configuration, modified on
 154:.\Generated_Source\PSoC5/LCD_SPI.c **** *  first function call.
 155:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 156:.\Generated_Source\PSoC5/LCD_SPI.c **** * Theory:
 157:.\Generated_Source\PSoC5/LCD_SPI.c **** *  Enable the clock input to enable operation.
 158:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 159:.\Generated_Source\PSoC5/LCD_SPI.c **** * Reentrant:
 160:.\Generated_Source\PSoC5/LCD_SPI.c **** *  No.
 161:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 162:.\Generated_Source\PSoC5/LCD_SPI.c **** *******************************************************************************/
 163:.\Generated_Source\PSoC5/LCD_SPI.c **** void LCD_SPI_Start(void) 
 164:.\Generated_Source\PSoC5/LCD_SPI.c **** {
 221              		.loc 1 164 0
 222              		.cfi_startproc
 223              		@ args = 0, pretend = 0, frame = 0
 224              		@ frame_needed = 1, uses_anonymous_args = 0
 225 0000 80B5     		push	{r7, lr}
 226              		.cfi_def_cfa_offset 8
 227              		.cfi_offset 7, -8
 228              		.cfi_offset 14, -4
 229 0002 00AF     		add	r7, sp, #0
 230              		.cfi_def_cfa_register 7
 165:.\Generated_Source\PSoC5/LCD_SPI.c ****     if(0u == LCD_SPI_initVar)
 231              		.loc 1 165 0
 232 0004 054B     		ldr	r3, .L9
 233 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 234 0008 002B     		cmp	r3, #0
ARM GAS  C:\Users\joel\AppData\Local\Temp\ccm1GvVc.s 			page 8


 235 000a 04D1     		bne	.L8
 166:.\Generated_Source\PSoC5/LCD_SPI.c ****     {
 167:.\Generated_Source\PSoC5/LCD_SPI.c ****         LCD_SPI_Init();
 236              		.loc 1 167 0
 237 000c FFF7FEFF 		bl	LCD_SPI_Init
 168:.\Generated_Source\PSoC5/LCD_SPI.c ****         LCD_SPI_initVar = 1u;
 238              		.loc 1 168 0
 239 0010 024B     		ldr	r3, .L9
 240 0012 0122     		movs	r2, #1
 241 0014 1A70     		strb	r2, [r3]
 242              	.L8:
 169:.\Generated_Source\PSoC5/LCD_SPI.c ****     }
 170:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 171:.\Generated_Source\PSoC5/LCD_SPI.c ****     LCD_SPI_Enable();
 243              		.loc 1 171 0
 244 0016 FFF7FEFF 		bl	LCD_SPI_Enable
 172:.\Generated_Source\PSoC5/LCD_SPI.c **** }
 245              		.loc 1 172 0
 246 001a 80BD     		pop	{r7, pc}
 247              	.L10:
 248              		.align	2
 249              	.L9:
 250 001c 00000000 		.word	LCD_SPI_initVar
 251              		.cfi_endproc
 252              	.LFE2:
 253              		.size	LCD_SPI_Start, .-LCD_SPI_Start
 254              		.section	.text.LCD_SPI_Stop,"ax",%progbits
 255              		.align	2
 256              		.global	LCD_SPI_Stop
 257              		.thumb
 258              		.thumb_func
 259              		.type	LCD_SPI_Stop, %function
 260              	LCD_SPI_Stop:
 261              	.LFB3:
 173:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 174:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 175:.\Generated_Source\PSoC5/LCD_SPI.c **** /*******************************************************************************
 176:.\Generated_Source\PSoC5/LCD_SPI.c **** * Function Name: LCD_SPI_Stop
 177:.\Generated_Source\PSoC5/LCD_SPI.c **** ********************************************************************************
 178:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 179:.\Generated_Source\PSoC5/LCD_SPI.c **** * Summary:
 180:.\Generated_Source\PSoC5/LCD_SPI.c **** *  Disable the SPI Master component.
 181:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 182:.\Generated_Source\PSoC5/LCD_SPI.c **** * Parameters:
 183:.\Generated_Source\PSoC5/LCD_SPI.c **** *  None.
 184:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 185:.\Generated_Source\PSoC5/LCD_SPI.c **** * Return:
 186:.\Generated_Source\PSoC5/LCD_SPI.c **** *  None.
 187:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 188:.\Generated_Source\PSoC5/LCD_SPI.c **** * Theory:
 189:.\Generated_Source\PSoC5/LCD_SPI.c **** *  Disable the clock input to enable operation.
 190:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 191:.\Generated_Source\PSoC5/LCD_SPI.c **** *******************************************************************************/
 192:.\Generated_Source\PSoC5/LCD_SPI.c **** void LCD_SPI_Stop(void) 
 193:.\Generated_Source\PSoC5/LCD_SPI.c **** {
 262              		.loc 1 193 0
 263              		.cfi_startproc
ARM GAS  C:\Users\joel\AppData\Local\Temp\ccm1GvVc.s 			page 9


 264              		@ args = 0, pretend = 0, frame = 8
 265              		@ frame_needed = 1, uses_anonymous_args = 0
 266 0000 80B5     		push	{r7, lr}
 267              		.cfi_def_cfa_offset 8
 268              		.cfi_offset 7, -8
 269              		.cfi_offset 14, -4
 270 0002 82B0     		sub	sp, sp, #8
 271              		.cfi_def_cfa_offset 16
 272 0004 00AF     		add	r7, sp, #0
 273              		.cfi_def_cfa_register 7
 194:.\Generated_Source\PSoC5/LCD_SPI.c ****     uint8 enableInterrupts;
 195:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 196:.\Generated_Source\PSoC5/LCD_SPI.c ****     enableInterrupts = CyEnterCriticalSection();
 274              		.loc 1 196 0
 275 0006 FFF7FEFF 		bl	CyEnterCriticalSection
 276 000a 0346     		mov	r3, r0
 277 000c FB71     		strb	r3, [r7, #7]
 197:.\Generated_Source\PSoC5/LCD_SPI.c ****     LCD_SPI_TX_STATUS_ACTL_REG &= ((uint8) ~LCD_SPI_INT_ENABLE);
 278              		.loc 1 197 0
 279 000e 0E4A     		ldr	r2, .L12
 280 0010 0D4B     		ldr	r3, .L12
 281 0012 1B78     		ldrb	r3, [r3]
 282 0014 DBB2     		uxtb	r3, r3
 283 0016 23F01003 		bic	r3, r3, #16
 284 001a DBB2     		uxtb	r3, r3
 285 001c 1370     		strb	r3, [r2]
 198:.\Generated_Source\PSoC5/LCD_SPI.c ****     LCD_SPI_RX_STATUS_ACTL_REG &= ((uint8) ~LCD_SPI_INT_ENABLE);
 286              		.loc 1 198 0
 287 001e 0B4A     		ldr	r2, .L12+4
 288 0020 0A4B     		ldr	r3, .L12+4
 289 0022 1B78     		ldrb	r3, [r3]
 290 0024 DBB2     		uxtb	r3, r3
 291 0026 23F01003 		bic	r3, r3, #16
 292 002a DBB2     		uxtb	r3, r3
 293 002c 1370     		strb	r3, [r2]
 199:.\Generated_Source\PSoC5/LCD_SPI.c ****     CyExitCriticalSection(enableInterrupts);
 294              		.loc 1 199 0
 295 002e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 296 0030 1846     		mov	r0, r3
 297 0032 FFF7FEFF 		bl	CyExitCriticalSection
 200:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 201:.\Generated_Source\PSoC5/LCD_SPI.c ****     #if(0u != LCD_SPI_INTERNAL_CLOCK)
 202:.\Generated_Source\PSoC5/LCD_SPI.c ****         LCD_SPI_IntClock_Disable();
 298              		.loc 1 202 0
 299 0036 FFF7FEFF 		bl	LCD_SPI_IntClock_Stop
 203:.\Generated_Source\PSoC5/LCD_SPI.c ****     #endif /* (0u != LCD_SPI_INTERNAL_CLOCK) */
 204:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 205:.\Generated_Source\PSoC5/LCD_SPI.c ****     LCD_SPI_DisableTxInt();
 300              		.loc 1 205 0
 301 003a FFF7FEFF 		bl	LCD_SPI_DisableTxInt
 206:.\Generated_Source\PSoC5/LCD_SPI.c ****     LCD_SPI_DisableRxInt();
 302              		.loc 1 206 0
 303 003e FFF7FEFF 		bl	LCD_SPI_DisableRxInt
 207:.\Generated_Source\PSoC5/LCD_SPI.c **** }
 304              		.loc 1 207 0
 305 0042 0837     		adds	r7, r7, #8
 306              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\joel\AppData\Local\Temp\ccm1GvVc.s 			page 10


 307 0044 BD46     		mov	sp, r7
 308              		.cfi_def_cfa_register 13
 309              		@ sp needed
 310 0046 80BD     		pop	{r7, pc}
 311              	.L13:
 312              		.align	2
 313              	.L12:
 314 0048 9A640040 		.word	1073767578
 315 004c 9B640040 		.word	1073767579
 316              		.cfi_endproc
 317              	.LFE3:
 318              		.size	LCD_SPI_Stop, .-LCD_SPI_Stop
 319              		.section	.text.LCD_SPI_EnableTxInt,"ax",%progbits
 320              		.align	2
 321              		.global	LCD_SPI_EnableTxInt
 322              		.thumb
 323              		.thumb_func
 324              		.type	LCD_SPI_EnableTxInt, %function
 325              	LCD_SPI_EnableTxInt:
 326              	.LFB4:
 208:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 209:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 210:.\Generated_Source\PSoC5/LCD_SPI.c **** /*******************************************************************************
 211:.\Generated_Source\PSoC5/LCD_SPI.c **** * Function Name: LCD_SPI_EnableTxInt
 212:.\Generated_Source\PSoC5/LCD_SPI.c **** ********************************************************************************
 213:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 214:.\Generated_Source\PSoC5/LCD_SPI.c **** * Summary:
 215:.\Generated_Source\PSoC5/LCD_SPI.c **** *  Enable internal Tx interrupt generation.
 216:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 217:.\Generated_Source\PSoC5/LCD_SPI.c **** * Parameters:
 218:.\Generated_Source\PSoC5/LCD_SPI.c **** *  None.
 219:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 220:.\Generated_Source\PSoC5/LCD_SPI.c **** * Return:
 221:.\Generated_Source\PSoC5/LCD_SPI.c **** *  None.
 222:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 223:.\Generated_Source\PSoC5/LCD_SPI.c **** * Theory:
 224:.\Generated_Source\PSoC5/LCD_SPI.c **** *  Enable the internal Tx interrupt output -or- the interrupt component itself.
 225:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 226:.\Generated_Source\PSoC5/LCD_SPI.c **** *******************************************************************************/
 227:.\Generated_Source\PSoC5/LCD_SPI.c **** void LCD_SPI_EnableTxInt(void) 
 228:.\Generated_Source\PSoC5/LCD_SPI.c **** {
 327              		.loc 1 228 0
 328              		.cfi_startproc
 329              		@ args = 0, pretend = 0, frame = 0
 330              		@ frame_needed = 1, uses_anonymous_args = 0
 331              		@ link register save eliminated.
 332 0000 80B4     		push	{r7}
 333              		.cfi_def_cfa_offset 4
 334              		.cfi_offset 7, -4
 335 0002 00AF     		add	r7, sp, #0
 336              		.cfi_def_cfa_register 7
 229:.\Generated_Source\PSoC5/LCD_SPI.c ****     #if(0u != LCD_SPI_INTERNAL_TX_INT_ENABLED)
 230:.\Generated_Source\PSoC5/LCD_SPI.c ****         CyIntEnable(LCD_SPI_TX_ISR_NUMBER);
 337              		.loc 1 230 0
 338 0004 034B     		ldr	r3, .L15
 339 0006 0222     		movs	r2, #2
 340 0008 1A60     		str	r2, [r3]
ARM GAS  C:\Users\joel\AppData\Local\Temp\ccm1GvVc.s 			page 11


 231:.\Generated_Source\PSoC5/LCD_SPI.c ****     #endif /* (0u != LCD_SPI_INTERNAL_TX_INT_ENABLED) */
 232:.\Generated_Source\PSoC5/LCD_SPI.c **** }
 341              		.loc 1 232 0
 342 000a BD46     		mov	sp, r7
 343              		.cfi_def_cfa_register 13
 344              		@ sp needed
 345 000c 5DF8047B 		ldr	r7, [sp], #4
 346              		.cfi_restore 7
 347              		.cfi_def_cfa_offset 0
 348 0010 7047     		bx	lr
 349              	.L16:
 350 0012 00BF     		.align	2
 351              	.L15:
 352 0014 00E100E0 		.word	-536813312
 353              		.cfi_endproc
 354              	.LFE4:
 355              		.size	LCD_SPI_EnableTxInt, .-LCD_SPI_EnableTxInt
 356              		.section	.text.LCD_SPI_EnableRxInt,"ax",%progbits
 357              		.align	2
 358              		.global	LCD_SPI_EnableRxInt
 359              		.thumb
 360              		.thumb_func
 361              		.type	LCD_SPI_EnableRxInt, %function
 362              	LCD_SPI_EnableRxInt:
 363              	.LFB5:
 233:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 234:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 235:.\Generated_Source\PSoC5/LCD_SPI.c **** /*******************************************************************************
 236:.\Generated_Source\PSoC5/LCD_SPI.c **** * Function Name: LCD_SPI_EnableRxInt
 237:.\Generated_Source\PSoC5/LCD_SPI.c **** ********************************************************************************
 238:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 239:.\Generated_Source\PSoC5/LCD_SPI.c **** * Summary:
 240:.\Generated_Source\PSoC5/LCD_SPI.c **** *  Enable internal Rx interrupt generation.
 241:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 242:.\Generated_Source\PSoC5/LCD_SPI.c **** * Parameters:
 243:.\Generated_Source\PSoC5/LCD_SPI.c **** *  None.
 244:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 245:.\Generated_Source\PSoC5/LCD_SPI.c **** * Return:
 246:.\Generated_Source\PSoC5/LCD_SPI.c **** *  None.
 247:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 248:.\Generated_Source\PSoC5/LCD_SPI.c **** * Theory:
 249:.\Generated_Source\PSoC5/LCD_SPI.c **** *  Enable the internal Rx interrupt output -or- the interrupt component itself.
 250:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 251:.\Generated_Source\PSoC5/LCD_SPI.c **** *******************************************************************************/
 252:.\Generated_Source\PSoC5/LCD_SPI.c **** void LCD_SPI_EnableRxInt(void) 
 253:.\Generated_Source\PSoC5/LCD_SPI.c **** {
 364              		.loc 1 253 0
 365              		.cfi_startproc
 366              		@ args = 0, pretend = 0, frame = 0
 367              		@ frame_needed = 1, uses_anonymous_args = 0
 368              		@ link register save eliminated.
 369 0000 80B4     		push	{r7}
 370              		.cfi_def_cfa_offset 4
 371              		.cfi_offset 7, -4
 372 0002 00AF     		add	r7, sp, #0
 373              		.cfi_def_cfa_register 7
 254:.\Generated_Source\PSoC5/LCD_SPI.c ****     #if(0u != LCD_SPI_INTERNAL_RX_INT_ENABLED)
ARM GAS  C:\Users\joel\AppData\Local\Temp\ccm1GvVc.s 			page 12


 255:.\Generated_Source\PSoC5/LCD_SPI.c ****         CyIntEnable(LCD_SPI_RX_ISR_NUMBER);
 374              		.loc 1 255 0
 375 0004 034B     		ldr	r3, .L18
 376 0006 0122     		movs	r2, #1
 377 0008 1A60     		str	r2, [r3]
 256:.\Generated_Source\PSoC5/LCD_SPI.c ****     #endif /* (0u != LCD_SPI_INTERNAL_RX_INT_ENABLED) */
 257:.\Generated_Source\PSoC5/LCD_SPI.c **** }
 378              		.loc 1 257 0
 379 000a BD46     		mov	sp, r7
 380              		.cfi_def_cfa_register 13
 381              		@ sp needed
 382 000c 5DF8047B 		ldr	r7, [sp], #4
 383              		.cfi_restore 7
 384              		.cfi_def_cfa_offset 0
 385 0010 7047     		bx	lr
 386              	.L19:
 387 0012 00BF     		.align	2
 388              	.L18:
 389 0014 00E100E0 		.word	-536813312
 390              		.cfi_endproc
 391              	.LFE5:
 392              		.size	LCD_SPI_EnableRxInt, .-LCD_SPI_EnableRxInt
 393              		.section	.text.LCD_SPI_DisableTxInt,"ax",%progbits
 394              		.align	2
 395              		.global	LCD_SPI_DisableTxInt
 396              		.thumb
 397              		.thumb_func
 398              		.type	LCD_SPI_DisableTxInt, %function
 399              	LCD_SPI_DisableTxInt:
 400              	.LFB6:
 258:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 259:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 260:.\Generated_Source\PSoC5/LCD_SPI.c **** /*******************************************************************************
 261:.\Generated_Source\PSoC5/LCD_SPI.c **** * Function Name: LCD_SPI_DisableTxInt
 262:.\Generated_Source\PSoC5/LCD_SPI.c **** ********************************************************************************
 263:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 264:.\Generated_Source\PSoC5/LCD_SPI.c **** * Summary:
 265:.\Generated_Source\PSoC5/LCD_SPI.c **** *  Disable internal Tx interrupt generation.
 266:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 267:.\Generated_Source\PSoC5/LCD_SPI.c **** * Parameters:
 268:.\Generated_Source\PSoC5/LCD_SPI.c **** *  None.
 269:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 270:.\Generated_Source\PSoC5/LCD_SPI.c **** * Return:
 271:.\Generated_Source\PSoC5/LCD_SPI.c **** *  None.
 272:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 273:.\Generated_Source\PSoC5/LCD_SPI.c **** * Theory:
 274:.\Generated_Source\PSoC5/LCD_SPI.c **** *  Disable the internal Tx interrupt output -or- the interrupt component itself.
 275:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 276:.\Generated_Source\PSoC5/LCD_SPI.c **** *******************************************************************************/
 277:.\Generated_Source\PSoC5/LCD_SPI.c **** void LCD_SPI_DisableTxInt(void) 
 278:.\Generated_Source\PSoC5/LCD_SPI.c **** {
 401              		.loc 1 278 0
 402              		.cfi_startproc
 403              		@ args = 0, pretend = 0, frame = 0
 404              		@ frame_needed = 1, uses_anonymous_args = 0
 405              		@ link register save eliminated.
 406 0000 80B4     		push	{r7}
ARM GAS  C:\Users\joel\AppData\Local\Temp\ccm1GvVc.s 			page 13


 407              		.cfi_def_cfa_offset 4
 408              		.cfi_offset 7, -4
 409 0002 00AF     		add	r7, sp, #0
 410              		.cfi_def_cfa_register 7
 279:.\Generated_Source\PSoC5/LCD_SPI.c ****     #if(0u != LCD_SPI_INTERNAL_TX_INT_ENABLED)
 280:.\Generated_Source\PSoC5/LCD_SPI.c ****         CyIntDisable(LCD_SPI_TX_ISR_NUMBER);
 411              		.loc 1 280 0
 412 0004 034B     		ldr	r3, .L21
 413 0006 0222     		movs	r2, #2
 414 0008 1A60     		str	r2, [r3]
 281:.\Generated_Source\PSoC5/LCD_SPI.c ****     #endif /* (0u != LCD_SPI_INTERNAL_TX_INT_ENABLED) */
 282:.\Generated_Source\PSoC5/LCD_SPI.c **** }
 415              		.loc 1 282 0
 416 000a BD46     		mov	sp, r7
 417              		.cfi_def_cfa_register 13
 418              		@ sp needed
 419 000c 5DF8047B 		ldr	r7, [sp], #4
 420              		.cfi_restore 7
 421              		.cfi_def_cfa_offset 0
 422 0010 7047     		bx	lr
 423              	.L22:
 424 0012 00BF     		.align	2
 425              	.L21:
 426 0014 80E100E0 		.word	-536813184
 427              		.cfi_endproc
 428              	.LFE6:
 429              		.size	LCD_SPI_DisableTxInt, .-LCD_SPI_DisableTxInt
 430              		.section	.text.LCD_SPI_DisableRxInt,"ax",%progbits
 431              		.align	2
 432              		.global	LCD_SPI_DisableRxInt
 433              		.thumb
 434              		.thumb_func
 435              		.type	LCD_SPI_DisableRxInt, %function
 436              	LCD_SPI_DisableRxInt:
 437              	.LFB7:
 283:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 284:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 285:.\Generated_Source\PSoC5/LCD_SPI.c **** /*******************************************************************************
 286:.\Generated_Source\PSoC5/LCD_SPI.c **** * Function Name: LCD_SPI_DisableRxInt
 287:.\Generated_Source\PSoC5/LCD_SPI.c **** ********************************************************************************
 288:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 289:.\Generated_Source\PSoC5/LCD_SPI.c **** * Summary:
 290:.\Generated_Source\PSoC5/LCD_SPI.c **** *  Disable internal Rx interrupt generation.
 291:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 292:.\Generated_Source\PSoC5/LCD_SPI.c **** * Parameters:
 293:.\Generated_Source\PSoC5/LCD_SPI.c **** *  None.
 294:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 295:.\Generated_Source\PSoC5/LCD_SPI.c **** * Return:
 296:.\Generated_Source\PSoC5/LCD_SPI.c **** *  None.
 297:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 298:.\Generated_Source\PSoC5/LCD_SPI.c **** * Theory:
 299:.\Generated_Source\PSoC5/LCD_SPI.c **** *  Disable the internal Rx interrupt output -or- the interrupt component itself.
 300:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 301:.\Generated_Source\PSoC5/LCD_SPI.c **** *******************************************************************************/
 302:.\Generated_Source\PSoC5/LCD_SPI.c **** void LCD_SPI_DisableRxInt(void) 
 303:.\Generated_Source\PSoC5/LCD_SPI.c **** {
 438              		.loc 1 303 0
ARM GAS  C:\Users\joel\AppData\Local\Temp\ccm1GvVc.s 			page 14


 439              		.cfi_startproc
 440              		@ args = 0, pretend = 0, frame = 0
 441              		@ frame_needed = 1, uses_anonymous_args = 0
 442              		@ link register save eliminated.
 443 0000 80B4     		push	{r7}
 444              		.cfi_def_cfa_offset 4
 445              		.cfi_offset 7, -4
 446 0002 00AF     		add	r7, sp, #0
 447              		.cfi_def_cfa_register 7
 304:.\Generated_Source\PSoC5/LCD_SPI.c ****     #if(0u != LCD_SPI_INTERNAL_RX_INT_ENABLED)
 305:.\Generated_Source\PSoC5/LCD_SPI.c ****         CyIntDisable(LCD_SPI_RX_ISR_NUMBER);
 448              		.loc 1 305 0
 449 0004 034B     		ldr	r3, .L24
 450 0006 0122     		movs	r2, #1
 451 0008 1A60     		str	r2, [r3]
 306:.\Generated_Source\PSoC5/LCD_SPI.c ****     #endif /* (0u != LCD_SPI_INTERNAL_RX_INT_ENABLED) */
 307:.\Generated_Source\PSoC5/LCD_SPI.c **** }
 452              		.loc 1 307 0
 453 000a BD46     		mov	sp, r7
 454              		.cfi_def_cfa_register 13
 455              		@ sp needed
 456 000c 5DF8047B 		ldr	r7, [sp], #4
 457              		.cfi_restore 7
 458              		.cfi_def_cfa_offset 0
 459 0010 7047     		bx	lr
 460              	.L25:
 461 0012 00BF     		.align	2
 462              	.L24:
 463 0014 80E100E0 		.word	-536813184
 464              		.cfi_endproc
 465              	.LFE7:
 466              		.size	LCD_SPI_DisableRxInt, .-LCD_SPI_DisableRxInt
 467              		.section	.text.LCD_SPI_SetTxInterruptMode,"ax",%progbits
 468              		.align	2
 469              		.global	LCD_SPI_SetTxInterruptMode
 470              		.thumb
 471              		.thumb_func
 472              		.type	LCD_SPI_SetTxInterruptMode, %function
 473              	LCD_SPI_SetTxInterruptMode:
 474              	.LFB8:
 308:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 309:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 310:.\Generated_Source\PSoC5/LCD_SPI.c **** /*******************************************************************************
 311:.\Generated_Source\PSoC5/LCD_SPI.c **** * Function Name: LCD_SPI_SetTxInterruptMode
 312:.\Generated_Source\PSoC5/LCD_SPI.c **** ********************************************************************************
 313:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 314:.\Generated_Source\PSoC5/LCD_SPI.c **** * Summary:
 315:.\Generated_Source\PSoC5/LCD_SPI.c **** *  Configure which status bits trigger an interrupt event.
 316:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 317:.\Generated_Source\PSoC5/LCD_SPI.c **** * Parameters:
 318:.\Generated_Source\PSoC5/LCD_SPI.c **** *  intSrc: An or'd combination of the desired status bit masks (defined in the
 319:.\Generated_Source\PSoC5/LCD_SPI.c **** *  header file).
 320:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 321:.\Generated_Source\PSoC5/LCD_SPI.c **** * Return:
 322:.\Generated_Source\PSoC5/LCD_SPI.c **** *  None.
 323:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 324:.\Generated_Source\PSoC5/LCD_SPI.c **** * Theory:
ARM GAS  C:\Users\joel\AppData\Local\Temp\ccm1GvVc.s 			page 15


 325:.\Generated_Source\PSoC5/LCD_SPI.c **** *  Enables the output of specific status bits to the interrupt controller.
 326:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 327:.\Generated_Source\PSoC5/LCD_SPI.c **** *******************************************************************************/
 328:.\Generated_Source\PSoC5/LCD_SPI.c **** void LCD_SPI_SetTxInterruptMode(uint8 intSrc) 
 329:.\Generated_Source\PSoC5/LCD_SPI.c **** {
 475              		.loc 1 329 0
 476              		.cfi_startproc
 477              		@ args = 0, pretend = 0, frame = 8
 478              		@ frame_needed = 1, uses_anonymous_args = 0
 479              		@ link register save eliminated.
 480 0000 80B4     		push	{r7}
 481              		.cfi_def_cfa_offset 4
 482              		.cfi_offset 7, -4
 483 0002 83B0     		sub	sp, sp, #12
 484              		.cfi_def_cfa_offset 16
 485 0004 00AF     		add	r7, sp, #0
 486              		.cfi_def_cfa_register 7
 487 0006 0346     		mov	r3, r0
 488 0008 FB71     		strb	r3, [r7, #7]
 330:.\Generated_Source\PSoC5/LCD_SPI.c ****     LCD_SPI_TX_STATUS_MASK_REG = intSrc;
 489              		.loc 1 330 0
 490 000a 044A     		ldr	r2, .L27
 491 000c FB79     		ldrb	r3, [r7, #7]
 492 000e 1370     		strb	r3, [r2]
 331:.\Generated_Source\PSoC5/LCD_SPI.c **** }
 493              		.loc 1 331 0
 494 0010 0C37     		adds	r7, r7, #12
 495              		.cfi_def_cfa_offset 4
 496 0012 BD46     		mov	sp, r7
 497              		.cfi_def_cfa_register 13
 498              		@ sp needed
 499 0014 5DF8047B 		ldr	r7, [sp], #4
 500              		.cfi_restore 7
 501              		.cfi_def_cfa_offset 0
 502 0018 7047     		bx	lr
 503              	.L28:
 504 001a 00BF     		.align	2
 505              	.L27:
 506 001c 8A640040 		.word	1073767562
 507              		.cfi_endproc
 508              	.LFE8:
 509              		.size	LCD_SPI_SetTxInterruptMode, .-LCD_SPI_SetTxInterruptMode
 510              		.section	.text.LCD_SPI_SetRxInterruptMode,"ax",%progbits
 511              		.align	2
 512              		.global	LCD_SPI_SetRxInterruptMode
 513              		.thumb
 514              		.thumb_func
 515              		.type	LCD_SPI_SetRxInterruptMode, %function
 516              	LCD_SPI_SetRxInterruptMode:
 517              	.LFB9:
 332:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 333:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 334:.\Generated_Source\PSoC5/LCD_SPI.c **** /*******************************************************************************
 335:.\Generated_Source\PSoC5/LCD_SPI.c **** * Function Name: LCD_SPI_SetRxInterruptMode
 336:.\Generated_Source\PSoC5/LCD_SPI.c **** ********************************************************************************
 337:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 338:.\Generated_Source\PSoC5/LCD_SPI.c **** * Summary:
ARM GAS  C:\Users\joel\AppData\Local\Temp\ccm1GvVc.s 			page 16


 339:.\Generated_Source\PSoC5/LCD_SPI.c **** *  Configure which status bits trigger an interrupt event.
 340:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 341:.\Generated_Source\PSoC5/LCD_SPI.c **** * Parameters:
 342:.\Generated_Source\PSoC5/LCD_SPI.c **** *  intSrc: An or'd combination of the desired status bit masks (defined in the
 343:.\Generated_Source\PSoC5/LCD_SPI.c **** *  header file).
 344:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 345:.\Generated_Source\PSoC5/LCD_SPI.c **** * Return:
 346:.\Generated_Source\PSoC5/LCD_SPI.c **** *  None.
 347:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 348:.\Generated_Source\PSoC5/LCD_SPI.c **** * Theory:
 349:.\Generated_Source\PSoC5/LCD_SPI.c **** *  Enables the output of specific status bits to the interrupt controller.
 350:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 351:.\Generated_Source\PSoC5/LCD_SPI.c **** *******************************************************************************/
 352:.\Generated_Source\PSoC5/LCD_SPI.c **** void LCD_SPI_SetRxInterruptMode(uint8 intSrc) 
 353:.\Generated_Source\PSoC5/LCD_SPI.c **** {
 518              		.loc 1 353 0
 519              		.cfi_startproc
 520              		@ args = 0, pretend = 0, frame = 8
 521              		@ frame_needed = 1, uses_anonymous_args = 0
 522              		@ link register save eliminated.
 523 0000 80B4     		push	{r7}
 524              		.cfi_def_cfa_offset 4
 525              		.cfi_offset 7, -4
 526 0002 83B0     		sub	sp, sp, #12
 527              		.cfi_def_cfa_offset 16
 528 0004 00AF     		add	r7, sp, #0
 529              		.cfi_def_cfa_register 7
 530 0006 0346     		mov	r3, r0
 531 0008 FB71     		strb	r3, [r7, #7]
 354:.\Generated_Source\PSoC5/LCD_SPI.c ****     LCD_SPI_RX_STATUS_MASK_REG  = intSrc;
 532              		.loc 1 354 0
 533 000a 044A     		ldr	r2, .L30
 534 000c FB79     		ldrb	r3, [r7, #7]
 535 000e 1370     		strb	r3, [r2]
 355:.\Generated_Source\PSoC5/LCD_SPI.c **** }
 536              		.loc 1 355 0
 537 0010 0C37     		adds	r7, r7, #12
 538              		.cfi_def_cfa_offset 4
 539 0012 BD46     		mov	sp, r7
 540              		.cfi_def_cfa_register 13
 541              		@ sp needed
 542 0014 5DF8047B 		ldr	r7, [sp], #4
 543              		.cfi_restore 7
 544              		.cfi_def_cfa_offset 0
 545 0018 7047     		bx	lr
 546              	.L31:
 547 001a 00BF     		.align	2
 548              	.L30:
 549 001c 8B640040 		.word	1073767563
 550              		.cfi_endproc
 551              	.LFE9:
 552              		.size	LCD_SPI_SetRxInterruptMode, .-LCD_SPI_SetRxInterruptMode
 553              		.section	.text.LCD_SPI_ReadTxStatus,"ax",%progbits
 554              		.align	2
 555              		.global	LCD_SPI_ReadTxStatus
 556              		.thumb
 557              		.thumb_func
ARM GAS  C:\Users\joel\AppData\Local\Temp\ccm1GvVc.s 			page 17


 558              		.type	LCD_SPI_ReadTxStatus, %function
 559              	LCD_SPI_ReadTxStatus:
 560              	.LFB10:
 356:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 357:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 358:.\Generated_Source\PSoC5/LCD_SPI.c **** /*******************************************************************************
 359:.\Generated_Source\PSoC5/LCD_SPI.c **** * Function Name: LCD_SPI_ReadTxStatus
 360:.\Generated_Source\PSoC5/LCD_SPI.c **** ********************************************************************************
 361:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 362:.\Generated_Source\PSoC5/LCD_SPI.c **** * Summary:
 363:.\Generated_Source\PSoC5/LCD_SPI.c **** *  Read the Tx status register for the component.
 364:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 365:.\Generated_Source\PSoC5/LCD_SPI.c **** * Parameters:
 366:.\Generated_Source\PSoC5/LCD_SPI.c **** *  None.
 367:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 368:.\Generated_Source\PSoC5/LCD_SPI.c **** * Return:
 369:.\Generated_Source\PSoC5/LCD_SPI.c **** *  Contents of the Tx status register.
 370:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 371:.\Generated_Source\PSoC5/LCD_SPI.c **** * Global variables:
 372:.\Generated_Source\PSoC5/LCD_SPI.c **** *  LCD_SPI_swStatusTx - used to store in software status register,
 373:.\Generated_Source\PSoC5/LCD_SPI.c **** *  modified every function call - resets to zero.
 374:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 375:.\Generated_Source\PSoC5/LCD_SPI.c **** * Theory:
 376:.\Generated_Source\PSoC5/LCD_SPI.c **** *  Allows the user and the API to read the Tx status register for error
 377:.\Generated_Source\PSoC5/LCD_SPI.c **** *  detection and flow control.
 378:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 379:.\Generated_Source\PSoC5/LCD_SPI.c **** * Side Effects:
 380:.\Generated_Source\PSoC5/LCD_SPI.c **** *  Clear Tx status register of the component.
 381:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 382:.\Generated_Source\PSoC5/LCD_SPI.c **** * Reentrant:
 383:.\Generated_Source\PSoC5/LCD_SPI.c **** *  No.
 384:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 385:.\Generated_Source\PSoC5/LCD_SPI.c **** *******************************************************************************/
 386:.\Generated_Source\PSoC5/LCD_SPI.c **** uint8 LCD_SPI_ReadTxStatus(void) 
 387:.\Generated_Source\PSoC5/LCD_SPI.c **** {
 561              		.loc 1 387 0
 562              		.cfi_startproc
 563              		@ args = 0, pretend = 0, frame = 8
 564              		@ frame_needed = 1, uses_anonymous_args = 0
 565 0000 80B5     		push	{r7, lr}
 566              		.cfi_def_cfa_offset 8
 567              		.cfi_offset 7, -8
 568              		.cfi_offset 14, -4
 569 0002 82B0     		sub	sp, sp, #8
 570              		.cfi_def_cfa_offset 16
 571 0004 00AF     		add	r7, sp, #0
 572              		.cfi_def_cfa_register 7
 388:.\Generated_Source\PSoC5/LCD_SPI.c ****     uint8 tmpStatus;
 389:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 390:.\Generated_Source\PSoC5/LCD_SPI.c ****     #if(LCD_SPI_TX_SOFTWARE_BUF_ENABLED)
 391:.\Generated_Source\PSoC5/LCD_SPI.c ****         /* Disable TX interrupt to protect global veriables */
 392:.\Generated_Source\PSoC5/LCD_SPI.c ****         LCD_SPI_DisableTxInt();
 573              		.loc 1 392 0
 574 0006 FFF7FEFF 		bl	LCD_SPI_DisableTxInt
 393:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 394:.\Generated_Source\PSoC5/LCD_SPI.c ****         tmpStatus = LCD_SPI_GET_STATUS_TX(LCD_SPI_swStatusTx);
 575              		.loc 1 394 0
ARM GAS  C:\Users\joel\AppData\Local\Temp\ccm1GvVc.s 			page 18


 576 000a 0A4B     		ldr	r3, .L34
 577 000c 1B78     		ldrb	r3, [r3]
 578 000e DAB2     		uxtb	r2, r3
 579 0010 094B     		ldr	r3, .L34+4
 580 0012 1B78     		ldrb	r3, [r3]
 581 0014 DBB2     		uxtb	r3, r3
 582 0016 03F00903 		and	r3, r3, #9
 583 001a DBB2     		uxtb	r3, r3
 584 001c 1343     		orrs	r3, r3, r2
 585 001e FB71     		strb	r3, [r7, #7]
 395:.\Generated_Source\PSoC5/LCD_SPI.c ****         LCD_SPI_swStatusTx = 0u;
 586              		.loc 1 395 0
 587 0020 054B     		ldr	r3, .L34+4
 588 0022 0022     		movs	r2, #0
 589 0024 1A70     		strb	r2, [r3]
 396:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 397:.\Generated_Source\PSoC5/LCD_SPI.c ****         LCD_SPI_EnableTxInt();
 590              		.loc 1 397 0
 591 0026 FFF7FEFF 		bl	LCD_SPI_EnableTxInt
 398:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 399:.\Generated_Source\PSoC5/LCD_SPI.c ****     #else
 400:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 401:.\Generated_Source\PSoC5/LCD_SPI.c ****         tmpStatus = LCD_SPI_TX_STATUS_REG;
 402:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 403:.\Generated_Source\PSoC5/LCD_SPI.c ****     #endif /* (LCD_SPI_TX_SOFTWARE_BUF_ENABLED) */
 404:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 405:.\Generated_Source\PSoC5/LCD_SPI.c ****     return(tmpStatus);
 592              		.loc 1 405 0
 593 002a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 406:.\Generated_Source\PSoC5/LCD_SPI.c **** }
 594              		.loc 1 406 0
 595 002c 1846     		mov	r0, r3
 596 002e 0837     		adds	r7, r7, #8
 597              		.cfi_def_cfa_offset 8
 598 0030 BD46     		mov	sp, r7
 599              		.cfi_def_cfa_register 13
 600              		@ sp needed
 601 0032 80BD     		pop	{r7, pc}
 602              	.L35:
 603              		.align	2
 604              	.L34:
 605 0034 6A640040 		.word	1073767530
 606 0038 00000000 		.word	LCD_SPI_swStatusTx
 607              		.cfi_endproc
 608              	.LFE10:
 609              		.size	LCD_SPI_ReadTxStatus, .-LCD_SPI_ReadTxStatus
 610              		.section	.text.LCD_SPI_ReadRxStatus,"ax",%progbits
 611              		.align	2
 612              		.global	LCD_SPI_ReadRxStatus
 613              		.thumb
 614              		.thumb_func
 615              		.type	LCD_SPI_ReadRxStatus, %function
 616              	LCD_SPI_ReadRxStatus:
 617              	.LFB11:
 407:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 408:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 409:.\Generated_Source\PSoC5/LCD_SPI.c **** /*******************************************************************************
ARM GAS  C:\Users\joel\AppData\Local\Temp\ccm1GvVc.s 			page 19


 410:.\Generated_Source\PSoC5/LCD_SPI.c **** * Function Name: LCD_SPI_ReadRxStatus
 411:.\Generated_Source\PSoC5/LCD_SPI.c **** ********************************************************************************
 412:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 413:.\Generated_Source\PSoC5/LCD_SPI.c **** * Summary:
 414:.\Generated_Source\PSoC5/LCD_SPI.c **** *  Read the Rx status register for the component.
 415:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 416:.\Generated_Source\PSoC5/LCD_SPI.c **** * Parameters:
 417:.\Generated_Source\PSoC5/LCD_SPI.c **** *  None.
 418:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 419:.\Generated_Source\PSoC5/LCD_SPI.c **** * Return:
 420:.\Generated_Source\PSoC5/LCD_SPI.c **** *  Contents of the Rx status register.
 421:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 422:.\Generated_Source\PSoC5/LCD_SPI.c **** * Global variables:
 423:.\Generated_Source\PSoC5/LCD_SPI.c **** *  LCD_SPI_swStatusRx - used to store in software Rx status register,
 424:.\Generated_Source\PSoC5/LCD_SPI.c **** *  modified every function call - resets to zero.
 425:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 426:.\Generated_Source\PSoC5/LCD_SPI.c **** * Theory:
 427:.\Generated_Source\PSoC5/LCD_SPI.c **** *  Allows the user and the API to read the Rx status register for error
 428:.\Generated_Source\PSoC5/LCD_SPI.c **** *  detection and flow control.
 429:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 430:.\Generated_Source\PSoC5/LCD_SPI.c **** * Side Effects:
 431:.\Generated_Source\PSoC5/LCD_SPI.c **** *  Clear Rx status register of the component.
 432:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 433:.\Generated_Source\PSoC5/LCD_SPI.c **** * Reentrant:
 434:.\Generated_Source\PSoC5/LCD_SPI.c **** *  No.
 435:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 436:.\Generated_Source\PSoC5/LCD_SPI.c **** *******************************************************************************/
 437:.\Generated_Source\PSoC5/LCD_SPI.c **** uint8 LCD_SPI_ReadRxStatus(void) 
 438:.\Generated_Source\PSoC5/LCD_SPI.c **** {
 618              		.loc 1 438 0
 619              		.cfi_startproc
 620              		@ args = 0, pretend = 0, frame = 8
 621              		@ frame_needed = 1, uses_anonymous_args = 0
 622 0000 80B5     		push	{r7, lr}
 623              		.cfi_def_cfa_offset 8
 624              		.cfi_offset 7, -8
 625              		.cfi_offset 14, -4
 626 0002 82B0     		sub	sp, sp, #8
 627              		.cfi_def_cfa_offset 16
 628 0004 00AF     		add	r7, sp, #0
 629              		.cfi_def_cfa_register 7
 439:.\Generated_Source\PSoC5/LCD_SPI.c ****     uint8 tmpStatus;
 440:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 441:.\Generated_Source\PSoC5/LCD_SPI.c ****     #if(LCD_SPI_RX_SOFTWARE_BUF_ENABLED)
 442:.\Generated_Source\PSoC5/LCD_SPI.c ****         /* Disable RX interrupt to protect global veriables */
 443:.\Generated_Source\PSoC5/LCD_SPI.c ****         LCD_SPI_DisableRxInt();
 630              		.loc 1 443 0
 631 0006 FFF7FEFF 		bl	LCD_SPI_DisableRxInt
 444:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 445:.\Generated_Source\PSoC5/LCD_SPI.c ****         tmpStatus = LCD_SPI_GET_STATUS_RX(LCD_SPI_swStatusRx);
 632              		.loc 1 445 0
 633 000a 0A4B     		ldr	r3, .L38
 634 000c 1B78     		ldrb	r3, [r3]
 635 000e DAB2     		uxtb	r2, r3
 636 0010 094B     		ldr	r3, .L38+4
 637 0012 1B78     		ldrb	r3, [r3]
 638 0014 DBB2     		uxtb	r3, r3
ARM GAS  C:\Users\joel\AppData\Local\Temp\ccm1GvVc.s 			page 20


 639 0016 03F04003 		and	r3, r3, #64
 640 001a DBB2     		uxtb	r3, r3
 641 001c 1343     		orrs	r3, r3, r2
 642 001e FB71     		strb	r3, [r7, #7]
 446:.\Generated_Source\PSoC5/LCD_SPI.c ****         LCD_SPI_swStatusRx = 0u;
 643              		.loc 1 446 0
 644 0020 054B     		ldr	r3, .L38+4
 645 0022 0022     		movs	r2, #0
 646 0024 1A70     		strb	r2, [r3]
 447:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 448:.\Generated_Source\PSoC5/LCD_SPI.c ****         LCD_SPI_EnableRxInt();
 647              		.loc 1 448 0
 648 0026 FFF7FEFF 		bl	LCD_SPI_EnableRxInt
 449:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 450:.\Generated_Source\PSoC5/LCD_SPI.c ****     #else
 451:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 452:.\Generated_Source\PSoC5/LCD_SPI.c ****         tmpStatus = LCD_SPI_RX_STATUS_REG;
 453:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 454:.\Generated_Source\PSoC5/LCD_SPI.c ****     #endif /* (LCD_SPI_RX_SOFTWARE_BUF_ENABLED) */
 455:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 456:.\Generated_Source\PSoC5/LCD_SPI.c ****     return(tmpStatus);
 649              		.loc 1 456 0
 650 002a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 457:.\Generated_Source\PSoC5/LCD_SPI.c **** }
 651              		.loc 1 457 0
 652 002c 1846     		mov	r0, r3
 653 002e 0837     		adds	r7, r7, #8
 654              		.cfi_def_cfa_offset 8
 655 0030 BD46     		mov	sp, r7
 656              		.cfi_def_cfa_register 13
 657              		@ sp needed
 658 0032 80BD     		pop	{r7, pc}
 659              	.L39:
 660              		.align	2
 661              	.L38:
 662 0034 6B640040 		.word	1073767531
 663 0038 00000000 		.word	LCD_SPI_swStatusRx
 664              		.cfi_endproc
 665              	.LFE11:
 666              		.size	LCD_SPI_ReadRxStatus, .-LCD_SPI_ReadRxStatus
 667              		.section	.text.LCD_SPI_WriteTxData,"ax",%progbits
 668              		.align	2
 669              		.global	LCD_SPI_WriteTxData
 670              		.thumb
 671              		.thumb_func
 672              		.type	LCD_SPI_WriteTxData, %function
 673              	LCD_SPI_WriteTxData:
 674              	.LFB12:
 458:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 459:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 460:.\Generated_Source\PSoC5/LCD_SPI.c **** /*******************************************************************************
 461:.\Generated_Source\PSoC5/LCD_SPI.c **** * Function Name: LCD_SPI_WriteTxData
 462:.\Generated_Source\PSoC5/LCD_SPI.c **** ********************************************************************************
 463:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 464:.\Generated_Source\PSoC5/LCD_SPI.c **** * Summary:
 465:.\Generated_Source\PSoC5/LCD_SPI.c **** *  Write a byte of data to be sent across the SPI.
 466:.\Generated_Source\PSoC5/LCD_SPI.c **** *
ARM GAS  C:\Users\joel\AppData\Local\Temp\ccm1GvVc.s 			page 21


 467:.\Generated_Source\PSoC5/LCD_SPI.c **** * Parameters:
 468:.\Generated_Source\PSoC5/LCD_SPI.c **** *  txDataByte: The data value to send across the SPI.
 469:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 470:.\Generated_Source\PSoC5/LCD_SPI.c **** * Return:
 471:.\Generated_Source\PSoC5/LCD_SPI.c **** *  None.
 472:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 473:.\Generated_Source\PSoC5/LCD_SPI.c **** * Global variables:
 474:.\Generated_Source\PSoC5/LCD_SPI.c **** *  LCD_SPI_txBufferWrite - used for the account of the bytes which
 475:.\Generated_Source\PSoC5/LCD_SPI.c **** *  have been written down in the TX software buffer, modified every function
 476:.\Generated_Source\PSoC5/LCD_SPI.c **** *  call if TX Software Buffer is used.
 477:.\Generated_Source\PSoC5/LCD_SPI.c **** *  LCD_SPI_txBufferRead - used for the account of the bytes which
 478:.\Generated_Source\PSoC5/LCD_SPI.c **** *  have been read from the TX software buffer.
 479:.\Generated_Source\PSoC5/LCD_SPI.c **** *  LCD_SPI_txBuffer[LCD_SPI_TX_BUFFER_SIZE] - used to store
 480:.\Generated_Source\PSoC5/LCD_SPI.c **** *  data to sending, modified every function call if TX Software Buffer is used.
 481:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 482:.\Generated_Source\PSoC5/LCD_SPI.c **** * Theory:
 483:.\Generated_Source\PSoC5/LCD_SPI.c **** *  Allows the user to transmit any byte of data in a single transfer.
 484:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 485:.\Generated_Source\PSoC5/LCD_SPI.c **** * Side Effects:
 486:.\Generated_Source\PSoC5/LCD_SPI.c **** *  If this function is called again before the previous byte is finished then
 487:.\Generated_Source\PSoC5/LCD_SPI.c **** *  the next byte will be appended to the transfer with no time between
 488:.\Generated_Source\PSoC5/LCD_SPI.c **** *  the byte transfers. Clear Tx status register of the component.
 489:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 490:.\Generated_Source\PSoC5/LCD_SPI.c **** * Reentrant:
 491:.\Generated_Source\PSoC5/LCD_SPI.c **** *  No.
 492:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 493:.\Generated_Source\PSoC5/LCD_SPI.c **** *******************************************************************************/
 494:.\Generated_Source\PSoC5/LCD_SPI.c **** void LCD_SPI_WriteTxData(uint8 txData) 
 495:.\Generated_Source\PSoC5/LCD_SPI.c **** {
 675              		.loc 1 495 0
 676              		.cfi_startproc
 677              		@ args = 0, pretend = 0, frame = 16
 678              		@ frame_needed = 1, uses_anonymous_args = 0
 679 0000 80B5     		push	{r7, lr}
 680              		.cfi_def_cfa_offset 8
 681              		.cfi_offset 7, -8
 682              		.cfi_offset 14, -4
 683 0002 84B0     		sub	sp, sp, #16
 684              		.cfi_def_cfa_offset 24
 685 0004 00AF     		add	r7, sp, #0
 686              		.cfi_def_cfa_register 7
 687 0006 0346     		mov	r3, r0
 688 0008 FB71     		strb	r3, [r7, #7]
 689              	.L43:
 496:.\Generated_Source\PSoC5/LCD_SPI.c ****     #if(LCD_SPI_TX_SOFTWARE_BUF_ENABLED)
 497:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 498:.\Generated_Source\PSoC5/LCD_SPI.c ****         uint8 tempStatus;
 499:.\Generated_Source\PSoC5/LCD_SPI.c ****         uint8 tmpTxBufferRead;
 500:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 501:.\Generated_Source\PSoC5/LCD_SPI.c ****         /* Block if TX buffer is FULL: don't overwrite */
 502:.\Generated_Source\PSoC5/LCD_SPI.c ****         do
 503:.\Generated_Source\PSoC5/LCD_SPI.c ****         {
 504:.\Generated_Source\PSoC5/LCD_SPI.c ****             tmpTxBufferRead = LCD_SPI_txBufferRead;
 690              		.loc 1 504 0
 691 000a 394B     		ldr	r3, .L49
 692 000c 1B78     		ldrb	r3, [r3]
 693 000e FB73     		strb	r3, [r7, #15]
ARM GAS  C:\Users\joel\AppData\Local\Temp\ccm1GvVc.s 			page 22


 505:.\Generated_Source\PSoC5/LCD_SPI.c ****             if(0u == tmpTxBufferRead)
 694              		.loc 1 505 0
 695 0010 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 696 0012 002B     		cmp	r3, #0
 697 0014 02D1     		bne	.L41
 506:.\Generated_Source\PSoC5/LCD_SPI.c ****             {
 507:.\Generated_Source\PSoC5/LCD_SPI.c ****                 tmpTxBufferRead = (LCD_SPI_TX_BUFFER_SIZE - 1u);
 698              		.loc 1 507 0
 699 0016 0723     		movs	r3, #7
 700 0018 FB73     		strb	r3, [r7, #15]
 701 001a 02E0     		b	.L42
 702              	.L41:
 508:.\Generated_Source\PSoC5/LCD_SPI.c ****             }
 509:.\Generated_Source\PSoC5/LCD_SPI.c ****             else
 510:.\Generated_Source\PSoC5/LCD_SPI.c ****             {
 511:.\Generated_Source\PSoC5/LCD_SPI.c ****                 tmpTxBufferRead--;
 703              		.loc 1 511 0
 704 001c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 705 001e 013B     		subs	r3, r3, #1
 706 0020 FB73     		strb	r3, [r7, #15]
 707              	.L42:
 512:.\Generated_Source\PSoC5/LCD_SPI.c ****             }
 513:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 514:.\Generated_Source\PSoC5/LCD_SPI.c ****         }while(tmpTxBufferRead == LCD_SPI_txBufferWrite);
 708              		.loc 1 514 0
 709 0022 344B     		ldr	r3, .L49+4
 710 0024 1B78     		ldrb	r3, [r3]
 711 0026 DBB2     		uxtb	r3, r3
 712 0028 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 713 002a 9A42     		cmp	r2, r3
 714 002c EDD0     		beq	.L43
 515:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 516:.\Generated_Source\PSoC5/LCD_SPI.c ****         /* Disable TX interrupt to protect global veriables */
 517:.\Generated_Source\PSoC5/LCD_SPI.c ****         LCD_SPI_DisableTxInt();
 715              		.loc 1 517 0
 716 002e FFF7FEFF 		bl	LCD_SPI_DisableTxInt
 518:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 519:.\Generated_Source\PSoC5/LCD_SPI.c ****         tempStatus = LCD_SPI_GET_STATUS_TX(LCD_SPI_swStatusTx);
 717              		.loc 1 519 0
 718 0032 314B     		ldr	r3, .L49+8
 719 0034 1B78     		ldrb	r3, [r3]
 720 0036 DAB2     		uxtb	r2, r3
 721 0038 304B     		ldr	r3, .L49+12
 722 003a 1B78     		ldrb	r3, [r3]
 723 003c DBB2     		uxtb	r3, r3
 724 003e 03F00903 		and	r3, r3, #9
 725 0042 DBB2     		uxtb	r3, r3
 726 0044 1343     		orrs	r3, r3, r2
 727 0046 BB73     		strb	r3, [r7, #14]
 520:.\Generated_Source\PSoC5/LCD_SPI.c ****         LCD_SPI_swStatusTx = tempStatus;
 728              		.loc 1 520 0
 729 0048 2C4A     		ldr	r2, .L49+12
 730 004a BB7B     		ldrb	r3, [r7, #14]
 731 004c 1370     		strb	r3, [r2]
 521:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 522:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 523:.\Generated_Source\PSoC5/LCD_SPI.c ****         if((LCD_SPI_txBufferRead == LCD_SPI_txBufferWrite) &&
ARM GAS  C:\Users\joel\AppData\Local\Temp\ccm1GvVc.s 			page 23


 732              		.loc 1 523 0
 733 004e 284B     		ldr	r3, .L49
 734 0050 1B78     		ldrb	r3, [r3]
 735 0052 DAB2     		uxtb	r2, r3
 736 0054 274B     		ldr	r3, .L49+4
 737 0056 1B78     		ldrb	r3, [r3]
 738 0058 DBB2     		uxtb	r3, r3
 739 005a 9A42     		cmp	r2, r3
 740 005c 0AD1     		bne	.L44
 524:.\Generated_Source\PSoC5/LCD_SPI.c ****            (0u != (LCD_SPI_swStatusTx & LCD_SPI_STS_TX_FIFO_NOT_FULL)))
 741              		.loc 1 524 0 discriminator 1
 742 005e 274B     		ldr	r3, .L49+12
 743 0060 1B78     		ldrb	r3, [r3]
 744 0062 DBB2     		uxtb	r3, r3
 745 0064 03F00403 		and	r3, r3, #4
 523:.\Generated_Source\PSoC5/LCD_SPI.c ****            (0u != (LCD_SPI_swStatusTx & LCD_SPI_STS_TX_FIFO_NOT_FULL)))
 746              		.loc 1 523 0 discriminator 1
 747 0068 002B     		cmp	r3, #0
 748 006a 03D0     		beq	.L44
 525:.\Generated_Source\PSoC5/LCD_SPI.c ****         {
 526:.\Generated_Source\PSoC5/LCD_SPI.c ****             /* Put data element into the TX FIFO */
 527:.\Generated_Source\PSoC5/LCD_SPI.c ****             CY_SET_REG8(LCD_SPI_TXDATA_PTR, txData);
 749              		.loc 1 527 0
 750 006c 244A     		ldr	r2, .L49+16
 751 006e FB79     		ldrb	r3, [r7, #7]
 752 0070 1370     		strb	r3, [r2]
 753 0072 37E0     		b	.L45
 754              	.L44:
 528:.\Generated_Source\PSoC5/LCD_SPI.c ****         }
 529:.\Generated_Source\PSoC5/LCD_SPI.c ****         else
 530:.\Generated_Source\PSoC5/LCD_SPI.c ****         {
 531:.\Generated_Source\PSoC5/LCD_SPI.c ****             /* Add to the TX software buffer */
 532:.\Generated_Source\PSoC5/LCD_SPI.c ****             LCD_SPI_txBufferWrite++;
 755              		.loc 1 532 0
 756 0074 1F4B     		ldr	r3, .L49+4
 757 0076 1B78     		ldrb	r3, [r3]
 758 0078 DBB2     		uxtb	r3, r3
 759 007a 0133     		adds	r3, r3, #1
 760 007c DAB2     		uxtb	r2, r3
 761 007e 1D4B     		ldr	r3, .L49+4
 762 0080 1A70     		strb	r2, [r3]
 533:.\Generated_Source\PSoC5/LCD_SPI.c ****             if(LCD_SPI_txBufferWrite >= LCD_SPI_TX_BUFFER_SIZE)
 763              		.loc 1 533 0
 764 0082 1C4B     		ldr	r3, .L49+4
 765 0084 1B78     		ldrb	r3, [r3]
 766 0086 DBB2     		uxtb	r3, r3
 767 0088 072B     		cmp	r3, #7
 768 008a 02D9     		bls	.L46
 534:.\Generated_Source\PSoC5/LCD_SPI.c ****             {
 535:.\Generated_Source\PSoC5/LCD_SPI.c ****                 LCD_SPI_txBufferWrite = 0u;
 769              		.loc 1 535 0
 770 008c 194B     		ldr	r3, .L49+4
 771 008e 0022     		movs	r2, #0
 772 0090 1A70     		strb	r2, [r3]
 773              	.L46:
 536:.\Generated_Source\PSoC5/LCD_SPI.c ****             }
 537:.\Generated_Source\PSoC5/LCD_SPI.c **** 
ARM GAS  C:\Users\joel\AppData\Local\Temp\ccm1GvVc.s 			page 24


 538:.\Generated_Source\PSoC5/LCD_SPI.c ****             if(LCD_SPI_txBufferWrite == LCD_SPI_txBufferRead)
 774              		.loc 1 538 0
 775 0092 184B     		ldr	r3, .L49+4
 776 0094 1B78     		ldrb	r3, [r3]
 777 0096 DAB2     		uxtb	r2, r3
 778 0098 154B     		ldr	r3, .L49
 779 009a 1B78     		ldrb	r3, [r3]
 780 009c DBB2     		uxtb	r3, r3
 781 009e 9A42     		cmp	r2, r3
 782 00a0 11D1     		bne	.L47
 539:.\Generated_Source\PSoC5/LCD_SPI.c ****             {
 540:.\Generated_Source\PSoC5/LCD_SPI.c ****                 LCD_SPI_txBufferRead++;
 783              		.loc 1 540 0
 784 00a2 134B     		ldr	r3, .L49
 785 00a4 1B78     		ldrb	r3, [r3]
 786 00a6 DBB2     		uxtb	r3, r3
 787 00a8 0133     		adds	r3, r3, #1
 788 00aa DAB2     		uxtb	r2, r3
 789 00ac 104B     		ldr	r3, .L49
 790 00ae 1A70     		strb	r2, [r3]
 541:.\Generated_Source\PSoC5/LCD_SPI.c ****                 if(LCD_SPI_txBufferRead >= LCD_SPI_TX_BUFFER_SIZE)
 791              		.loc 1 541 0
 792 00b0 0F4B     		ldr	r3, .L49
 793 00b2 1B78     		ldrb	r3, [r3]
 794 00b4 DBB2     		uxtb	r3, r3
 795 00b6 072B     		cmp	r3, #7
 796 00b8 02D9     		bls	.L48
 542:.\Generated_Source\PSoC5/LCD_SPI.c ****                 {
 543:.\Generated_Source\PSoC5/LCD_SPI.c ****                     LCD_SPI_txBufferRead = 0u;
 797              		.loc 1 543 0
 798 00ba 0D4B     		ldr	r3, .L49
 799 00bc 0022     		movs	r2, #0
 800 00be 1A70     		strb	r2, [r3]
 801              	.L48:
 544:.\Generated_Source\PSoC5/LCD_SPI.c ****                 }
 545:.\Generated_Source\PSoC5/LCD_SPI.c ****                 LCD_SPI_txBufferFull = 1u;
 802              		.loc 1 545 0
 803 00c0 104B     		ldr	r3, .L49+20
 804 00c2 0122     		movs	r2, #1
 805 00c4 1A70     		strb	r2, [r3]
 806              	.L47:
 546:.\Generated_Source\PSoC5/LCD_SPI.c ****             }
 547:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 548:.\Generated_Source\PSoC5/LCD_SPI.c ****             LCD_SPI_txBuffer[LCD_SPI_txBufferWrite] = txData;
 807              		.loc 1 548 0
 808 00c6 0B4B     		ldr	r3, .L49+4
 809 00c8 1B78     		ldrb	r3, [r3]
 810 00ca DBB2     		uxtb	r3, r3
 811 00cc 1946     		mov	r1, r3
 812 00ce 0E4A     		ldr	r2, .L49+24
 813 00d0 FB79     		ldrb	r3, [r7, #7]
 814 00d2 5354     		strb	r3, [r2, r1]
 549:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 550:.\Generated_Source\PSoC5/LCD_SPI.c ****             LCD_SPI_TX_STATUS_MASK_REG |= LCD_SPI_STS_TX_FIFO_NOT_FULL;
 815              		.loc 1 550 0
 816 00d4 0D4A     		ldr	r2, .L49+28
 817 00d6 0D4B     		ldr	r3, .L49+28
ARM GAS  C:\Users\joel\AppData\Local\Temp\ccm1GvVc.s 			page 25


 818 00d8 1B78     		ldrb	r3, [r3]
 819 00da DBB2     		uxtb	r3, r3
 820 00dc 43F00403 		orr	r3, r3, #4
 821 00e0 DBB2     		uxtb	r3, r3
 822 00e2 1370     		strb	r3, [r2]
 823              	.L45:
 551:.\Generated_Source\PSoC5/LCD_SPI.c ****         }
 552:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 553:.\Generated_Source\PSoC5/LCD_SPI.c ****         LCD_SPI_EnableTxInt();
 824              		.loc 1 553 0
 825 00e4 FFF7FEFF 		bl	LCD_SPI_EnableTxInt
 554:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 555:.\Generated_Source\PSoC5/LCD_SPI.c ****     #else
 556:.\Generated_Source\PSoC5/LCD_SPI.c ****         /* Wait until TX FIFO has a place */
 557:.\Generated_Source\PSoC5/LCD_SPI.c ****         while(0u == (LCD_SPI_TX_STATUS_REG & LCD_SPI_STS_TX_FIFO_NOT_FULL))
 558:.\Generated_Source\PSoC5/LCD_SPI.c ****         {
 559:.\Generated_Source\PSoC5/LCD_SPI.c ****         }
 560:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 561:.\Generated_Source\PSoC5/LCD_SPI.c ****         /* Put data element into the TX FIFO */
 562:.\Generated_Source\PSoC5/LCD_SPI.c ****         CY_SET_REG8(LCD_SPI_TXDATA_PTR, txData);
 563:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 564:.\Generated_Source\PSoC5/LCD_SPI.c ****     #endif /* (LCD_SPI_TX_SOFTWARE_BUF_ENABLED) */
 565:.\Generated_Source\PSoC5/LCD_SPI.c **** }
 826              		.loc 1 565 0
 827 00e8 1037     		adds	r7, r7, #16
 828              		.cfi_def_cfa_offset 8
 829 00ea BD46     		mov	sp, r7
 830              		.cfi_def_cfa_register 13
 831              		@ sp needed
 832 00ec 80BD     		pop	{r7, pc}
 833              	.L50:
 834 00ee 00BF     		.align	2
 835              	.L49:
 836 00f0 00000000 		.word	LCD_SPI_txBufferRead
 837 00f4 00000000 		.word	LCD_SPI_txBufferWrite
 838 00f8 6A640040 		.word	1073767530
 839 00fc 00000000 		.word	LCD_SPI_swStatusTx
 840 0100 4A640040 		.word	1073767498
 841 0104 00000000 		.word	LCD_SPI_txBufferFull
 842 0108 00000000 		.word	LCD_SPI_txBuffer
 843 010c 8A640040 		.word	1073767562
 844              		.cfi_endproc
 845              	.LFE12:
 846              		.size	LCD_SPI_WriteTxData, .-LCD_SPI_WriteTxData
 847              		.section	.text.LCD_SPI_ReadRxData,"ax",%progbits
 848              		.align	2
 849              		.global	LCD_SPI_ReadRxData
 850              		.thumb
 851              		.thumb_func
 852              		.type	LCD_SPI_ReadRxData, %function
 853              	LCD_SPI_ReadRxData:
 854              	.LFB13:
 566:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 567:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 568:.\Generated_Source\PSoC5/LCD_SPI.c **** /*******************************************************************************
 569:.\Generated_Source\PSoC5/LCD_SPI.c **** * Function Name: LCD_SPI_ReadRxData
 570:.\Generated_Source\PSoC5/LCD_SPI.c **** ********************************************************************************
ARM GAS  C:\Users\joel\AppData\Local\Temp\ccm1GvVc.s 			page 26


 571:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 572:.\Generated_Source\PSoC5/LCD_SPI.c **** * Summary:
 573:.\Generated_Source\PSoC5/LCD_SPI.c **** *  Read the next byte of data received across the SPI.
 574:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 575:.\Generated_Source\PSoC5/LCD_SPI.c **** * Parameters:
 576:.\Generated_Source\PSoC5/LCD_SPI.c **** *  None.
 577:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 578:.\Generated_Source\PSoC5/LCD_SPI.c **** * Return:
 579:.\Generated_Source\PSoC5/LCD_SPI.c **** *  The next byte of data read from the FIFO.
 580:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 581:.\Generated_Source\PSoC5/LCD_SPI.c **** * Global variables:
 582:.\Generated_Source\PSoC5/LCD_SPI.c **** *  LCD_SPI_rxBufferWrite - used for the account of the bytes which
 583:.\Generated_Source\PSoC5/LCD_SPI.c **** *  have been written down in the RX software buffer.
 584:.\Generated_Source\PSoC5/LCD_SPI.c **** *  LCD_SPI_rxBufferRead - used for the account of the bytes which
 585:.\Generated_Source\PSoC5/LCD_SPI.c **** *  have been read from the RX software buffer, modified every function
 586:.\Generated_Source\PSoC5/LCD_SPI.c **** *  call if RX Software Buffer is used.
 587:.\Generated_Source\PSoC5/LCD_SPI.c **** *  LCD_SPI_rxBuffer[LCD_SPI_RX_BUFFER_SIZE] - used to store
 588:.\Generated_Source\PSoC5/LCD_SPI.c **** *  received data.
 589:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 590:.\Generated_Source\PSoC5/LCD_SPI.c **** * Theory:
 591:.\Generated_Source\PSoC5/LCD_SPI.c **** *  Allows the user to read a byte of data received.
 592:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 593:.\Generated_Source\PSoC5/LCD_SPI.c **** * Side Effects:
 594:.\Generated_Source\PSoC5/LCD_SPI.c **** *  Will return invalid data if the FIFO is empty. The user should Call
 595:.\Generated_Source\PSoC5/LCD_SPI.c **** *  GetRxBufferSize() and if it returns a non-zero value then it is safe to call
 596:.\Generated_Source\PSoC5/LCD_SPI.c **** *  ReadByte() function.
 597:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 598:.\Generated_Source\PSoC5/LCD_SPI.c **** * Reentrant:
 599:.\Generated_Source\PSoC5/LCD_SPI.c **** *  No.
 600:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 601:.\Generated_Source\PSoC5/LCD_SPI.c **** *******************************************************************************/
 602:.\Generated_Source\PSoC5/LCD_SPI.c **** uint8 LCD_SPI_ReadRxData(void) 
 603:.\Generated_Source\PSoC5/LCD_SPI.c **** {
 855              		.loc 1 603 0
 856              		.cfi_startproc
 857              		@ args = 0, pretend = 0, frame = 8
 858              		@ frame_needed = 1, uses_anonymous_args = 0
 859 0000 80B5     		push	{r7, lr}
 860              		.cfi_def_cfa_offset 8
 861              		.cfi_offset 7, -8
 862              		.cfi_offset 14, -4
 863 0002 82B0     		sub	sp, sp, #8
 864              		.cfi_def_cfa_offset 16
 865 0004 00AF     		add	r7, sp, #0
 866              		.cfi_def_cfa_register 7
 604:.\Generated_Source\PSoC5/LCD_SPI.c ****     uint8 rxData;
 605:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 606:.\Generated_Source\PSoC5/LCD_SPI.c ****     #if(LCD_SPI_RX_SOFTWARE_BUF_ENABLED)
 607:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 608:.\Generated_Source\PSoC5/LCD_SPI.c ****         /* Disable RX interrupt to protect global veriables */
 609:.\Generated_Source\PSoC5/LCD_SPI.c ****         LCD_SPI_DisableRxInt();
 867              		.loc 1 609 0
 868 0006 FFF7FEFF 		bl	LCD_SPI_DisableRxInt
 610:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 611:.\Generated_Source\PSoC5/LCD_SPI.c ****         if(LCD_SPI_rxBufferRead != LCD_SPI_rxBufferWrite)
 869              		.loc 1 611 0
 870 000a 174B     		ldr	r3, .L56
ARM GAS  C:\Users\joel\AppData\Local\Temp\ccm1GvVc.s 			page 27


 871 000c 1B78     		ldrb	r3, [r3]
 872 000e DAB2     		uxtb	r2, r3
 873 0010 164B     		ldr	r3, .L56+4
 874 0012 1B78     		ldrb	r3, [r3]
 875 0014 DBB2     		uxtb	r3, r3
 876 0016 9A42     		cmp	r2, r3
 877 0018 17D0     		beq	.L52
 612:.\Generated_Source\PSoC5/LCD_SPI.c ****         {
 613:.\Generated_Source\PSoC5/LCD_SPI.c ****             if(0u == LCD_SPI_rxBufferFull)
 878              		.loc 1 613 0
 879 001a 154B     		ldr	r3, .L56+8
 880 001c 1B78     		ldrb	r3, [r3]
 881 001e DBB2     		uxtb	r3, r3
 882 0020 002B     		cmp	r3, #0
 883 0022 0FD1     		bne	.L53
 614:.\Generated_Source\PSoC5/LCD_SPI.c ****             {
 615:.\Generated_Source\PSoC5/LCD_SPI.c ****                 LCD_SPI_rxBufferRead++;
 884              		.loc 1 615 0
 885 0024 104B     		ldr	r3, .L56
 886 0026 1B78     		ldrb	r3, [r3]
 887 0028 DBB2     		uxtb	r3, r3
 888 002a 0133     		adds	r3, r3, #1
 889 002c DAB2     		uxtb	r2, r3
 890 002e 0E4B     		ldr	r3, .L56
 891 0030 1A70     		strb	r2, [r3]
 616:.\Generated_Source\PSoC5/LCD_SPI.c ****                 if(LCD_SPI_rxBufferRead >= LCD_SPI_RX_BUFFER_SIZE)
 892              		.loc 1 616 0
 893 0032 0D4B     		ldr	r3, .L56
 894 0034 1B78     		ldrb	r3, [r3]
 895 0036 DBB2     		uxtb	r3, r3
 896 0038 072B     		cmp	r3, #7
 897 003a 06D9     		bls	.L52
 617:.\Generated_Source\PSoC5/LCD_SPI.c ****                 {
 618:.\Generated_Source\PSoC5/LCD_SPI.c ****                     LCD_SPI_rxBufferRead = 0u;
 898              		.loc 1 618 0
 899 003c 0A4B     		ldr	r3, .L56
 900 003e 0022     		movs	r2, #0
 901 0040 1A70     		strb	r2, [r3]
 902 0042 02E0     		b	.L52
 903              	.L53:
 619:.\Generated_Source\PSoC5/LCD_SPI.c ****                 }
 620:.\Generated_Source\PSoC5/LCD_SPI.c ****             }
 621:.\Generated_Source\PSoC5/LCD_SPI.c ****             else
 622:.\Generated_Source\PSoC5/LCD_SPI.c ****             {
 623:.\Generated_Source\PSoC5/LCD_SPI.c ****                 LCD_SPI_rxBufferFull = 0u;
 904              		.loc 1 623 0
 905 0044 0A4B     		ldr	r3, .L56+8
 906 0046 0022     		movs	r2, #0
 907 0048 1A70     		strb	r2, [r3]
 908              	.L52:
 624:.\Generated_Source\PSoC5/LCD_SPI.c ****             }
 625:.\Generated_Source\PSoC5/LCD_SPI.c ****         }
 626:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 627:.\Generated_Source\PSoC5/LCD_SPI.c ****         rxData = LCD_SPI_rxBuffer[LCD_SPI_rxBufferRead];
 909              		.loc 1 627 0
 910 004a 074B     		ldr	r3, .L56
 911 004c 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\joel\AppData\Local\Temp\ccm1GvVc.s 			page 28


 912 004e DBB2     		uxtb	r3, r3
 913 0050 1A46     		mov	r2, r3
 914 0052 084B     		ldr	r3, .L56+12
 915 0054 9B5C     		ldrb	r3, [r3, r2]
 916 0056 FB71     		strb	r3, [r7, #7]
 628:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 629:.\Generated_Source\PSoC5/LCD_SPI.c ****         LCD_SPI_EnableRxInt();
 917              		.loc 1 629 0
 918 0058 FFF7FEFF 		bl	LCD_SPI_EnableRxInt
 630:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 631:.\Generated_Source\PSoC5/LCD_SPI.c ****     #else
 632:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 633:.\Generated_Source\PSoC5/LCD_SPI.c ****         rxData = CY_GET_REG8(LCD_SPI_RXDATA_PTR);
 634:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 635:.\Generated_Source\PSoC5/LCD_SPI.c ****     #endif /* (LCD_SPI_RX_SOFTWARE_BUF_ENABLED) */
 636:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 637:.\Generated_Source\PSoC5/LCD_SPI.c ****     return(rxData);
 919              		.loc 1 637 0
 920 005c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 638:.\Generated_Source\PSoC5/LCD_SPI.c **** }
 921              		.loc 1 638 0
 922 005e 1846     		mov	r0, r3
 923 0060 0837     		adds	r7, r7, #8
 924              		.cfi_def_cfa_offset 8
 925 0062 BD46     		mov	sp, r7
 926              		.cfi_def_cfa_register 13
 927              		@ sp needed
 928 0064 80BD     		pop	{r7, pc}
 929              	.L57:
 930 0066 00BF     		.align	2
 931              	.L56:
 932 0068 00000000 		.word	LCD_SPI_rxBufferRead
 933 006c 00000000 		.word	LCD_SPI_rxBufferWrite
 934 0070 00000000 		.word	LCD_SPI_rxBufferFull
 935 0074 00000000 		.word	LCD_SPI_rxBuffer
 936              		.cfi_endproc
 937              	.LFE13:
 938              		.size	LCD_SPI_ReadRxData, .-LCD_SPI_ReadRxData
 939              		.section	.text.LCD_SPI_GetRxBufferSize,"ax",%progbits
 940              		.align	2
 941              		.global	LCD_SPI_GetRxBufferSize
 942              		.thumb
 943              		.thumb_func
 944              		.type	LCD_SPI_GetRxBufferSize, %function
 945              	LCD_SPI_GetRxBufferSize:
 946              	.LFB14:
 639:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 640:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 641:.\Generated_Source\PSoC5/LCD_SPI.c **** /*******************************************************************************
 642:.\Generated_Source\PSoC5/LCD_SPI.c **** * Function Name: LCD_SPI_GetRxBufferSize
 643:.\Generated_Source\PSoC5/LCD_SPI.c **** ********************************************************************************
 644:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 645:.\Generated_Source\PSoC5/LCD_SPI.c **** * Summary:
 646:.\Generated_Source\PSoC5/LCD_SPI.c **** *  Returns the number of bytes/words of data currently held in the RX buffer.
 647:.\Generated_Source\PSoC5/LCD_SPI.c **** *  If RX Software Buffer not used then function return 0 if FIFO empty or 1 if
 648:.\Generated_Source\PSoC5/LCD_SPI.c **** *  FIFO not empty. In another case function return size of RX Software Buffer.
 649:.\Generated_Source\PSoC5/LCD_SPI.c **** *
ARM GAS  C:\Users\joel\AppData\Local\Temp\ccm1GvVc.s 			page 29


 650:.\Generated_Source\PSoC5/LCD_SPI.c **** * Parameters:
 651:.\Generated_Source\PSoC5/LCD_SPI.c **** *  None.
 652:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 653:.\Generated_Source\PSoC5/LCD_SPI.c **** * Return:
 654:.\Generated_Source\PSoC5/LCD_SPI.c **** *  Integer count of the number of bytes/words in the RX buffer.
 655:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 656:.\Generated_Source\PSoC5/LCD_SPI.c **** * Global variables:
 657:.\Generated_Source\PSoC5/LCD_SPI.c **** *  LCD_SPI_rxBufferWrite - used for the account of the bytes which
 658:.\Generated_Source\PSoC5/LCD_SPI.c **** *  have been written down in the RX software buffer.
 659:.\Generated_Source\PSoC5/LCD_SPI.c **** *  LCD_SPI_rxBufferRead - used for the account of the bytes which
 660:.\Generated_Source\PSoC5/LCD_SPI.c **** *  have been read from the RX software buffer.
 661:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 662:.\Generated_Source\PSoC5/LCD_SPI.c **** * Side Effects:
 663:.\Generated_Source\PSoC5/LCD_SPI.c **** *  Clear status register of the component.
 664:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 665:.\Generated_Source\PSoC5/LCD_SPI.c **** *******************************************************************************/
 666:.\Generated_Source\PSoC5/LCD_SPI.c **** uint8 LCD_SPI_GetRxBufferSize(void) 
 667:.\Generated_Source\PSoC5/LCD_SPI.c **** {
 947              		.loc 1 667 0
 948              		.cfi_startproc
 949              		@ args = 0, pretend = 0, frame = 8
 950              		@ frame_needed = 1, uses_anonymous_args = 0
 951 0000 80B5     		push	{r7, lr}
 952              		.cfi_def_cfa_offset 8
 953              		.cfi_offset 7, -8
 954              		.cfi_offset 14, -4
 955 0002 82B0     		sub	sp, sp, #8
 956              		.cfi_def_cfa_offset 16
 957 0004 00AF     		add	r7, sp, #0
 958              		.cfi_def_cfa_register 7
 668:.\Generated_Source\PSoC5/LCD_SPI.c ****     uint8 size;
 669:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 670:.\Generated_Source\PSoC5/LCD_SPI.c ****     #if(LCD_SPI_RX_SOFTWARE_BUF_ENABLED)
 671:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 672:.\Generated_Source\PSoC5/LCD_SPI.c ****         /* Disable RX interrupt to protect global veriables */
 673:.\Generated_Source\PSoC5/LCD_SPI.c ****         LCD_SPI_DisableRxInt();
 959              		.loc 1 673 0
 960 0006 FFF7FEFF 		bl	LCD_SPI_DisableRxInt
 674:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 675:.\Generated_Source\PSoC5/LCD_SPI.c ****         if(LCD_SPI_rxBufferRead == LCD_SPI_rxBufferWrite)
 961              		.loc 1 675 0
 962 000a 164B     		ldr	r3, .L63
 963 000c 1B78     		ldrb	r3, [r3]
 964 000e DAB2     		uxtb	r2, r3
 965 0010 154B     		ldr	r3, .L63+4
 966 0012 1B78     		ldrb	r3, [r3]
 967 0014 DBB2     		uxtb	r3, r3
 968 0016 9A42     		cmp	r2, r3
 969 0018 02D1     		bne	.L59
 676:.\Generated_Source\PSoC5/LCD_SPI.c ****         {
 677:.\Generated_Source\PSoC5/LCD_SPI.c ****             size = 0u;
 970              		.loc 1 677 0
 971 001a 0023     		movs	r3, #0
 972 001c FB71     		strb	r3, [r7, #7]
 973 001e 1AE0     		b	.L60
 974              	.L59:
 678:.\Generated_Source\PSoC5/LCD_SPI.c ****         }
ARM GAS  C:\Users\joel\AppData\Local\Temp\ccm1GvVc.s 			page 30


 679:.\Generated_Source\PSoC5/LCD_SPI.c ****         else if(LCD_SPI_rxBufferRead < LCD_SPI_rxBufferWrite)
 975              		.loc 1 679 0
 976 0020 104B     		ldr	r3, .L63
 977 0022 1B78     		ldrb	r3, [r3]
 978 0024 DAB2     		uxtb	r2, r3
 979 0026 104B     		ldr	r3, .L63+4
 980 0028 1B78     		ldrb	r3, [r3]
 981 002a DBB2     		uxtb	r3, r3
 982 002c 9A42     		cmp	r2, r3
 983 002e 08D2     		bcs	.L61
 680:.\Generated_Source\PSoC5/LCD_SPI.c ****         {
 681:.\Generated_Source\PSoC5/LCD_SPI.c ****             size = (LCD_SPI_rxBufferWrite - LCD_SPI_rxBufferRead);
 984              		.loc 1 681 0
 985 0030 0D4B     		ldr	r3, .L63+4
 986 0032 1B78     		ldrb	r3, [r3]
 987 0034 DAB2     		uxtb	r2, r3
 988 0036 0B4B     		ldr	r3, .L63
 989 0038 1B78     		ldrb	r3, [r3]
 990 003a DBB2     		uxtb	r3, r3
 991 003c D31A     		subs	r3, r2, r3
 992 003e FB71     		strb	r3, [r7, #7]
 993 0040 09E0     		b	.L60
 994              	.L61:
 682:.\Generated_Source\PSoC5/LCD_SPI.c ****         }
 683:.\Generated_Source\PSoC5/LCD_SPI.c ****         else
 684:.\Generated_Source\PSoC5/LCD_SPI.c ****         {
 685:.\Generated_Source\PSoC5/LCD_SPI.c ****             size = (LCD_SPI_RX_BUFFER_SIZE - LCD_SPI_rxBufferRead) + LCD_SPI_rxBufferWrite;
 995              		.loc 1 685 0
 996 0042 094B     		ldr	r3, .L63+4
 997 0044 1B78     		ldrb	r3, [r3]
 998 0046 DAB2     		uxtb	r2, r3
 999 0048 064B     		ldr	r3, .L63
 1000 004a 1B78     		ldrb	r3, [r3]
 1001 004c DBB2     		uxtb	r3, r3
 1002 004e D31A     		subs	r3, r2, r3
 1003 0050 DBB2     		uxtb	r3, r3
 1004 0052 0833     		adds	r3, r3, #8
 1005 0054 FB71     		strb	r3, [r7, #7]
 1006              	.L60:
 686:.\Generated_Source\PSoC5/LCD_SPI.c ****         }
 687:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 688:.\Generated_Source\PSoC5/LCD_SPI.c ****         LCD_SPI_EnableRxInt();
 1007              		.loc 1 688 0
 1008 0056 FFF7FEFF 		bl	LCD_SPI_EnableRxInt
 689:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 690:.\Generated_Source\PSoC5/LCD_SPI.c ****     #else
 691:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 692:.\Generated_Source\PSoC5/LCD_SPI.c ****         /* We can only know if there is data in the RX FIFO */
 693:.\Generated_Source\PSoC5/LCD_SPI.c ****         size = (0u != (LCD_SPI_RX_STATUS_REG & LCD_SPI_STS_RX_FIFO_NOT_EMPTY)) ? 1u : 0u;
 694:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 695:.\Generated_Source\PSoC5/LCD_SPI.c ****     #endif /* (LCD_SPI_TX_SOFTWARE_BUF_ENABLED) */
 696:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 697:.\Generated_Source\PSoC5/LCD_SPI.c ****     return(size);
 1009              		.loc 1 697 0
 1010 005a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 698:.\Generated_Source\PSoC5/LCD_SPI.c **** }
 1011              		.loc 1 698 0
ARM GAS  C:\Users\joel\AppData\Local\Temp\ccm1GvVc.s 			page 31


 1012 005c 1846     		mov	r0, r3
 1013 005e 0837     		adds	r7, r7, #8
 1014              		.cfi_def_cfa_offset 8
 1015 0060 BD46     		mov	sp, r7
 1016              		.cfi_def_cfa_register 13
 1017              		@ sp needed
 1018 0062 80BD     		pop	{r7, pc}
 1019              	.L64:
 1020              		.align	2
 1021              	.L63:
 1022 0064 00000000 		.word	LCD_SPI_rxBufferRead
 1023 0068 00000000 		.word	LCD_SPI_rxBufferWrite
 1024              		.cfi_endproc
 1025              	.LFE14:
 1026              		.size	LCD_SPI_GetRxBufferSize, .-LCD_SPI_GetRxBufferSize
 1027              		.section	.text.LCD_SPI_GetTxBufferSize,"ax",%progbits
 1028              		.align	2
 1029              		.global	LCD_SPI_GetTxBufferSize
 1030              		.thumb
 1031              		.thumb_func
 1032              		.type	LCD_SPI_GetTxBufferSize, %function
 1033              	LCD_SPI_GetTxBufferSize:
 1034              	.LFB15:
 699:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 700:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 701:.\Generated_Source\PSoC5/LCD_SPI.c **** /*******************************************************************************
 702:.\Generated_Source\PSoC5/LCD_SPI.c **** * Function Name: LCD_SPI_GetTxBufferSize
 703:.\Generated_Source\PSoC5/LCD_SPI.c **** ********************************************************************************
 704:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 705:.\Generated_Source\PSoC5/LCD_SPI.c **** * Summary:
 706:.\Generated_Source\PSoC5/LCD_SPI.c **** *  Returns the number of bytes/words of data currently held in the TX buffer.
 707:.\Generated_Source\PSoC5/LCD_SPI.c **** *  If TX Software Buffer not used then function return 0 - if FIFO empty, 1 - if
 708:.\Generated_Source\PSoC5/LCD_SPI.c **** *  FIFO not full, 4 - if FIFO full. In another case function return size of TX
 709:.\Generated_Source\PSoC5/LCD_SPI.c **** *  Software Buffer.
 710:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 711:.\Generated_Source\PSoC5/LCD_SPI.c **** * Parameters:
 712:.\Generated_Source\PSoC5/LCD_SPI.c **** *  None.
 713:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 714:.\Generated_Source\PSoC5/LCD_SPI.c **** * Return:
 715:.\Generated_Source\PSoC5/LCD_SPI.c **** *  Integer count of the number of bytes/words in the TX buffer.
 716:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 717:.\Generated_Source\PSoC5/LCD_SPI.c **** * Global variables:
 718:.\Generated_Source\PSoC5/LCD_SPI.c **** *  LCD_SPI_txBufferWrite - used for the account of the bytes which
 719:.\Generated_Source\PSoC5/LCD_SPI.c **** *  have been written down in the TX software buffer.
 720:.\Generated_Source\PSoC5/LCD_SPI.c **** *  LCD_SPI_txBufferRead - used for the account of the bytes which
 721:.\Generated_Source\PSoC5/LCD_SPI.c **** *  have been read from the TX software buffer.
 722:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 723:.\Generated_Source\PSoC5/LCD_SPI.c **** * Side Effects:
 724:.\Generated_Source\PSoC5/LCD_SPI.c **** *  Clear status register of the component.
 725:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 726:.\Generated_Source\PSoC5/LCD_SPI.c **** *******************************************************************************/
 727:.\Generated_Source\PSoC5/LCD_SPI.c **** uint8  LCD_SPI_GetTxBufferSize(void) 
 728:.\Generated_Source\PSoC5/LCD_SPI.c **** {
 1035              		.loc 1 728 0
 1036              		.cfi_startproc
 1037              		@ args = 0, pretend = 0, frame = 8
 1038              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\joel\AppData\Local\Temp\ccm1GvVc.s 			page 32


 1039 0000 80B5     		push	{r7, lr}
 1040              		.cfi_def_cfa_offset 8
 1041              		.cfi_offset 7, -8
 1042              		.cfi_offset 14, -4
 1043 0002 82B0     		sub	sp, sp, #8
 1044              		.cfi_def_cfa_offset 16
 1045 0004 00AF     		add	r7, sp, #0
 1046              		.cfi_def_cfa_register 7
 729:.\Generated_Source\PSoC5/LCD_SPI.c ****     uint8 size;
 730:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 731:.\Generated_Source\PSoC5/LCD_SPI.c ****     #if(LCD_SPI_TX_SOFTWARE_BUF_ENABLED)
 732:.\Generated_Source\PSoC5/LCD_SPI.c ****         /* Disable TX interrupt to protect global veriables */
 733:.\Generated_Source\PSoC5/LCD_SPI.c ****         LCD_SPI_DisableTxInt();
 1047              		.loc 1 733 0
 1048 0006 FFF7FEFF 		bl	LCD_SPI_DisableTxInt
 734:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 735:.\Generated_Source\PSoC5/LCD_SPI.c ****         if(LCD_SPI_txBufferRead == LCD_SPI_txBufferWrite)
 1049              		.loc 1 735 0
 1050 000a 164B     		ldr	r3, .L70
 1051 000c 1B78     		ldrb	r3, [r3]
 1052 000e DAB2     		uxtb	r2, r3
 1053 0010 154B     		ldr	r3, .L70+4
 1054 0012 1B78     		ldrb	r3, [r3]
 1055 0014 DBB2     		uxtb	r3, r3
 1056 0016 9A42     		cmp	r2, r3
 1057 0018 02D1     		bne	.L66
 736:.\Generated_Source\PSoC5/LCD_SPI.c ****         {
 737:.\Generated_Source\PSoC5/LCD_SPI.c ****             size = 0u;
 1058              		.loc 1 737 0
 1059 001a 0023     		movs	r3, #0
 1060 001c FB71     		strb	r3, [r7, #7]
 1061 001e 1AE0     		b	.L67
 1062              	.L66:
 738:.\Generated_Source\PSoC5/LCD_SPI.c ****         }
 739:.\Generated_Source\PSoC5/LCD_SPI.c ****         else if(LCD_SPI_txBufferRead < LCD_SPI_txBufferWrite)
 1063              		.loc 1 739 0
 1064 0020 104B     		ldr	r3, .L70
 1065 0022 1B78     		ldrb	r3, [r3]
 1066 0024 DAB2     		uxtb	r2, r3
 1067 0026 104B     		ldr	r3, .L70+4
 1068 0028 1B78     		ldrb	r3, [r3]
 1069 002a DBB2     		uxtb	r3, r3
 1070 002c 9A42     		cmp	r2, r3
 1071 002e 08D2     		bcs	.L68
 740:.\Generated_Source\PSoC5/LCD_SPI.c ****         {
 741:.\Generated_Source\PSoC5/LCD_SPI.c ****             size = (LCD_SPI_txBufferWrite - LCD_SPI_txBufferRead);
 1072              		.loc 1 741 0
 1073 0030 0D4B     		ldr	r3, .L70+4
 1074 0032 1B78     		ldrb	r3, [r3]
 1075 0034 DAB2     		uxtb	r2, r3
 1076 0036 0B4B     		ldr	r3, .L70
 1077 0038 1B78     		ldrb	r3, [r3]
 1078 003a DBB2     		uxtb	r3, r3
 1079 003c D31A     		subs	r3, r2, r3
 1080 003e FB71     		strb	r3, [r7, #7]
 1081 0040 09E0     		b	.L67
 1082              	.L68:
ARM GAS  C:\Users\joel\AppData\Local\Temp\ccm1GvVc.s 			page 33


 742:.\Generated_Source\PSoC5/LCD_SPI.c ****         }
 743:.\Generated_Source\PSoC5/LCD_SPI.c ****         else
 744:.\Generated_Source\PSoC5/LCD_SPI.c ****         {
 745:.\Generated_Source\PSoC5/LCD_SPI.c ****             size = (LCD_SPI_TX_BUFFER_SIZE - LCD_SPI_txBufferRead) + LCD_SPI_txBufferWrite;
 1083              		.loc 1 745 0
 1084 0042 094B     		ldr	r3, .L70+4
 1085 0044 1B78     		ldrb	r3, [r3]
 1086 0046 DAB2     		uxtb	r2, r3
 1087 0048 064B     		ldr	r3, .L70
 1088 004a 1B78     		ldrb	r3, [r3]
 1089 004c DBB2     		uxtb	r3, r3
 1090 004e D31A     		subs	r3, r2, r3
 1091 0050 DBB2     		uxtb	r3, r3
 1092 0052 0833     		adds	r3, r3, #8
 1093 0054 FB71     		strb	r3, [r7, #7]
 1094              	.L67:
 746:.\Generated_Source\PSoC5/LCD_SPI.c ****         }
 747:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 748:.\Generated_Source\PSoC5/LCD_SPI.c ****         LCD_SPI_EnableTxInt();
 1095              		.loc 1 748 0
 1096 0056 FFF7FEFF 		bl	LCD_SPI_EnableTxInt
 749:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 750:.\Generated_Source\PSoC5/LCD_SPI.c ****     #else
 751:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 752:.\Generated_Source\PSoC5/LCD_SPI.c ****         size = LCD_SPI_TX_STATUS_REG;
 753:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 754:.\Generated_Source\PSoC5/LCD_SPI.c ****         if(0u != (size & LCD_SPI_STS_TX_FIFO_EMPTY))
 755:.\Generated_Source\PSoC5/LCD_SPI.c ****         {
 756:.\Generated_Source\PSoC5/LCD_SPI.c ****             size = 0u;
 757:.\Generated_Source\PSoC5/LCD_SPI.c ****         }
 758:.\Generated_Source\PSoC5/LCD_SPI.c ****         else if(0u != (size & LCD_SPI_STS_TX_FIFO_NOT_FULL))
 759:.\Generated_Source\PSoC5/LCD_SPI.c ****         {
 760:.\Generated_Source\PSoC5/LCD_SPI.c ****             size = 1u;
 761:.\Generated_Source\PSoC5/LCD_SPI.c ****         }
 762:.\Generated_Source\PSoC5/LCD_SPI.c ****         else
 763:.\Generated_Source\PSoC5/LCD_SPI.c ****         {
 764:.\Generated_Source\PSoC5/LCD_SPI.c ****             size = LCD_SPI_FIFO_SIZE;
 765:.\Generated_Source\PSoC5/LCD_SPI.c ****         }
 766:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 767:.\Generated_Source\PSoC5/LCD_SPI.c ****     #endif /* (LCD_SPI_TX_SOFTWARE_BUF_ENABLED) */
 768:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 769:.\Generated_Source\PSoC5/LCD_SPI.c ****     return(size);
 1097              		.loc 1 769 0
 1098 005a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 770:.\Generated_Source\PSoC5/LCD_SPI.c **** }
 1099              		.loc 1 770 0
 1100 005c 1846     		mov	r0, r3
 1101 005e 0837     		adds	r7, r7, #8
 1102              		.cfi_def_cfa_offset 8
 1103 0060 BD46     		mov	sp, r7
 1104              		.cfi_def_cfa_register 13
 1105              		@ sp needed
 1106 0062 80BD     		pop	{r7, pc}
 1107              	.L71:
 1108              		.align	2
 1109              	.L70:
 1110 0064 00000000 		.word	LCD_SPI_txBufferRead
ARM GAS  C:\Users\joel\AppData\Local\Temp\ccm1GvVc.s 			page 34


 1111 0068 00000000 		.word	LCD_SPI_txBufferWrite
 1112              		.cfi_endproc
 1113              	.LFE15:
 1114              		.size	LCD_SPI_GetTxBufferSize, .-LCD_SPI_GetTxBufferSize
 1115              		.section	.text.LCD_SPI_ClearRxBuffer,"ax",%progbits
 1116              		.align	2
 1117              		.global	LCD_SPI_ClearRxBuffer
 1118              		.thumb
 1119              		.thumb_func
 1120              		.type	LCD_SPI_ClearRxBuffer, %function
 1121              	LCD_SPI_ClearRxBuffer:
 1122              	.LFB16:
 771:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 772:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 773:.\Generated_Source\PSoC5/LCD_SPI.c **** /*******************************************************************************
 774:.\Generated_Source\PSoC5/LCD_SPI.c **** * Function Name: LCD_SPI_ClearRxBuffer
 775:.\Generated_Source\PSoC5/LCD_SPI.c **** ********************************************************************************
 776:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 777:.\Generated_Source\PSoC5/LCD_SPI.c **** * Summary:
 778:.\Generated_Source\PSoC5/LCD_SPI.c **** *  Clear the RX RAM buffer by setting the read and write pointers both to zero.
 779:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 780:.\Generated_Source\PSoC5/LCD_SPI.c **** * Parameters:
 781:.\Generated_Source\PSoC5/LCD_SPI.c **** *  None.
 782:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 783:.\Generated_Source\PSoC5/LCD_SPI.c **** * Return:
 784:.\Generated_Source\PSoC5/LCD_SPI.c **** *  None.
 785:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 786:.\Generated_Source\PSoC5/LCD_SPI.c **** * Global variables:
 787:.\Generated_Source\PSoC5/LCD_SPI.c **** *  LCD_SPI_rxBufferWrite - used for the account of the bytes which
 788:.\Generated_Source\PSoC5/LCD_SPI.c **** *  have been written down in the RX software buffer, modified every function
 789:.\Generated_Source\PSoC5/LCD_SPI.c **** *  call - resets to zero.
 790:.\Generated_Source\PSoC5/LCD_SPI.c **** *  LCD_SPI_rxBufferRead - used for the account of the bytes which
 791:.\Generated_Source\PSoC5/LCD_SPI.c **** *  have been read from the RX software buffer, modified every function call -
 792:.\Generated_Source\PSoC5/LCD_SPI.c **** *  resets to zero.
 793:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 794:.\Generated_Source\PSoC5/LCD_SPI.c **** * Theory:
 795:.\Generated_Source\PSoC5/LCD_SPI.c **** *  Setting the pointers to zero makes the system believe there is no data to
 796:.\Generated_Source\PSoC5/LCD_SPI.c **** *  read and writing will resume at address 0 overwriting any data that may have
 797:.\Generated_Source\PSoC5/LCD_SPI.c **** *  remained in the RAM.
 798:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 799:.\Generated_Source\PSoC5/LCD_SPI.c **** * Side Effects:
 800:.\Generated_Source\PSoC5/LCD_SPI.c **** *  Any received data not read from the RAM buffer will be lost when overwritten.
 801:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 802:.\Generated_Source\PSoC5/LCD_SPI.c **** * Reentrant:
 803:.\Generated_Source\PSoC5/LCD_SPI.c **** *  No.
 804:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 805:.\Generated_Source\PSoC5/LCD_SPI.c **** *******************************************************************************/
 806:.\Generated_Source\PSoC5/LCD_SPI.c **** void LCD_SPI_ClearRxBuffer(void) 
 807:.\Generated_Source\PSoC5/LCD_SPI.c **** {
 1123              		.loc 1 807 0
 1124              		.cfi_startproc
 1125              		@ args = 0, pretend = 0, frame = 0
 1126              		@ frame_needed = 1, uses_anonymous_args = 0
 1127 0000 80B5     		push	{r7, lr}
 1128              		.cfi_def_cfa_offset 8
 1129              		.cfi_offset 7, -8
 1130              		.cfi_offset 14, -4
ARM GAS  C:\Users\joel\AppData\Local\Temp\ccm1GvVc.s 			page 35


 1131 0002 00AF     		add	r7, sp, #0
 1132              		.cfi_def_cfa_register 7
 808:.\Generated_Source\PSoC5/LCD_SPI.c ****     /* Clear Hardware RX FIFO */
 809:.\Generated_Source\PSoC5/LCD_SPI.c ****     while(0u !=(LCD_SPI_RX_STATUS_REG & LCD_SPI_STS_RX_FIFO_NOT_EMPTY))
 1133              		.loc 1 809 0
 1134 0004 01E0     		b	.L73
 1135              	.L74:
 810:.\Generated_Source\PSoC5/LCD_SPI.c ****     {
 811:.\Generated_Source\PSoC5/LCD_SPI.c ****         (void) CY_GET_REG8(LCD_SPI_RXDATA_PTR);
 1136              		.loc 1 811 0
 1137 0006 0B4B     		ldr	r3, .L75
 1138 0008 1B78     		ldrb	r3, [r3]
 1139              	.L73:
 809:.\Generated_Source\PSoC5/LCD_SPI.c ****     {
 1140              		.loc 1 809 0
 1141 000a 0B4B     		ldr	r3, .L75+4
 1142 000c 1B78     		ldrb	r3, [r3]
 1143 000e DBB2     		uxtb	r3, r3
 1144 0010 03F02003 		and	r3, r3, #32
 1145 0014 002B     		cmp	r3, #0
 1146 0016 F6D1     		bne	.L74
 812:.\Generated_Source\PSoC5/LCD_SPI.c ****     }
 813:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 814:.\Generated_Source\PSoC5/LCD_SPI.c ****     #if(LCD_SPI_RX_SOFTWARE_BUF_ENABLED)
 815:.\Generated_Source\PSoC5/LCD_SPI.c ****         /* Disable RX interrupt to protect global veriables */
 816:.\Generated_Source\PSoC5/LCD_SPI.c ****         LCD_SPI_DisableRxInt();
 1147              		.loc 1 816 0
 1148 0018 FFF7FEFF 		bl	LCD_SPI_DisableRxInt
 817:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 818:.\Generated_Source\PSoC5/LCD_SPI.c ****         LCD_SPI_rxBufferFull  = 0u;
 1149              		.loc 1 818 0
 1150 001c 074B     		ldr	r3, .L75+8
 1151 001e 0022     		movs	r2, #0
 1152 0020 1A70     		strb	r2, [r3]
 819:.\Generated_Source\PSoC5/LCD_SPI.c ****         LCD_SPI_rxBufferRead  = 0u;
 1153              		.loc 1 819 0
 1154 0022 074B     		ldr	r3, .L75+12
 1155 0024 0022     		movs	r2, #0
 1156 0026 1A70     		strb	r2, [r3]
 820:.\Generated_Source\PSoC5/LCD_SPI.c ****         LCD_SPI_rxBufferWrite = 0u;
 1157              		.loc 1 820 0
 1158 0028 064B     		ldr	r3, .L75+16
 1159 002a 0022     		movs	r2, #0
 1160 002c 1A70     		strb	r2, [r3]
 821:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 822:.\Generated_Source\PSoC5/LCD_SPI.c ****         LCD_SPI_EnableRxInt();
 1161              		.loc 1 822 0
 1162 002e FFF7FEFF 		bl	LCD_SPI_EnableRxInt
 823:.\Generated_Source\PSoC5/LCD_SPI.c ****     #endif /* (LCD_SPI_RX_SOFTWARE_BUF_ENABLED) */
 824:.\Generated_Source\PSoC5/LCD_SPI.c **** }
 1163              		.loc 1 824 0
 1164 0032 80BD     		pop	{r7, pc}
 1165              	.L76:
 1166              		.align	2
 1167              	.L75:
 1168 0034 5A640040 		.word	1073767514
 1169 0038 6B640040 		.word	1073767531
ARM GAS  C:\Users\joel\AppData\Local\Temp\ccm1GvVc.s 			page 36


 1170 003c 00000000 		.word	LCD_SPI_rxBufferFull
 1171 0040 00000000 		.word	LCD_SPI_rxBufferRead
 1172 0044 00000000 		.word	LCD_SPI_rxBufferWrite
 1173              		.cfi_endproc
 1174              	.LFE16:
 1175              		.size	LCD_SPI_ClearRxBuffer, .-LCD_SPI_ClearRxBuffer
 1176              		.section	.text.LCD_SPI_ClearTxBuffer,"ax",%progbits
 1177              		.align	2
 1178              		.global	LCD_SPI_ClearTxBuffer
 1179              		.thumb
 1180              		.thumb_func
 1181              		.type	LCD_SPI_ClearTxBuffer, %function
 1182              	LCD_SPI_ClearTxBuffer:
 1183              	.LFB17:
 825:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 826:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 827:.\Generated_Source\PSoC5/LCD_SPI.c **** /*******************************************************************************
 828:.\Generated_Source\PSoC5/LCD_SPI.c **** * Function Name: LCD_SPI_ClearTxBuffer
 829:.\Generated_Source\PSoC5/LCD_SPI.c **** ********************************************************************************
 830:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 831:.\Generated_Source\PSoC5/LCD_SPI.c **** * Summary:
 832:.\Generated_Source\PSoC5/LCD_SPI.c **** *  Clear the TX RAM buffer by setting the read and write pointers both to zero.
 833:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 834:.\Generated_Source\PSoC5/LCD_SPI.c **** * Parameters:
 835:.\Generated_Source\PSoC5/LCD_SPI.c **** *  None.
 836:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 837:.\Generated_Source\PSoC5/LCD_SPI.c **** * Return:
 838:.\Generated_Source\PSoC5/LCD_SPI.c **** *  None.
 839:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 840:.\Generated_Source\PSoC5/LCD_SPI.c **** * Global variables:
 841:.\Generated_Source\PSoC5/LCD_SPI.c **** *  LCD_SPI_txBufferWrite - used for the account of the bytes which
 842:.\Generated_Source\PSoC5/LCD_SPI.c **** *  have been written down in the TX software buffer, modified every function
 843:.\Generated_Source\PSoC5/LCD_SPI.c **** *  call - resets to zero.
 844:.\Generated_Source\PSoC5/LCD_SPI.c **** *  LCD_SPI_txBufferRead - used for the account of the bytes which
 845:.\Generated_Source\PSoC5/LCD_SPI.c **** *  have been read from the TX software buffer, modified every function call -
 846:.\Generated_Source\PSoC5/LCD_SPI.c **** *  resets to zero.
 847:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 848:.\Generated_Source\PSoC5/LCD_SPI.c **** * Theory:
 849:.\Generated_Source\PSoC5/LCD_SPI.c **** *  Setting the pointers to zero makes the system believe there is no data to
 850:.\Generated_Source\PSoC5/LCD_SPI.c **** *  read and writing will resume at address 0 overwriting any data that may have
 851:.\Generated_Source\PSoC5/LCD_SPI.c **** *  remained in the RAM.
 852:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 853:.\Generated_Source\PSoC5/LCD_SPI.c **** * Side Effects:
 854:.\Generated_Source\PSoC5/LCD_SPI.c **** *  Any data not yet transmitted from the RAM buffer will be lost when
 855:.\Generated_Source\PSoC5/LCD_SPI.c **** *  overwritten.
 856:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 857:.\Generated_Source\PSoC5/LCD_SPI.c **** * Reentrant:
 858:.\Generated_Source\PSoC5/LCD_SPI.c **** *  No.
 859:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 860:.\Generated_Source\PSoC5/LCD_SPI.c **** *******************************************************************************/
 861:.\Generated_Source\PSoC5/LCD_SPI.c **** void LCD_SPI_ClearTxBuffer(void) 
 862:.\Generated_Source\PSoC5/LCD_SPI.c **** {
 1184              		.loc 1 862 0
 1185              		.cfi_startproc
 1186              		@ args = 0, pretend = 0, frame = 8
 1187              		@ frame_needed = 1, uses_anonymous_args = 0
 1188 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\joel\AppData\Local\Temp\ccm1GvVc.s 			page 37


 1189              		.cfi_def_cfa_offset 8
 1190              		.cfi_offset 7, -8
 1191              		.cfi_offset 14, -4
 1192 0002 82B0     		sub	sp, sp, #8
 1193              		.cfi_def_cfa_offset 16
 1194 0004 00AF     		add	r7, sp, #0
 1195              		.cfi_def_cfa_register 7
 863:.\Generated_Source\PSoC5/LCD_SPI.c ****     uint8 enableInterrupts;
 864:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 865:.\Generated_Source\PSoC5/LCD_SPI.c ****     enableInterrupts = CyEnterCriticalSection();
 1196              		.loc 1 865 0
 1197 0006 FFF7FEFF 		bl	CyEnterCriticalSection
 1198 000a 0346     		mov	r3, r0
 1199 000c FB71     		strb	r3, [r7, #7]
 866:.\Generated_Source\PSoC5/LCD_SPI.c ****     /* Clear TX FIFO */
 867:.\Generated_Source\PSoC5/LCD_SPI.c ****     LCD_SPI_AUX_CONTROL_DP0_REG |= ((uint8)  LCD_SPI_TX_FIFO_CLR);
 1200              		.loc 1 867 0
 1201 000e 164A     		ldr	r2, .L78
 1202 0010 154B     		ldr	r3, .L78
 1203 0012 1B78     		ldrb	r3, [r3]
 1204 0014 DBB2     		uxtb	r3, r3
 1205 0016 43F00103 		orr	r3, r3, #1
 1206 001a DBB2     		uxtb	r3, r3
 1207 001c 1370     		strb	r3, [r2]
 868:.\Generated_Source\PSoC5/LCD_SPI.c ****     LCD_SPI_AUX_CONTROL_DP0_REG &= ((uint8) ~LCD_SPI_TX_FIFO_CLR);
 1208              		.loc 1 868 0
 1209 001e 124A     		ldr	r2, .L78
 1210 0020 114B     		ldr	r3, .L78
 1211 0022 1B78     		ldrb	r3, [r3]
 1212 0024 DBB2     		uxtb	r3, r3
 1213 0026 23F00103 		bic	r3, r3, #1
 1214 002a DBB2     		uxtb	r3, r3
 1215 002c 1370     		strb	r3, [r2]
 869:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 870:.\Generated_Source\PSoC5/LCD_SPI.c ****     #if(LCD_SPI_USE_SECOND_DATAPATH)
 871:.\Generated_Source\PSoC5/LCD_SPI.c ****         /* Clear TX FIFO for 2nd Datapath */
 872:.\Generated_Source\PSoC5/LCD_SPI.c ****         LCD_SPI_AUX_CONTROL_DP1_REG |= ((uint8)  LCD_SPI_TX_FIFO_CLR);
 873:.\Generated_Source\PSoC5/LCD_SPI.c ****         LCD_SPI_AUX_CONTROL_DP1_REG &= ((uint8) ~LCD_SPI_TX_FIFO_CLR);
 874:.\Generated_Source\PSoC5/LCD_SPI.c ****     #endif /* (LCD_SPI_USE_SECOND_DATAPATH) */
 875:.\Generated_Source\PSoC5/LCD_SPI.c ****     CyExitCriticalSection(enableInterrupts);
 1216              		.loc 1 875 0
 1217 002e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1218 0030 1846     		mov	r0, r3
 1219 0032 FFF7FEFF 		bl	CyExitCriticalSection
 876:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 877:.\Generated_Source\PSoC5/LCD_SPI.c ****     #if(LCD_SPI_TX_SOFTWARE_BUF_ENABLED)
 878:.\Generated_Source\PSoC5/LCD_SPI.c ****         /* Disable TX interrupt to protect global veriables */
 879:.\Generated_Source\PSoC5/LCD_SPI.c ****         LCD_SPI_DisableTxInt();
 1220              		.loc 1 879 0
 1221 0036 FFF7FEFF 		bl	LCD_SPI_DisableTxInt
 880:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 881:.\Generated_Source\PSoC5/LCD_SPI.c ****         LCD_SPI_txBufferFull  = 0u;
 1222              		.loc 1 881 0
 1223 003a 0C4B     		ldr	r3, .L78+4
 1224 003c 0022     		movs	r2, #0
 1225 003e 1A70     		strb	r2, [r3]
 882:.\Generated_Source\PSoC5/LCD_SPI.c ****         LCD_SPI_txBufferRead  = 0u;
ARM GAS  C:\Users\joel\AppData\Local\Temp\ccm1GvVc.s 			page 38


 1226              		.loc 1 882 0
 1227 0040 0B4B     		ldr	r3, .L78+8
 1228 0042 0022     		movs	r2, #0
 1229 0044 1A70     		strb	r2, [r3]
 883:.\Generated_Source\PSoC5/LCD_SPI.c ****         LCD_SPI_txBufferWrite = 0u;
 1230              		.loc 1 883 0
 1231 0046 0B4B     		ldr	r3, .L78+12
 1232 0048 0022     		movs	r2, #0
 1233 004a 1A70     		strb	r2, [r3]
 884:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 885:.\Generated_Source\PSoC5/LCD_SPI.c ****         /* Buffer is EMPTY: disable TX FIFO NOT FULL interrupt */
 886:.\Generated_Source\PSoC5/LCD_SPI.c ****         LCD_SPI_TX_STATUS_MASK_REG &= ((uint8) ~LCD_SPI_STS_TX_FIFO_NOT_FULL);
 1234              		.loc 1 886 0
 1235 004c 0A4A     		ldr	r2, .L78+16
 1236 004e 0A4B     		ldr	r3, .L78+16
 1237 0050 1B78     		ldrb	r3, [r3]
 1238 0052 DBB2     		uxtb	r3, r3
 1239 0054 23F00403 		bic	r3, r3, #4
 1240 0058 DBB2     		uxtb	r3, r3
 1241 005a 1370     		strb	r3, [r2]
 887:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 888:.\Generated_Source\PSoC5/LCD_SPI.c ****         LCD_SPI_EnableTxInt();
 1242              		.loc 1 888 0
 1243 005c FFF7FEFF 		bl	LCD_SPI_EnableTxInt
 889:.\Generated_Source\PSoC5/LCD_SPI.c ****     #endif /* (LCD_SPI_TX_SOFTWARE_BUF_ENABLED) */
 890:.\Generated_Source\PSoC5/LCD_SPI.c **** }
 1244              		.loc 1 890 0
 1245 0060 0837     		adds	r7, r7, #8
 1246              		.cfi_def_cfa_offset 8
 1247 0062 BD46     		mov	sp, r7
 1248              		.cfi_def_cfa_register 13
 1249              		@ sp needed
 1250 0064 80BD     		pop	{r7, pc}
 1251              	.L79:
 1252 0066 00BF     		.align	2
 1253              	.L78:
 1254 0068 9A640040 		.word	1073767578
 1255 006c 00000000 		.word	LCD_SPI_txBufferFull
 1256 0070 00000000 		.word	LCD_SPI_txBufferRead
 1257 0074 00000000 		.word	LCD_SPI_txBufferWrite
 1258 0078 8A640040 		.word	1073767562
 1259              		.cfi_endproc
 1260              	.LFE17:
 1261              		.size	LCD_SPI_ClearTxBuffer, .-LCD_SPI_ClearTxBuffer
 1262              		.section	.text.LCD_SPI_PutArray,"ax",%progbits
 1263              		.align	2
 1264              		.global	LCD_SPI_PutArray
 1265              		.thumb
 1266              		.thumb_func
 1267              		.type	LCD_SPI_PutArray, %function
 1268              	LCD_SPI_PutArray:
 1269              	.LFB18:
 891:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 892:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 893:.\Generated_Source\PSoC5/LCD_SPI.c **** #if(0u != LCD_SPI_BIDIRECTIONAL_MODE)
 894:.\Generated_Source\PSoC5/LCD_SPI.c ****     /*******************************************************************************
 895:.\Generated_Source\PSoC5/LCD_SPI.c ****     * Function Name: LCD_SPI_TxEnable
ARM GAS  C:\Users\joel\AppData\Local\Temp\ccm1GvVc.s 			page 39


 896:.\Generated_Source\PSoC5/LCD_SPI.c ****     ********************************************************************************
 897:.\Generated_Source\PSoC5/LCD_SPI.c ****     *
 898:.\Generated_Source\PSoC5/LCD_SPI.c ****     * Summary:
 899:.\Generated_Source\PSoC5/LCD_SPI.c ****     *  If the SPI master is configured to use a single bi-directional pin then this
 900:.\Generated_Source\PSoC5/LCD_SPI.c ****     *  will set the bi-directional pin to transmit.
 901:.\Generated_Source\PSoC5/LCD_SPI.c ****     *
 902:.\Generated_Source\PSoC5/LCD_SPI.c ****     * Parameters:
 903:.\Generated_Source\PSoC5/LCD_SPI.c ****     *  None.
 904:.\Generated_Source\PSoC5/LCD_SPI.c ****     *
 905:.\Generated_Source\PSoC5/LCD_SPI.c ****     * Return:
 906:.\Generated_Source\PSoC5/LCD_SPI.c ****     *  None.
 907:.\Generated_Source\PSoC5/LCD_SPI.c ****     *
 908:.\Generated_Source\PSoC5/LCD_SPI.c ****     *******************************************************************************/
 909:.\Generated_Source\PSoC5/LCD_SPI.c ****     void LCD_SPI_TxEnable(void) 
 910:.\Generated_Source\PSoC5/LCD_SPI.c ****     {
 911:.\Generated_Source\PSoC5/LCD_SPI.c ****         LCD_SPI_CONTROL_REG |= LCD_SPI_CTRL_TX_SIGNAL_EN;
 912:.\Generated_Source\PSoC5/LCD_SPI.c ****     }
 913:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 914:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 915:.\Generated_Source\PSoC5/LCD_SPI.c ****     /*******************************************************************************
 916:.\Generated_Source\PSoC5/LCD_SPI.c ****     * Function Name: LCD_SPI_TxDisable
 917:.\Generated_Source\PSoC5/LCD_SPI.c ****     ********************************************************************************
 918:.\Generated_Source\PSoC5/LCD_SPI.c ****     *
 919:.\Generated_Source\PSoC5/LCD_SPI.c ****     * Summary:
 920:.\Generated_Source\PSoC5/LCD_SPI.c ****     *  If the SPI master is configured to use a single bi-directional pin then this
 921:.\Generated_Source\PSoC5/LCD_SPI.c ****     *  will set the bi-directional pin to receive.
 922:.\Generated_Source\PSoC5/LCD_SPI.c ****     *
 923:.\Generated_Source\PSoC5/LCD_SPI.c ****     * Parameters:
 924:.\Generated_Source\PSoC5/LCD_SPI.c ****     *  None.
 925:.\Generated_Source\PSoC5/LCD_SPI.c ****     *
 926:.\Generated_Source\PSoC5/LCD_SPI.c ****     * Return:
 927:.\Generated_Source\PSoC5/LCD_SPI.c ****     *  None.
 928:.\Generated_Source\PSoC5/LCD_SPI.c ****     *
 929:.\Generated_Source\PSoC5/LCD_SPI.c ****     *******************************************************************************/
 930:.\Generated_Source\PSoC5/LCD_SPI.c ****     void LCD_SPI_TxDisable(void) 
 931:.\Generated_Source\PSoC5/LCD_SPI.c ****     {
 932:.\Generated_Source\PSoC5/LCD_SPI.c ****         LCD_SPI_CONTROL_REG &= ((uint8) ~LCD_SPI_CTRL_TX_SIGNAL_EN);
 933:.\Generated_Source\PSoC5/LCD_SPI.c ****     }
 934:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 935:.\Generated_Source\PSoC5/LCD_SPI.c **** #endif /* (0u != LCD_SPI_BIDIRECTIONAL_MODE) */
 936:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 937:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 938:.\Generated_Source\PSoC5/LCD_SPI.c **** /*******************************************************************************
 939:.\Generated_Source\PSoC5/LCD_SPI.c **** * Function Name: LCD_SPI_PutArray
 940:.\Generated_Source\PSoC5/LCD_SPI.c **** ********************************************************************************
 941:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 942:.\Generated_Source\PSoC5/LCD_SPI.c **** * Summary:
 943:.\Generated_Source\PSoC5/LCD_SPI.c **** *  Write available data from ROM/RAM to the TX buffer while space is available
 944:.\Generated_Source\PSoC5/LCD_SPI.c **** *  in the TX buffer. Keep trying until all data is passed to the TX buffer.
 945:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 946:.\Generated_Source\PSoC5/LCD_SPI.c **** * Parameters:
 947:.\Generated_Source\PSoC5/LCD_SPI.c **** *  *buffer: Pointer to the location in RAM containing the data to send
 948:.\Generated_Source\PSoC5/LCD_SPI.c **** *  byteCount: The number of bytes to move to the transmit buffer.
 949:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 950:.\Generated_Source\PSoC5/LCD_SPI.c **** * Return:
 951:.\Generated_Source\PSoC5/LCD_SPI.c **** *  None.
 952:.\Generated_Source\PSoC5/LCD_SPI.c **** *
ARM GAS  C:\Users\joel\AppData\Local\Temp\ccm1GvVc.s 			page 40


 953:.\Generated_Source\PSoC5/LCD_SPI.c **** * Side Effects:
 954:.\Generated_Source\PSoC5/LCD_SPI.c **** *  Will stay in this routine until all data has been sent.  May get locked in
 955:.\Generated_Source\PSoC5/LCD_SPI.c **** *  this loop if data is not being initiated by the master if there is not
 956:.\Generated_Source\PSoC5/LCD_SPI.c **** *  enough room in the TX FIFO.
 957:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 958:.\Generated_Source\PSoC5/LCD_SPI.c **** * Reentrant:
 959:.\Generated_Source\PSoC5/LCD_SPI.c **** *  No.
 960:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 961:.\Generated_Source\PSoC5/LCD_SPI.c **** *******************************************************************************/
 962:.\Generated_Source\PSoC5/LCD_SPI.c **** void LCD_SPI_PutArray(const uint8 buffer[], uint8 byteCount)
 963:.\Generated_Source\PSoC5/LCD_SPI.c ****                                                                           
 964:.\Generated_Source\PSoC5/LCD_SPI.c **** {
 1270              		.loc 1 964 0
 1271              		.cfi_startproc
 1272              		@ args = 0, pretend = 0, frame = 16
 1273              		@ frame_needed = 1, uses_anonymous_args = 0
 1274 0000 80B5     		push	{r7, lr}
 1275              		.cfi_def_cfa_offset 8
 1276              		.cfi_offset 7, -8
 1277              		.cfi_offset 14, -4
 1278 0002 84B0     		sub	sp, sp, #16
 1279              		.cfi_def_cfa_offset 24
 1280 0004 00AF     		add	r7, sp, #0
 1281              		.cfi_def_cfa_register 7
 1282 0006 7860     		str	r0, [r7, #4]
 1283 0008 0B46     		mov	r3, r1
 1284 000a FB70     		strb	r3, [r7, #3]
 965:.\Generated_Source\PSoC5/LCD_SPI.c ****     uint8 bufIndex;
 966:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 967:.\Generated_Source\PSoC5/LCD_SPI.c ****     bufIndex = 0u;
 1285              		.loc 1 967 0
 1286 000c 0023     		movs	r3, #0
 1287 000e FB73     		strb	r3, [r7, #15]
 968:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 969:.\Generated_Source\PSoC5/LCD_SPI.c ****     while(byteCount > 0u)
 1288              		.loc 1 969 0
 1289 0010 0CE0     		b	.L81
 1290              	.L82:
 970:.\Generated_Source\PSoC5/LCD_SPI.c ****     {
 971:.\Generated_Source\PSoC5/LCD_SPI.c ****         LCD_SPI_WriteTxData(buffer[bufIndex]);
 1291              		.loc 1 971 0
 1292 0012 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1293 0014 7A68     		ldr	r2, [r7, #4]
 1294 0016 1344     		add	r3, r3, r2
 1295 0018 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1296 001a 1846     		mov	r0, r3
 1297 001c FFF7FEFF 		bl	LCD_SPI_WriteTxData
 972:.\Generated_Source\PSoC5/LCD_SPI.c ****         bufIndex++;
 1298              		.loc 1 972 0
 1299 0020 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1300 0022 0133     		adds	r3, r3, #1
 1301 0024 FB73     		strb	r3, [r7, #15]
 973:.\Generated_Source\PSoC5/LCD_SPI.c ****         byteCount--;
 1302              		.loc 1 973 0
 1303 0026 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1304 0028 013B     		subs	r3, r3, #1
 1305 002a FB70     		strb	r3, [r7, #3]
ARM GAS  C:\Users\joel\AppData\Local\Temp\ccm1GvVc.s 			page 41


 1306              	.L81:
 969:.\Generated_Source\PSoC5/LCD_SPI.c ****     {
 1307              		.loc 1 969 0
 1308 002c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1309 002e 002B     		cmp	r3, #0
 1310 0030 EFD1     		bne	.L82
 974:.\Generated_Source\PSoC5/LCD_SPI.c ****     }
 975:.\Generated_Source\PSoC5/LCD_SPI.c **** }
 1311              		.loc 1 975 0
 1312 0032 1037     		adds	r7, r7, #16
 1313              		.cfi_def_cfa_offset 8
 1314 0034 BD46     		mov	sp, r7
 1315              		.cfi_def_cfa_register 13
 1316              		@ sp needed
 1317 0036 80BD     		pop	{r7, pc}
 1318              		.cfi_endproc
 1319              	.LFE18:
 1320              		.size	LCD_SPI_PutArray, .-LCD_SPI_PutArray
 1321              		.section	.text.LCD_SPI_ClearFIFO,"ax",%progbits
 1322              		.align	2
 1323              		.global	LCD_SPI_ClearFIFO
 1324              		.thumb
 1325              		.thumb_func
 1326              		.type	LCD_SPI_ClearFIFO, %function
 1327              	LCD_SPI_ClearFIFO:
 1328              	.LFB19:
 976:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 977:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 978:.\Generated_Source\PSoC5/LCD_SPI.c **** /*******************************************************************************
 979:.\Generated_Source\PSoC5/LCD_SPI.c **** * Function Name: LCD_SPI_ClearFIFO
 980:.\Generated_Source\PSoC5/LCD_SPI.c **** ********************************************************************************
 981:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 982:.\Generated_Source\PSoC5/LCD_SPI.c **** * Summary:
 983:.\Generated_Source\PSoC5/LCD_SPI.c **** *  Clear the RX and TX FIFO's of all data for a fresh start.
 984:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 985:.\Generated_Source\PSoC5/LCD_SPI.c **** * Parameters:
 986:.\Generated_Source\PSoC5/LCD_SPI.c **** *  None.
 987:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 988:.\Generated_Source\PSoC5/LCD_SPI.c **** * Return:
 989:.\Generated_Source\PSoC5/LCD_SPI.c **** *  None.
 990:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 991:.\Generated_Source\PSoC5/LCD_SPI.c **** * Side Effects:
 992:.\Generated_Source\PSoC5/LCD_SPI.c **** *  Clear status register of the component.
 993:.\Generated_Source\PSoC5/LCD_SPI.c **** *
 994:.\Generated_Source\PSoC5/LCD_SPI.c **** *******************************************************************************/
 995:.\Generated_Source\PSoC5/LCD_SPI.c **** void LCD_SPI_ClearFIFO(void) 
 996:.\Generated_Source\PSoC5/LCD_SPI.c **** {
 1329              		.loc 1 996 0
 1330              		.cfi_startproc
 1331              		@ args = 0, pretend = 0, frame = 8
 1332              		@ frame_needed = 1, uses_anonymous_args = 0
 1333 0000 80B5     		push	{r7, lr}
 1334              		.cfi_def_cfa_offset 8
 1335              		.cfi_offset 7, -8
 1336              		.cfi_offset 14, -4
 1337 0002 82B0     		sub	sp, sp, #8
 1338              		.cfi_def_cfa_offset 16
ARM GAS  C:\Users\joel\AppData\Local\Temp\ccm1GvVc.s 			page 42


 1339 0004 00AF     		add	r7, sp, #0
 1340              		.cfi_def_cfa_register 7
 997:.\Generated_Source\PSoC5/LCD_SPI.c ****     uint8 enableInterrupts;
 998:.\Generated_Source\PSoC5/LCD_SPI.c **** 
 999:.\Generated_Source\PSoC5/LCD_SPI.c ****     /* Clear Hardware RX FIFO */
1000:.\Generated_Source\PSoC5/LCD_SPI.c ****     while(0u !=(LCD_SPI_RX_STATUS_REG & LCD_SPI_STS_RX_FIFO_NOT_EMPTY))
 1341              		.loc 1 1000 0
 1342 0006 01E0     		b	.L84
 1343              	.L85:
1001:.\Generated_Source\PSoC5/LCD_SPI.c ****     {
1002:.\Generated_Source\PSoC5/LCD_SPI.c ****         (void) CY_GET_REG8(LCD_SPI_RXDATA_PTR);
 1344              		.loc 1 1002 0
 1345 0008 114B     		ldr	r3, .L86
 1346 000a 1B78     		ldrb	r3, [r3]
 1347              	.L84:
1000:.\Generated_Source\PSoC5/LCD_SPI.c ****     {
 1348              		.loc 1 1000 0
 1349 000c 114B     		ldr	r3, .L86+4
 1350 000e 1B78     		ldrb	r3, [r3]
 1351 0010 DBB2     		uxtb	r3, r3
 1352 0012 03F02003 		and	r3, r3, #32
 1353 0016 002B     		cmp	r3, #0
 1354 0018 F6D1     		bne	.L85
1003:.\Generated_Source\PSoC5/LCD_SPI.c ****     }
1004:.\Generated_Source\PSoC5/LCD_SPI.c **** 
1005:.\Generated_Source\PSoC5/LCD_SPI.c ****     enableInterrupts = CyEnterCriticalSection();
 1355              		.loc 1 1005 0
 1356 001a FFF7FEFF 		bl	CyEnterCriticalSection
 1357 001e 0346     		mov	r3, r0
 1358 0020 FB71     		strb	r3, [r7, #7]
1006:.\Generated_Source\PSoC5/LCD_SPI.c ****     /* Clear TX FIFO */
1007:.\Generated_Source\PSoC5/LCD_SPI.c ****     LCD_SPI_AUX_CONTROL_DP0_REG |= ((uint8)  LCD_SPI_TX_FIFO_CLR);
 1359              		.loc 1 1007 0
 1360 0022 0D4A     		ldr	r2, .L86+8
 1361 0024 0C4B     		ldr	r3, .L86+8
 1362 0026 1B78     		ldrb	r3, [r3]
 1363 0028 DBB2     		uxtb	r3, r3
 1364 002a 43F00103 		orr	r3, r3, #1
 1365 002e DBB2     		uxtb	r3, r3
 1366 0030 1370     		strb	r3, [r2]
1008:.\Generated_Source\PSoC5/LCD_SPI.c ****     LCD_SPI_AUX_CONTROL_DP0_REG &= ((uint8) ~LCD_SPI_TX_FIFO_CLR);
 1367              		.loc 1 1008 0
 1368 0032 094A     		ldr	r2, .L86+8
 1369 0034 084B     		ldr	r3, .L86+8
 1370 0036 1B78     		ldrb	r3, [r3]
 1371 0038 DBB2     		uxtb	r3, r3
 1372 003a 23F00103 		bic	r3, r3, #1
 1373 003e DBB2     		uxtb	r3, r3
 1374 0040 1370     		strb	r3, [r2]
1009:.\Generated_Source\PSoC5/LCD_SPI.c **** 
1010:.\Generated_Source\PSoC5/LCD_SPI.c ****     #if(LCD_SPI_USE_SECOND_DATAPATH)
1011:.\Generated_Source\PSoC5/LCD_SPI.c ****         /* Clear TX FIFO for 2nd Datapath */
1012:.\Generated_Source\PSoC5/LCD_SPI.c ****         LCD_SPI_AUX_CONTROL_DP1_REG |= ((uint8)  LCD_SPI_TX_FIFO_CLR);
1013:.\Generated_Source\PSoC5/LCD_SPI.c ****         LCD_SPI_AUX_CONTROL_DP1_REG &= ((uint8) ~LCD_SPI_TX_FIFO_CLR);
1014:.\Generated_Source\PSoC5/LCD_SPI.c ****     #endif /* (LCD_SPI_USE_SECOND_DATAPATH) */
1015:.\Generated_Source\PSoC5/LCD_SPI.c ****     CyExitCriticalSection(enableInterrupts);
 1375              		.loc 1 1015 0
ARM GAS  C:\Users\joel\AppData\Local\Temp\ccm1GvVc.s 			page 43


 1376 0042 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1377 0044 1846     		mov	r0, r3
 1378 0046 FFF7FEFF 		bl	CyExitCriticalSection
1016:.\Generated_Source\PSoC5/LCD_SPI.c **** }
 1379              		.loc 1 1016 0
 1380 004a 0837     		adds	r7, r7, #8
 1381              		.cfi_def_cfa_offset 8
 1382 004c BD46     		mov	sp, r7
 1383              		.cfi_def_cfa_register 13
 1384              		@ sp needed
 1385 004e 80BD     		pop	{r7, pc}
 1386              	.L87:
 1387              		.align	2
 1388              	.L86:
 1389 0050 5A640040 		.word	1073767514
 1390 0054 6B640040 		.word	1073767531
 1391 0058 9A640040 		.word	1073767578
 1392              		.cfi_endproc
 1393              	.LFE19:
 1394              		.size	LCD_SPI_ClearFIFO, .-LCD_SPI_ClearFIFO
 1395              		.section	.text.LCD_SPI_EnableInt,"ax",%progbits
 1396              		.align	2
 1397              		.global	LCD_SPI_EnableInt
 1398              		.thumb
 1399              		.thumb_func
 1400              		.type	LCD_SPI_EnableInt, %function
 1401              	LCD_SPI_EnableInt:
 1402              	.LFB20:
1017:.\Generated_Source\PSoC5/LCD_SPI.c **** 
1018:.\Generated_Source\PSoC5/LCD_SPI.c **** 
1019:.\Generated_Source\PSoC5/LCD_SPI.c **** /* Following functions are for version Compatibility, they are obsolete.
1020:.\Generated_Source\PSoC5/LCD_SPI.c **** *  Please do not use it in new projects.
1021:.\Generated_Source\PSoC5/LCD_SPI.c **** */
1022:.\Generated_Source\PSoC5/LCD_SPI.c **** 
1023:.\Generated_Source\PSoC5/LCD_SPI.c **** 
1024:.\Generated_Source\PSoC5/LCD_SPI.c **** /*******************************************************************************
1025:.\Generated_Source\PSoC5/LCD_SPI.c **** * Function Name: LCD_SPI_EnableInt
1026:.\Generated_Source\PSoC5/LCD_SPI.c **** ********************************************************************************
1027:.\Generated_Source\PSoC5/LCD_SPI.c **** *
1028:.\Generated_Source\PSoC5/LCD_SPI.c **** * Summary:
1029:.\Generated_Source\PSoC5/LCD_SPI.c **** *  Enable internal interrupt generation.
1030:.\Generated_Source\PSoC5/LCD_SPI.c **** *
1031:.\Generated_Source\PSoC5/LCD_SPI.c **** * Parameters:
1032:.\Generated_Source\PSoC5/LCD_SPI.c **** *  None.
1033:.\Generated_Source\PSoC5/LCD_SPI.c **** *
1034:.\Generated_Source\PSoC5/LCD_SPI.c **** * Return:
1035:.\Generated_Source\PSoC5/LCD_SPI.c **** *  None.
1036:.\Generated_Source\PSoC5/LCD_SPI.c **** *
1037:.\Generated_Source\PSoC5/LCD_SPI.c **** * Theory:
1038:.\Generated_Source\PSoC5/LCD_SPI.c **** *  Enable the internal interrupt output -or- the interrupt component itself.
1039:.\Generated_Source\PSoC5/LCD_SPI.c **** *
1040:.\Generated_Source\PSoC5/LCD_SPI.c **** *******************************************************************************/
1041:.\Generated_Source\PSoC5/LCD_SPI.c **** void LCD_SPI_EnableInt(void) 
1042:.\Generated_Source\PSoC5/LCD_SPI.c **** {
 1403              		.loc 1 1042 0
 1404              		.cfi_startproc
 1405              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\joel\AppData\Local\Temp\ccm1GvVc.s 			page 44


 1406              		@ frame_needed = 1, uses_anonymous_args = 0
 1407 0000 80B5     		push	{r7, lr}
 1408              		.cfi_def_cfa_offset 8
 1409              		.cfi_offset 7, -8
 1410              		.cfi_offset 14, -4
 1411 0002 00AF     		add	r7, sp, #0
 1412              		.cfi_def_cfa_register 7
1043:.\Generated_Source\PSoC5/LCD_SPI.c ****     LCD_SPI_EnableRxInt();
 1413              		.loc 1 1043 0
 1414 0004 FFF7FEFF 		bl	LCD_SPI_EnableRxInt
1044:.\Generated_Source\PSoC5/LCD_SPI.c ****     LCD_SPI_EnableTxInt();
 1415              		.loc 1 1044 0
 1416 0008 FFF7FEFF 		bl	LCD_SPI_EnableTxInt
1045:.\Generated_Source\PSoC5/LCD_SPI.c **** }
 1417              		.loc 1 1045 0
 1418 000c 80BD     		pop	{r7, pc}
 1419              		.cfi_endproc
 1420              	.LFE20:
 1421              		.size	LCD_SPI_EnableInt, .-LCD_SPI_EnableInt
 1422 000e 00BF     		.section	.text.LCD_SPI_DisableInt,"ax",%progbits
 1423              		.align	2
 1424              		.global	LCD_SPI_DisableInt
 1425              		.thumb
 1426              		.thumb_func
 1427              		.type	LCD_SPI_DisableInt, %function
 1428              	LCD_SPI_DisableInt:
 1429              	.LFB21:
1046:.\Generated_Source\PSoC5/LCD_SPI.c **** 
1047:.\Generated_Source\PSoC5/LCD_SPI.c **** 
1048:.\Generated_Source\PSoC5/LCD_SPI.c **** /*******************************************************************************
1049:.\Generated_Source\PSoC5/LCD_SPI.c **** * Function Name: LCD_SPI_DisableInt
1050:.\Generated_Source\PSoC5/LCD_SPI.c **** ********************************************************************************
1051:.\Generated_Source\PSoC5/LCD_SPI.c **** *
1052:.\Generated_Source\PSoC5/LCD_SPI.c **** * Summary:
1053:.\Generated_Source\PSoC5/LCD_SPI.c **** *  Disable internal interrupt generation.
1054:.\Generated_Source\PSoC5/LCD_SPI.c **** *
1055:.\Generated_Source\PSoC5/LCD_SPI.c **** * Parameters:
1056:.\Generated_Source\PSoC5/LCD_SPI.c **** *  None.
1057:.\Generated_Source\PSoC5/LCD_SPI.c **** *
1058:.\Generated_Source\PSoC5/LCD_SPI.c **** * Return:
1059:.\Generated_Source\PSoC5/LCD_SPI.c **** *  None.
1060:.\Generated_Source\PSoC5/LCD_SPI.c **** *
1061:.\Generated_Source\PSoC5/LCD_SPI.c **** * Theory:
1062:.\Generated_Source\PSoC5/LCD_SPI.c **** *  Disable the internal interrupt output -or- the interrupt component itself.
1063:.\Generated_Source\PSoC5/LCD_SPI.c **** *
1064:.\Generated_Source\PSoC5/LCD_SPI.c **** *******************************************************************************/
1065:.\Generated_Source\PSoC5/LCD_SPI.c **** void LCD_SPI_DisableInt(void) 
1066:.\Generated_Source\PSoC5/LCD_SPI.c **** {
 1430              		.loc 1 1066 0
 1431              		.cfi_startproc
 1432              		@ args = 0, pretend = 0, frame = 0
 1433              		@ frame_needed = 1, uses_anonymous_args = 0
 1434 0000 80B5     		push	{r7, lr}
 1435              		.cfi_def_cfa_offset 8
 1436              		.cfi_offset 7, -8
 1437              		.cfi_offset 14, -4
 1438 0002 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\joel\AppData\Local\Temp\ccm1GvVc.s 			page 45


 1439              		.cfi_def_cfa_register 7
1067:.\Generated_Source\PSoC5/LCD_SPI.c ****     LCD_SPI_DisableTxInt();
 1440              		.loc 1 1067 0
 1441 0004 FFF7FEFF 		bl	LCD_SPI_DisableTxInt
1068:.\Generated_Source\PSoC5/LCD_SPI.c ****     LCD_SPI_DisableRxInt();
 1442              		.loc 1 1068 0
 1443 0008 FFF7FEFF 		bl	LCD_SPI_DisableRxInt
1069:.\Generated_Source\PSoC5/LCD_SPI.c **** }
 1444              		.loc 1 1069 0
 1445 000c 80BD     		pop	{r7, pc}
 1446              		.cfi_endproc
 1447              	.LFE21:
 1448              		.size	LCD_SPI_DisableInt, .-LCD_SPI_DisableInt
 1449 000e 00BF     		.section	.text.LCD_SPI_SetInterruptMode,"ax",%progbits
 1450              		.align	2
 1451              		.global	LCD_SPI_SetInterruptMode
 1452              		.thumb
 1453              		.thumb_func
 1454              		.type	LCD_SPI_SetInterruptMode, %function
 1455              	LCD_SPI_SetInterruptMode:
 1456              	.LFB22:
1070:.\Generated_Source\PSoC5/LCD_SPI.c **** 
1071:.\Generated_Source\PSoC5/LCD_SPI.c **** 
1072:.\Generated_Source\PSoC5/LCD_SPI.c **** /*******************************************************************************
1073:.\Generated_Source\PSoC5/LCD_SPI.c **** * Function Name: LCD_SPI_SetInterruptMode
1074:.\Generated_Source\PSoC5/LCD_SPI.c **** ********************************************************************************
1075:.\Generated_Source\PSoC5/LCD_SPI.c **** *
1076:.\Generated_Source\PSoC5/LCD_SPI.c **** * Summary:
1077:.\Generated_Source\PSoC5/LCD_SPI.c **** *  Configure which status bits trigger an interrupt event.
1078:.\Generated_Source\PSoC5/LCD_SPI.c **** *
1079:.\Generated_Source\PSoC5/LCD_SPI.c **** * Parameters:
1080:.\Generated_Source\PSoC5/LCD_SPI.c **** *  intSrc: An or'd combination of the desired status bit masks (defined in the
1081:.\Generated_Source\PSoC5/LCD_SPI.c **** *  header file).
1082:.\Generated_Source\PSoC5/LCD_SPI.c **** *
1083:.\Generated_Source\PSoC5/LCD_SPI.c **** * Return:
1084:.\Generated_Source\PSoC5/LCD_SPI.c **** *  None.
1085:.\Generated_Source\PSoC5/LCD_SPI.c **** *
1086:.\Generated_Source\PSoC5/LCD_SPI.c **** * Theory:
1087:.\Generated_Source\PSoC5/LCD_SPI.c **** *  Enables the output of specific status bits to the interrupt controller.
1088:.\Generated_Source\PSoC5/LCD_SPI.c **** *
1089:.\Generated_Source\PSoC5/LCD_SPI.c **** *******************************************************************************/
1090:.\Generated_Source\PSoC5/LCD_SPI.c **** void LCD_SPI_SetInterruptMode(uint8 intSrc) 
1091:.\Generated_Source\PSoC5/LCD_SPI.c **** {
 1457              		.loc 1 1091 0
 1458              		.cfi_startproc
 1459              		@ args = 0, pretend = 0, frame = 8
 1460              		@ frame_needed = 1, uses_anonymous_args = 0
 1461              		@ link register save eliminated.
 1462 0000 80B4     		push	{r7}
 1463              		.cfi_def_cfa_offset 4
 1464              		.cfi_offset 7, -4
 1465 0002 83B0     		sub	sp, sp, #12
 1466              		.cfi_def_cfa_offset 16
 1467 0004 00AF     		add	r7, sp, #0
 1468              		.cfi_def_cfa_register 7
 1469 0006 0346     		mov	r3, r0
 1470 0008 FB71     		strb	r3, [r7, #7]
ARM GAS  C:\Users\joel\AppData\Local\Temp\ccm1GvVc.s 			page 46


1092:.\Generated_Source\PSoC5/LCD_SPI.c ****     LCD_SPI_TX_STATUS_MASK_REG  = (intSrc & ((uint8) ~LCD_SPI_STS_SPI_IDLE));
 1471              		.loc 1 1092 0
 1472 000a 074A     		ldr	r2, .L91
 1473 000c FB79     		ldrb	r3, [r7, #7]
 1474 000e 23F01003 		bic	r3, r3, #16
 1475 0012 DBB2     		uxtb	r3, r3
 1476 0014 1370     		strb	r3, [r2]
1093:.\Generated_Source\PSoC5/LCD_SPI.c ****     LCD_SPI_RX_STATUS_MASK_REG  =  intSrc;
 1477              		.loc 1 1093 0
 1478 0016 054A     		ldr	r2, .L91+4
 1479 0018 FB79     		ldrb	r3, [r7, #7]
 1480 001a 1370     		strb	r3, [r2]
1094:.\Generated_Source\PSoC5/LCD_SPI.c **** }
 1481              		.loc 1 1094 0
 1482 001c 0C37     		adds	r7, r7, #12
 1483              		.cfi_def_cfa_offset 4
 1484 001e BD46     		mov	sp, r7
 1485              		.cfi_def_cfa_register 13
 1486              		@ sp needed
 1487 0020 5DF8047B 		ldr	r7, [sp], #4
 1488              		.cfi_restore 7
 1489              		.cfi_def_cfa_offset 0
 1490 0024 7047     		bx	lr
 1491              	.L92:
 1492 0026 00BF     		.align	2
 1493              	.L91:
 1494 0028 8A640040 		.word	1073767562
 1495 002c 8B640040 		.word	1073767563
 1496              		.cfi_endproc
 1497              	.LFE22:
 1498              		.size	LCD_SPI_SetInterruptMode, .-LCD_SPI_SetInterruptMode
 1499              		.section	.text.LCD_SPI_ReadStatus,"ax",%progbits
 1500              		.align	2
 1501              		.global	LCD_SPI_ReadStatus
 1502              		.thumb
 1503              		.thumb_func
 1504              		.type	LCD_SPI_ReadStatus, %function
 1505              	LCD_SPI_ReadStatus:
 1506              	.LFB23:
1095:.\Generated_Source\PSoC5/LCD_SPI.c **** 
1096:.\Generated_Source\PSoC5/LCD_SPI.c **** 
1097:.\Generated_Source\PSoC5/LCD_SPI.c **** /*******************************************************************************
1098:.\Generated_Source\PSoC5/LCD_SPI.c **** * Function Name: LCD_SPI_ReadStatus
1099:.\Generated_Source\PSoC5/LCD_SPI.c **** ********************************************************************************
1100:.\Generated_Source\PSoC5/LCD_SPI.c **** *
1101:.\Generated_Source\PSoC5/LCD_SPI.c **** * Summary:
1102:.\Generated_Source\PSoC5/LCD_SPI.c **** *  Read the status register for the component.
1103:.\Generated_Source\PSoC5/LCD_SPI.c **** *
1104:.\Generated_Source\PSoC5/LCD_SPI.c **** * Parameters:
1105:.\Generated_Source\PSoC5/LCD_SPI.c **** *  None.
1106:.\Generated_Source\PSoC5/LCD_SPI.c **** *
1107:.\Generated_Source\PSoC5/LCD_SPI.c **** * Return:
1108:.\Generated_Source\PSoC5/LCD_SPI.c **** *  Contents of the status register.
1109:.\Generated_Source\PSoC5/LCD_SPI.c **** *
1110:.\Generated_Source\PSoC5/LCD_SPI.c **** * Global variables:
1111:.\Generated_Source\PSoC5/LCD_SPI.c **** *  LCD_SPI_swStatus - used to store in software status register,
1112:.\Generated_Source\PSoC5/LCD_SPI.c **** *  modified every function call - resets to zero.
ARM GAS  C:\Users\joel\AppData\Local\Temp\ccm1GvVc.s 			page 47


1113:.\Generated_Source\PSoC5/LCD_SPI.c **** *
1114:.\Generated_Source\PSoC5/LCD_SPI.c **** * Theory:
1115:.\Generated_Source\PSoC5/LCD_SPI.c **** *  Allows the user and the API to read the status register for error detection
1116:.\Generated_Source\PSoC5/LCD_SPI.c **** *  and flow control.
1117:.\Generated_Source\PSoC5/LCD_SPI.c **** *
1118:.\Generated_Source\PSoC5/LCD_SPI.c **** * Side Effects:
1119:.\Generated_Source\PSoC5/LCD_SPI.c **** *  Clear status register of the component.
1120:.\Generated_Source\PSoC5/LCD_SPI.c **** *
1121:.\Generated_Source\PSoC5/LCD_SPI.c **** * Reentrant:
1122:.\Generated_Source\PSoC5/LCD_SPI.c **** *  No.
1123:.\Generated_Source\PSoC5/LCD_SPI.c **** *
1124:.\Generated_Source\PSoC5/LCD_SPI.c **** *******************************************************************************/
1125:.\Generated_Source\PSoC5/LCD_SPI.c **** uint8 LCD_SPI_ReadStatus(void) 
1126:.\Generated_Source\PSoC5/LCD_SPI.c **** {
 1507              		.loc 1 1126 0
 1508              		.cfi_startproc
 1509              		@ args = 0, pretend = 0, frame = 8
 1510              		@ frame_needed = 1, uses_anonymous_args = 0
 1511 0000 80B5     		push	{r7, lr}
 1512              		.cfi_def_cfa_offset 8
 1513              		.cfi_offset 7, -8
 1514              		.cfi_offset 14, -4
 1515 0002 82B0     		sub	sp, sp, #8
 1516              		.cfi_def_cfa_offset 16
 1517 0004 00AF     		add	r7, sp, #0
 1518              		.cfi_def_cfa_register 7
1127:.\Generated_Source\PSoC5/LCD_SPI.c ****     uint8 tmpStatus;
1128:.\Generated_Source\PSoC5/LCD_SPI.c **** 
1129:.\Generated_Source\PSoC5/LCD_SPI.c ****     #if(LCD_SPI_TX_SOFTWARE_BUF_ENABLED || LCD_SPI_RX_SOFTWARE_BUF_ENABLED)
1130:.\Generated_Source\PSoC5/LCD_SPI.c **** 
1131:.\Generated_Source\PSoC5/LCD_SPI.c ****         LCD_SPI_DisableInt();
 1519              		.loc 1 1131 0
 1520 0006 FFF7FEFF 		bl	LCD_SPI_DisableInt
1132:.\Generated_Source\PSoC5/LCD_SPI.c **** 
1133:.\Generated_Source\PSoC5/LCD_SPI.c ****         tmpStatus  = LCD_SPI_GET_STATUS_RX(LCD_SPI_swStatusRx);
 1521              		.loc 1 1133 0
 1522 000a 154B     		ldr	r3, .L95
 1523 000c 1B78     		ldrb	r3, [r3]
 1524 000e DAB2     		uxtb	r2, r3
 1525 0010 144B     		ldr	r3, .L95+4
 1526 0012 1B78     		ldrb	r3, [r3]
 1527 0014 DBB2     		uxtb	r3, r3
 1528 0016 03F04003 		and	r3, r3, #64
 1529 001a DBB2     		uxtb	r3, r3
 1530 001c 1343     		orrs	r3, r3, r2
 1531 001e FB71     		strb	r3, [r7, #7]
1134:.\Generated_Source\PSoC5/LCD_SPI.c ****         tmpStatus |= LCD_SPI_GET_STATUS_TX(LCD_SPI_swStatusTx);
 1532              		.loc 1 1134 0
 1533 0020 114B     		ldr	r3, .L95+8
 1534 0022 1B78     		ldrb	r3, [r3]
 1535 0024 DAB2     		uxtb	r2, r3
 1536 0026 114B     		ldr	r3, .L95+12
 1537 0028 1B78     		ldrb	r3, [r3]
 1538 002a DBB2     		uxtb	r3, r3
 1539 002c 03F00903 		and	r3, r3, #9
 1540 0030 DBB2     		uxtb	r3, r3
 1541 0032 1343     		orrs	r3, r3, r2
ARM GAS  C:\Users\joel\AppData\Local\Temp\ccm1GvVc.s 			page 48


 1542 0034 DAB2     		uxtb	r2, r3
 1543 0036 FB79     		ldrb	r3, [r7, #7]
 1544 0038 1343     		orrs	r3, r3, r2
 1545 003a FB71     		strb	r3, [r7, #7]
1135:.\Generated_Source\PSoC5/LCD_SPI.c ****         tmpStatus &= ((uint8) ~LCD_SPI_STS_SPI_IDLE);
 1546              		.loc 1 1135 0
 1547 003c FB79     		ldrb	r3, [r7, #7]
 1548 003e 23F01003 		bic	r3, r3, #16
 1549 0042 FB71     		strb	r3, [r7, #7]
1136:.\Generated_Source\PSoC5/LCD_SPI.c **** 
1137:.\Generated_Source\PSoC5/LCD_SPI.c ****         LCD_SPI_swStatusTx = 0u;
 1550              		.loc 1 1137 0
 1551 0044 094B     		ldr	r3, .L95+12
 1552 0046 0022     		movs	r2, #0
 1553 0048 1A70     		strb	r2, [r3]
1138:.\Generated_Source\PSoC5/LCD_SPI.c ****         LCD_SPI_swStatusRx = 0u;
 1554              		.loc 1 1138 0
 1555 004a 064B     		ldr	r3, .L95+4
 1556 004c 0022     		movs	r2, #0
 1557 004e 1A70     		strb	r2, [r3]
1139:.\Generated_Source\PSoC5/LCD_SPI.c **** 
1140:.\Generated_Source\PSoC5/LCD_SPI.c ****         LCD_SPI_EnableInt();
 1558              		.loc 1 1140 0
 1559 0050 FFF7FEFF 		bl	LCD_SPI_EnableInt
1141:.\Generated_Source\PSoC5/LCD_SPI.c **** 
1142:.\Generated_Source\PSoC5/LCD_SPI.c ****     #else
1143:.\Generated_Source\PSoC5/LCD_SPI.c **** 
1144:.\Generated_Source\PSoC5/LCD_SPI.c ****         tmpStatus  = LCD_SPI_RX_STATUS_REG;
1145:.\Generated_Source\PSoC5/LCD_SPI.c ****         tmpStatus |= LCD_SPI_TX_STATUS_REG;
1146:.\Generated_Source\PSoC5/LCD_SPI.c ****         tmpStatus &= ((uint8) ~LCD_SPI_STS_SPI_IDLE);
1147:.\Generated_Source\PSoC5/LCD_SPI.c **** 
1148:.\Generated_Source\PSoC5/LCD_SPI.c ****     #endif /* (LCD_SPI_TX_SOFTWARE_BUF_ENABLED || LCD_SPI_RX_SOFTWARE_BUF_ENABLED) */
1149:.\Generated_Source\PSoC5/LCD_SPI.c **** 
1150:.\Generated_Source\PSoC5/LCD_SPI.c ****     return(tmpStatus);
 1560              		.loc 1 1150 0
 1561 0054 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
1151:.\Generated_Source\PSoC5/LCD_SPI.c **** }
 1562              		.loc 1 1151 0
 1563 0056 1846     		mov	r0, r3
 1564 0058 0837     		adds	r7, r7, #8
 1565              		.cfi_def_cfa_offset 8
 1566 005a BD46     		mov	sp, r7
 1567              		.cfi_def_cfa_register 13
 1568              		@ sp needed
 1569 005c 80BD     		pop	{r7, pc}
 1570              	.L96:
 1571 005e 00BF     		.align	2
 1572              	.L95:
 1573 0060 6B640040 		.word	1073767531
 1574 0064 00000000 		.word	LCD_SPI_swStatusRx
 1575 0068 6A640040 		.word	1073767530
 1576 006c 00000000 		.word	LCD_SPI_swStatusTx
 1577              		.cfi_endproc
 1578              	.LFE23:
 1579              		.size	LCD_SPI_ReadStatus, .-LCD_SPI_ReadStatus
 1580              		.text
 1581              	.Letext0:
ARM GAS  C:\Users\joel\AppData\Local\Temp\ccm1GvVc.s 			page 49


 1582              		.file 2 ".\\Generated_Source\\PSoC5\\cytypes.h"
 1583              		.section	.debug_info,"",%progbits
 1584              	.Ldebug_info0:
 1585 0000 C6040000 		.4byte	0x4c6
 1586 0004 0400     		.2byte	0x4
 1587 0006 00000000 		.4byte	.Ldebug_abbrev0
 1588 000a 04       		.byte	0x4
 1589 000b 01       		.uleb128 0x1
 1590 000c 9D020000 		.4byte	.LASF63
 1591 0010 01       		.byte	0x1
 1592 0011 76000000 		.4byte	.LASF64
 1593 0015 42040000 		.4byte	.LASF65
 1594 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1595 001d 00000000 		.4byte	0
 1596 0021 00000000 		.4byte	.Ldebug_line0
 1597 0025 02       		.uleb128 0x2
 1598 0026 01       		.byte	0x1
 1599 0027 06       		.byte	0x6
 1600 0028 E1000000 		.4byte	.LASF0
 1601 002c 02       		.uleb128 0x2
 1602 002d 01       		.byte	0x1
 1603 002e 08       		.byte	0x8
 1604 002f 8A030000 		.4byte	.LASF1
 1605 0033 02       		.uleb128 0x2
 1606 0034 02       		.byte	0x2
 1607 0035 05       		.byte	0x5
 1608 0036 98030000 		.4byte	.LASF2
 1609 003a 02       		.uleb128 0x2
 1610 003b 02       		.byte	0x2
 1611 003c 07       		.byte	0x7
 1612 003d 2A020000 		.4byte	.LASF3
 1613 0041 02       		.uleb128 0x2
 1614 0042 04       		.byte	0x4
 1615 0043 05       		.byte	0x5
 1616 0044 1E010000 		.4byte	.LASF4
 1617 0048 02       		.uleb128 0x2
 1618 0049 04       		.byte	0x4
 1619 004a 07       		.byte	0x7
 1620 004b 13020000 		.4byte	.LASF5
 1621 004f 02       		.uleb128 0x2
 1622 0050 08       		.byte	0x8
 1623 0051 05       		.byte	0x5
 1624 0052 D3000000 		.4byte	.LASF6
 1625 0056 02       		.uleb128 0x2
 1626 0057 08       		.byte	0x8
 1627 0058 07       		.byte	0x7
 1628 0059 5F000000 		.4byte	.LASF7
 1629 005d 03       		.uleb128 0x3
 1630 005e 04       		.byte	0x4
 1631 005f 05       		.byte	0x5
 1632 0060 696E7400 		.ascii	"int\000"
 1633 0064 02       		.uleb128 0x2
 1634 0065 04       		.byte	0x4
 1635 0066 07       		.byte	0x7
 1636 0067 C2010000 		.4byte	.LASF8
 1637 006b 04       		.uleb128 0x4
 1638 006c 71010000 		.4byte	.LASF9
ARM GAS  C:\Users\joel\AppData\Local\Temp\ccm1GvVc.s 			page 50


 1639 0070 02       		.byte	0x2
 1640 0071 9201     		.2byte	0x192
 1641 0073 2C000000 		.4byte	0x2c
 1642 0077 04       		.uleb128 0x4
 1643 0078 91010000 		.4byte	.LASF10
 1644 007c 02       		.byte	0x2
 1645 007d 9401     		.2byte	0x194
 1646 007f 48000000 		.4byte	0x48
 1647 0083 02       		.uleb128 0x2
 1648 0084 04       		.byte	0x4
 1649 0085 04       		.byte	0x4
 1650 0086 58030000 		.4byte	.LASF11
 1651 008a 02       		.uleb128 0x2
 1652 008b 08       		.byte	0x8
 1653 008c 04       		.byte	0x4
 1654 008d 77010000 		.4byte	.LASF12
 1655 0091 02       		.uleb128 0x2
 1656 0092 01       		.byte	0x1
 1657 0093 08       		.byte	0x8
 1658 0094 E3030000 		.4byte	.LASF13
 1659 0098 04       		.uleb128 0x4
 1660 0099 85030000 		.4byte	.LASF14
 1661 009d 02       		.byte	0x2
 1662 009e 3C02     		.2byte	0x23c
 1663 00a0 A4000000 		.4byte	0xa4
 1664 00a4 05       		.uleb128 0x5
 1665 00a5 6B000000 		.4byte	0x6b
 1666 00a9 04       		.uleb128 0x4
 1667 00aa 76020000 		.4byte	.LASF15
 1668 00ae 02       		.byte	0x2
 1669 00af 3E02     		.2byte	0x23e
 1670 00b1 B5000000 		.4byte	0xb5
 1671 00b5 05       		.uleb128 0x5
 1672 00b6 77000000 		.4byte	0x77
 1673 00ba 02       		.uleb128 0x2
 1674 00bb 04       		.byte	0x4
 1675 00bc 07       		.byte	0x7
 1676 00bd 7C020000 		.4byte	.LASF16
 1677 00c1 06       		.uleb128 0x6
 1678 00c2 ED000000 		.4byte	.LASF17
 1679 00c6 01       		.byte	0x1
 1680 00c7 3F       		.byte	0x3f
 1681 00c8 00000000 		.4byte	.LFB0
 1682 00cc A4000000 		.4byte	.LFE0-.LFB0
 1683 00d0 01       		.uleb128 0x1
 1684 00d1 9C       		.byte	0x9c
 1685 00d2 07       		.uleb128 0x7
 1686 00d3 FA000000 		.4byte	.LASF19
 1687 00d7 01       		.byte	0x1
 1688 00d8 78       		.byte	0x78
 1689 00d9 00000000 		.4byte	.LFB1
 1690 00dd 64000000 		.4byte	.LFE1-.LFB1
 1691 00e1 01       		.uleb128 0x1
 1692 00e2 9C       		.byte	0x9c
 1693 00e3 F6000000 		.4byte	0xf6
 1694 00e7 08       		.uleb128 0x8
 1695 00e8 31040000 		.4byte	.LASF21
ARM GAS  C:\Users\joel\AppData\Local\Temp\ccm1GvVc.s 			page 51


 1696 00ec 01       		.byte	0x1
 1697 00ed 7A       		.byte	0x7a
 1698 00ee 6B000000 		.4byte	0x6b
 1699 00f2 02       		.uleb128 0x2
 1700 00f3 91       		.byte	0x91
 1701 00f4 77       		.sleb128 -9
 1702 00f5 00       		.byte	0
 1703 00f6 06       		.uleb128 0x6
 1704 00f7 4A030000 		.4byte	.LASF18
 1705 00fb 01       		.byte	0x1
 1706 00fc A3       		.byte	0xa3
 1707 00fd 00000000 		.4byte	.LFB2
 1708 0101 20000000 		.4byte	.LFE2-.LFB2
 1709 0105 01       		.uleb128 0x1
 1710 0106 9C       		.byte	0x9c
 1711 0107 07       		.uleb128 0x7
 1712 0108 D6030000 		.4byte	.LASF20
 1713 010c 01       		.byte	0x1
 1714 010d C0       		.byte	0xc0
 1715 010e 00000000 		.4byte	.LFB3
 1716 0112 50000000 		.4byte	.LFE3-.LFB3
 1717 0116 01       		.uleb128 0x1
 1718 0117 9C       		.byte	0x9c
 1719 0118 2B010000 		.4byte	0x12b
 1720 011c 08       		.uleb128 0x8
 1721 011d 31040000 		.4byte	.LASF21
 1722 0121 01       		.byte	0x1
 1723 0122 C2       		.byte	0xc2
 1724 0123 6B000000 		.4byte	0x6b
 1725 0127 02       		.uleb128 0x2
 1726 0128 91       		.byte	0x91
 1727 0129 77       		.sleb128 -9
 1728 012a 00       		.byte	0
 1729 012b 09       		.uleb128 0x9
 1730 012c 36030000 		.4byte	.LASF22
 1731 0130 01       		.byte	0x1
 1732 0131 E3       		.byte	0xe3
 1733 0132 00000000 		.4byte	.LFB4
 1734 0136 18000000 		.4byte	.LFE4-.LFB4
 1735 013a 01       		.uleb128 0x1
 1736 013b 9C       		.byte	0x9c
 1737 013c 09       		.uleb128 0x9
 1738 013d E4010000 		.4byte	.LASF23
 1739 0141 01       		.byte	0x1
 1740 0142 FC       		.byte	0xfc
 1741 0143 00000000 		.4byte	.LFB5
 1742 0147 18000000 		.4byte	.LFE5-.LFB5
 1743 014b 01       		.uleb128 0x1
 1744 014c 9C       		.byte	0x9c
 1745 014d 0A       		.uleb128 0xa
 1746 014e CF010000 		.4byte	.LASF24
 1747 0152 01       		.byte	0x1
 1748 0153 1501     		.2byte	0x115
 1749 0155 00000000 		.4byte	.LFB6
 1750 0159 18000000 		.4byte	.LFE6-.LFB6
 1751 015d 01       		.uleb128 0x1
 1752 015e 9C       		.byte	0x9c
ARM GAS  C:\Users\joel\AppData\Local\Temp\ccm1GvVc.s 			page 52


 1753 015f 0A       		.uleb128 0xa
 1754 0160 4A000000 		.4byte	.LASF25
 1755 0164 01       		.byte	0x1
 1756 0165 2E01     		.2byte	0x12e
 1757 0167 00000000 		.4byte	.LFB7
 1758 016b 18000000 		.4byte	.LFE7-.LFB7
 1759 016f 01       		.uleb128 0x1
 1760 0170 9C       		.byte	0x9c
 1761 0171 0B       		.uleb128 0xb
 1762 0172 F8010000 		.4byte	.LASF26
 1763 0176 01       		.byte	0x1
 1764 0177 4801     		.2byte	0x148
 1765 0179 00000000 		.4byte	.LFB8
 1766 017d 20000000 		.4byte	.LFE8-.LFB8
 1767 0181 01       		.uleb128 0x1
 1768 0182 9C       		.byte	0x9c
 1769 0183 97010000 		.4byte	0x197
 1770 0187 0C       		.uleb128 0xc
 1771 0188 5C020000 		.4byte	.LASF28
 1772 018c 01       		.byte	0x1
 1773 018d 4801     		.2byte	0x148
 1774 018f 6B000000 		.4byte	0x6b
 1775 0193 02       		.uleb128 0x2
 1776 0194 91       		.byte	0x91
 1777 0195 77       		.sleb128 -9
 1778 0196 00       		.byte	0
 1779 0197 0B       		.uleb128 0xb
 1780 0198 2F000000 		.4byte	.LASF27
 1781 019c 01       		.byte	0x1
 1782 019d 6001     		.2byte	0x160
 1783 019f 00000000 		.4byte	.LFB9
 1784 01a3 20000000 		.4byte	.LFE9-.LFB9
 1785 01a7 01       		.uleb128 0x1
 1786 01a8 9C       		.byte	0x9c
 1787 01a9 BD010000 		.4byte	0x1bd
 1788 01ad 0C       		.uleb128 0xc
 1789 01ae 5C020000 		.4byte	.LASF28
 1790 01b2 01       		.byte	0x1
 1791 01b3 6001     		.2byte	0x160
 1792 01b5 6B000000 		.4byte	0x6b
 1793 01b9 02       		.uleb128 0x2
 1794 01ba 91       		.byte	0x91
 1795 01bb 77       		.sleb128 -9
 1796 01bc 00       		.byte	0
 1797 01bd 0D       		.uleb128 0xd
 1798 01be AD010000 		.4byte	.LASF30
 1799 01c2 01       		.byte	0x1
 1800 01c3 8201     		.2byte	0x182
 1801 01c5 6B000000 		.4byte	0x6b
 1802 01c9 00000000 		.4byte	.LFB10
 1803 01cd 3C000000 		.4byte	.LFE10-.LFB10
 1804 01d1 01       		.uleb128 0x1
 1805 01d2 9C       		.byte	0x9c
 1806 01d3 E7010000 		.4byte	0x1e7
 1807 01d7 0E       		.uleb128 0xe
 1808 01d8 25000000 		.4byte	.LASF29
 1809 01dc 01       		.byte	0x1
ARM GAS  C:\Users\joel\AppData\Local\Temp\ccm1GvVc.s 			page 53


 1810 01dd 8401     		.2byte	0x184
 1811 01df 6B000000 		.4byte	0x6b
 1812 01e3 02       		.uleb128 0x2
 1813 01e4 91       		.byte	0x91
 1814 01e5 77       		.sleb128 -9
 1815 01e6 00       		.byte	0
 1816 01e7 0D       		.uleb128 0xd
 1817 01e8 70030000 		.4byte	.LASF31
 1818 01ec 01       		.byte	0x1
 1819 01ed B501     		.2byte	0x1b5
 1820 01ef 6B000000 		.4byte	0x6b
 1821 01f3 00000000 		.4byte	.LFB11
 1822 01f7 3C000000 		.4byte	.LFE11-.LFB11
 1823 01fb 01       		.uleb128 0x1
 1824 01fc 9C       		.byte	0x9c
 1825 01fd 11020000 		.4byte	0x211
 1826 0201 0E       		.uleb128 0xe
 1827 0202 25000000 		.4byte	.LASF29
 1828 0206 01       		.byte	0x1
 1829 0207 B701     		.2byte	0x1b7
 1830 0209 6B000000 		.4byte	0x6b
 1831 020d 02       		.uleb128 0x2
 1832 020e 91       		.byte	0x91
 1833 020f 77       		.sleb128 -9
 1834 0210 00       		.byte	0
 1835 0211 0F       		.uleb128 0xf
 1836 0212 1D040000 		.4byte	.LASF32
 1837 0216 01       		.byte	0x1
 1838 0217 EE01     		.2byte	0x1ee
 1839 0219 00000000 		.4byte	.LFB12
 1840 021d 10010000 		.4byte	.LFE12-.LFB12
 1841 0221 01       		.uleb128 0x1
 1842 0222 9C       		.byte	0x9c
 1843 0223 55020000 		.4byte	0x255
 1844 0227 0C       		.uleb128 0xc
 1845 0228 BD040000 		.4byte	.LASF33
 1846 022c 01       		.byte	0x1
 1847 022d EE01     		.2byte	0x1ee
 1848 022f 6B000000 		.4byte	0x6b
 1849 0233 02       		.uleb128 0x2
 1850 0234 91       		.byte	0x91
 1851 0235 6F       		.sleb128 -17
 1852 0236 0E       		.uleb128 0xe
 1853 0237 2B030000 		.4byte	.LASF34
 1854 023b 01       		.byte	0x1
 1855 023c F201     		.2byte	0x1f2
 1856 023e 6B000000 		.4byte	0x6b
 1857 0242 02       		.uleb128 0x2
 1858 0243 91       		.byte	0x91
 1859 0244 76       		.sleb128 -10
 1860 0245 0E       		.uleb128 0xe
 1861 0246 4B010000 		.4byte	.LASF35
 1862 024a 01       		.byte	0x1
 1863 024b F301     		.2byte	0x1f3
 1864 024d 6B000000 		.4byte	0x6b
 1865 0251 02       		.uleb128 0x2
 1866 0252 91       		.byte	0x91
ARM GAS  C:\Users\joel\AppData\Local\Temp\ccm1GvVc.s 			page 54


 1867 0253 77       		.sleb128 -9
 1868 0254 00       		.byte	0
 1869 0255 0D       		.uleb128 0xd
 1870 0256 AF000000 		.4byte	.LASF36
 1871 025a 01       		.byte	0x1
 1872 025b 5A02     		.2byte	0x25a
 1873 025d 6B000000 		.4byte	0x6b
 1874 0261 00000000 		.4byte	.LFB13
 1875 0265 78000000 		.4byte	.LFE13-.LFB13
 1876 0269 01       		.uleb128 0x1
 1877 026a 9C       		.byte	0x9c
 1878 026b 7F020000 		.4byte	0x27f
 1879 026f 0E       		.uleb128 0xe
 1880 0270 CF030000 		.4byte	.LASF37
 1881 0274 01       		.byte	0x1
 1882 0275 5C02     		.2byte	0x25c
 1883 0277 6B000000 		.4byte	0x6b
 1884 027b 02       		.uleb128 0x2
 1885 027c 91       		.byte	0x91
 1886 027d 77       		.sleb128 -9
 1887 027e 00       		.byte	0
 1888 027f 0D       		.uleb128 0xd
 1889 0280 E8030000 		.4byte	.LASF38
 1890 0284 01       		.byte	0x1
 1891 0285 9A02     		.2byte	0x29a
 1892 0287 6B000000 		.4byte	0x6b
 1893 028b 00000000 		.4byte	.LFB14
 1894 028f 6C000000 		.4byte	.LFE14-.LFB14
 1895 0293 01       		.uleb128 0x1
 1896 0294 9C       		.byte	0x9c
 1897 0295 A9020000 		.4byte	0x2a9
 1898 0299 0E       		.uleb128 0xe
 1899 029a 25020000 		.4byte	.LASF39
 1900 029e 01       		.byte	0x1
 1901 029f 9C02     		.2byte	0x29c
 1902 02a1 6B000000 		.4byte	0x6b
 1903 02a5 02       		.uleb128 0x2
 1904 02a6 91       		.byte	0x91
 1905 02a7 77       		.sleb128 -9
 1906 02a8 00       		.byte	0
 1907 02a9 0D       		.uleb128 0xd
 1908 02aa 85020000 		.4byte	.LASF40
 1909 02ae 01       		.byte	0x1
 1910 02af D702     		.2byte	0x2d7
 1911 02b1 6B000000 		.4byte	0x6b
 1912 02b5 00000000 		.4byte	.LFB15
 1913 02b9 6C000000 		.4byte	.LFE15-.LFB15
 1914 02bd 01       		.uleb128 0x1
 1915 02be 9C       		.byte	0x9c
 1916 02bf D3020000 		.4byte	0x2d3
 1917 02c3 0E       		.uleb128 0xe
 1918 02c4 25020000 		.4byte	.LASF39
 1919 02c8 01       		.byte	0x1
 1920 02c9 D902     		.2byte	0x2d9
 1921 02cb 6B000000 		.4byte	0x6b
 1922 02cf 02       		.uleb128 0x2
 1923 02d0 91       		.byte	0x91
ARM GAS  C:\Users\joel\AppData\Local\Temp\ccm1GvVc.s 			page 55


 1924 02d1 77       		.sleb128 -9
 1925 02d2 00       		.byte	0
 1926 02d3 10       		.uleb128 0x10
 1927 02d4 99000000 		.4byte	.LASF41
 1928 02d8 01       		.byte	0x1
 1929 02d9 2603     		.2byte	0x326
 1930 02db 00000000 		.4byte	.LFB16
 1931 02df 48000000 		.4byte	.LFE16-.LFB16
 1932 02e3 01       		.uleb128 0x1
 1933 02e4 9C       		.byte	0x9c
 1934 02e5 0F       		.uleb128 0xf
 1935 02e6 07040000 		.4byte	.LASF42
 1936 02ea 01       		.byte	0x1
 1937 02eb 5D03     		.2byte	0x35d
 1938 02ed 00000000 		.4byte	.LFB17
 1939 02f1 7C000000 		.4byte	.LFE17-.LFB17
 1940 02f5 01       		.uleb128 0x1
 1941 02f6 9C       		.byte	0x9c
 1942 02f7 0B030000 		.4byte	0x30b
 1943 02fb 0E       		.uleb128 0xe
 1944 02fc 31040000 		.4byte	.LASF21
 1945 0300 01       		.byte	0x1
 1946 0301 5F03     		.2byte	0x35f
 1947 0303 6B000000 		.4byte	0x6b
 1948 0307 02       		.uleb128 0x2
 1949 0308 91       		.byte	0x91
 1950 0309 77       		.sleb128 -9
 1951 030a 00       		.byte	0
 1952 030b 0F       		.uleb128 0xf
 1953 030c 27010000 		.4byte	.LASF43
 1954 0310 01       		.byte	0x1
 1955 0311 C203     		.2byte	0x3c2
 1956 0313 00000000 		.4byte	.LFB18
 1957 0317 38000000 		.4byte	.LFE18-.LFB18
 1958 031b 01       		.uleb128 0x1
 1959 031c 9C       		.byte	0x9c
 1960 031d 4F030000 		.4byte	0x34f
 1961 0321 0C       		.uleb128 0xc
 1962 0322 00040000 		.4byte	.LASF44
 1963 0326 01       		.byte	0x1
 1964 0327 C203     		.2byte	0x3c2
 1965 0329 4F030000 		.4byte	0x34f
 1966 032d 02       		.uleb128 0x2
 1967 032e 91       		.byte	0x91
 1968 032f 6C       		.sleb128 -20
 1969 0330 0C       		.uleb128 0xc
 1970 0331 C5030000 		.4byte	.LASF45
 1971 0335 01       		.byte	0x1
 1972 0336 C203     		.2byte	0x3c2
 1973 0338 6B000000 		.4byte	0x6b
 1974 033c 02       		.uleb128 0x2
 1975 033d 91       		.byte	0x91
 1976 033e 6B       		.sleb128 -21
 1977 033f 0E       		.uleb128 0xe
 1978 0340 3D020000 		.4byte	.LASF46
 1979 0344 01       		.byte	0x1
 1980 0345 C503     		.2byte	0x3c5
ARM GAS  C:\Users\joel\AppData\Local\Temp\ccm1GvVc.s 			page 56


 1981 0347 6B000000 		.4byte	0x6b
 1982 034b 02       		.uleb128 0x2
 1983 034c 91       		.byte	0x91
 1984 034d 77       		.sleb128 -9
 1985 034e 00       		.byte	0
 1986 034f 11       		.uleb128 0x11
 1987 0350 04       		.byte	0x4
 1988 0351 55030000 		.4byte	0x355
 1989 0355 12       		.uleb128 0x12
 1990 0356 6B000000 		.4byte	0x6b
 1991 035a 0F       		.uleb128 0xf
 1992 035b B3030000 		.4byte	.LASF47
 1993 035f 01       		.byte	0x1
 1994 0360 E303     		.2byte	0x3e3
 1995 0362 00000000 		.4byte	.LFB19
 1996 0366 5C000000 		.4byte	.LFE19-.LFB19
 1997 036a 01       		.uleb128 0x1
 1998 036b 9C       		.byte	0x9c
 1999 036c 80030000 		.4byte	0x380
 2000 0370 0E       		.uleb128 0xe
 2001 0371 31040000 		.4byte	.LASF21
 2002 0375 01       		.byte	0x1
 2003 0376 E503     		.2byte	0x3e5
 2004 0378 6B000000 		.4byte	0x6b
 2005 037c 02       		.uleb128 0x2
 2006 037d 91       		.byte	0x91
 2007 037e 77       		.sleb128 -9
 2008 037f 00       		.byte	0
 2009 0380 10       		.uleb128 0x10
 2010 0381 5E030000 		.4byte	.LASF48
 2011 0385 01       		.byte	0x1
 2012 0386 1104     		.2byte	0x411
 2013 0388 00000000 		.4byte	.LFB20
 2014 038c 0E000000 		.4byte	.LFE20-.LFB20
 2015 0390 01       		.uleb128 0x1
 2016 0391 9C       		.byte	0x9c
 2017 0392 10       		.uleb128 0x10
 2018 0393 63020000 		.4byte	.LASF49
 2019 0397 01       		.byte	0x1
 2020 0398 2904     		.2byte	0x429
 2021 039a 00000000 		.4byte	.LFB21
 2022 039e 0E000000 		.4byte	.LFE21-.LFB21
 2023 03a2 01       		.uleb128 0x1
 2024 03a3 9C       		.byte	0x9c
 2025 03a4 0B       		.uleb128 0xb
 2026 03a5 A4040000 		.4byte	.LASF50
 2027 03a9 01       		.byte	0x1
 2028 03aa 4204     		.2byte	0x442
 2029 03ac 00000000 		.4byte	.LFB22
 2030 03b0 30000000 		.4byte	.LFE22-.LFB22
 2031 03b4 01       		.uleb128 0x1
 2032 03b5 9C       		.byte	0x9c
 2033 03b6 CA030000 		.4byte	0x3ca
 2034 03ba 0C       		.uleb128 0xc
 2035 03bb 5C020000 		.4byte	.LASF28
 2036 03bf 01       		.byte	0x1
 2037 03c0 4204     		.2byte	0x442
ARM GAS  C:\Users\joel\AppData\Local\Temp\ccm1GvVc.s 			page 57


 2038 03c2 6B000000 		.4byte	0x6b
 2039 03c6 02       		.uleb128 0x2
 2040 03c7 91       		.byte	0x91
 2041 03c8 77       		.sleb128 -9
 2042 03c9 00       		.byte	0
 2043 03ca 0D       		.uleb128 0xd
 2044 03cb 7E010000 		.4byte	.LASF51
 2045 03cf 01       		.byte	0x1
 2046 03d0 6504     		.2byte	0x465
 2047 03d2 6B000000 		.4byte	0x6b
 2048 03d6 00000000 		.4byte	.LFB23
 2049 03da 70000000 		.4byte	.LFE23-.LFB23
 2050 03de 01       		.uleb128 0x1
 2051 03df 9C       		.byte	0x9c
 2052 03e0 F4030000 		.4byte	0x3f4
 2053 03e4 0E       		.uleb128 0xe
 2054 03e5 25000000 		.4byte	.LASF29
 2055 03e9 01       		.byte	0x1
 2056 03ea 6704     		.2byte	0x467
 2057 03ec 6B000000 		.4byte	0x6b
 2058 03f0 02       		.uleb128 0x2
 2059 03f1 91       		.byte	0x91
 2060 03f2 77       		.sleb128 -9
 2061 03f3 00       		.byte	0
 2062 03f4 13       		.uleb128 0x13
 2063 03f5 00000000 		.4byte	.LASF52
 2064 03f9 01       		.byte	0x1
 2065 03fa 22       		.byte	0x22
 2066 03fb 6B000000 		.4byte	0x6b
 2067 03ff 05       		.uleb128 0x5
 2068 0400 03       		.byte	0x3
 2069 0401 00000000 		.4byte	LCD_SPI_initVar
 2070 0405 13       		.uleb128 0x13
 2071 0406 38010000 		.4byte	.LASF53
 2072 040a 01       		.byte	0x1
 2073 040b 24       		.byte	0x24
 2074 040c A4000000 		.4byte	0xa4
 2075 0410 05       		.uleb128 0x5
 2076 0411 03       		.byte	0x3
 2077 0412 00000000 		.4byte	LCD_SPI_swStatusTx
 2078 0416 13       		.uleb128 0x13
 2079 0417 91040000 		.4byte	.LASF54
 2080 041b 01       		.byte	0x1
 2081 041c 25       		.byte	0x25
 2082 041d A4000000 		.4byte	0xa4
 2083 0421 05       		.uleb128 0x5
 2084 0422 03       		.byte	0x3
 2085 0423 00000000 		.4byte	LCD_SPI_swStatusRx
 2086 0427 14       		.uleb128 0x14
 2087 0428 6B000000 		.4byte	0x6b
 2088 042c 37040000 		.4byte	0x437
 2089 0430 15       		.uleb128 0x15
 2090 0431 BA000000 		.4byte	0xba
 2091 0435 07       		.byte	0x7
 2092 0436 00       		.byte	0
 2093 0437 13       		.uleb128 0x13
 2094 0438 C2000000 		.4byte	.LASF55
ARM GAS  C:\Users\joel\AppData\Local\Temp\ccm1GvVc.s 			page 58


 2095 043c 01       		.byte	0x1
 2096 043d 15       		.byte	0x15
 2097 043e 48040000 		.4byte	0x448
 2098 0442 05       		.uleb128 0x5
 2099 0443 03       		.byte	0x3
 2100 0444 00000000 		.4byte	LCD_SPI_txBuffer
 2101 0448 05       		.uleb128 0x5
 2102 0449 27040000 		.4byte	0x427
 2103 044d 13       		.uleb128 0x13
 2104 044e 10000000 		.4byte	.LASF56
 2105 0452 01       		.byte	0x1
 2106 0453 17       		.byte	0x17
 2107 0454 A4000000 		.4byte	0xa4
 2108 0458 05       		.uleb128 0x5
 2109 0459 03       		.byte	0x3
 2110 045a 00000000 		.4byte	LCD_SPI_txBufferRead
 2111 045e 13       		.uleb128 0x13
 2112 045f 5B010000 		.4byte	.LASF57
 2113 0463 01       		.byte	0x1
 2114 0464 18       		.byte	0x18
 2115 0465 A4000000 		.4byte	0xa4
 2116 0469 05       		.uleb128 0x5
 2117 046a 03       		.byte	0x3
 2118 046b 00000000 		.4byte	LCD_SPI_txBufferWrite
 2119 046f 13       		.uleb128 0x13
 2120 0470 7C040000 		.4byte	.LASF58
 2121 0474 01       		.byte	0x1
 2122 0475 16       		.byte	0x16
 2123 0476 A4000000 		.4byte	0xa4
 2124 047a 05       		.uleb128 0x5
 2125 047b 03       		.byte	0x3
 2126 047c 00000000 		.4byte	LCD_SPI_txBufferFull
 2127 0480 13       		.uleb128 0x13
 2128 0481 A2030000 		.4byte	.LASF59
 2129 0485 01       		.byte	0x1
 2130 0486 1C       		.byte	0x1c
 2131 0487 91040000 		.4byte	0x491
 2132 048b 05       		.uleb128 0x5
 2133 048c 03       		.byte	0x3
 2134 048d 00000000 		.4byte	LCD_SPI_rxBuffer
 2135 0491 05       		.uleb128 0x5
 2136 0492 27040000 		.4byte	0x427
 2137 0496 13       		.uleb128 0x13
 2138 0497 98010000 		.4byte	.LASF60
 2139 049b 01       		.byte	0x1
 2140 049c 1E       		.byte	0x1e
 2141 049d A4000000 		.4byte	0xa4
 2142 04a1 05       		.uleb128 0x5
 2143 04a2 03       		.byte	0x3
 2144 04a3 00000000 		.4byte	LCD_SPI_rxBufferRead
 2145 04a7 13       		.uleb128 0x13
 2146 04a8 46020000 		.4byte	.LASF61
 2147 04ac 01       		.byte	0x1
 2148 04ad 1F       		.byte	0x1f
 2149 04ae A4000000 		.4byte	0xa4
 2150 04b2 05       		.uleb128 0x5
 2151 04b3 03       		.byte	0x3
ARM GAS  C:\Users\joel\AppData\Local\Temp\ccm1GvVc.s 			page 59


 2152 04b4 00000000 		.4byte	LCD_SPI_rxBufferWrite
 2153 04b8 13       		.uleb128 0x13
 2154 04b9 09010000 		.4byte	.LASF62
 2155 04bd 01       		.byte	0x1
 2156 04be 1D       		.byte	0x1d
 2157 04bf A4000000 		.4byte	0xa4
 2158 04c3 05       		.uleb128 0x5
 2159 04c4 03       		.byte	0x3
 2160 04c5 00000000 		.4byte	LCD_SPI_rxBufferFull
 2161 04c9 00       		.byte	0
 2162              		.section	.debug_abbrev,"",%progbits
 2163              	.Ldebug_abbrev0:
 2164 0000 01       		.uleb128 0x1
 2165 0001 11       		.uleb128 0x11
 2166 0002 01       		.byte	0x1
 2167 0003 25       		.uleb128 0x25
 2168 0004 0E       		.uleb128 0xe
 2169 0005 13       		.uleb128 0x13
 2170 0006 0B       		.uleb128 0xb
 2171 0007 03       		.uleb128 0x3
 2172 0008 0E       		.uleb128 0xe
 2173 0009 1B       		.uleb128 0x1b
 2174 000a 0E       		.uleb128 0xe
 2175 000b 55       		.uleb128 0x55
 2176 000c 17       		.uleb128 0x17
 2177 000d 11       		.uleb128 0x11
 2178 000e 01       		.uleb128 0x1
 2179 000f 10       		.uleb128 0x10
 2180 0010 17       		.uleb128 0x17
 2181 0011 00       		.byte	0
 2182 0012 00       		.byte	0
 2183 0013 02       		.uleb128 0x2
 2184 0014 24       		.uleb128 0x24
 2185 0015 00       		.byte	0
 2186 0016 0B       		.uleb128 0xb
 2187 0017 0B       		.uleb128 0xb
 2188 0018 3E       		.uleb128 0x3e
 2189 0019 0B       		.uleb128 0xb
 2190 001a 03       		.uleb128 0x3
 2191 001b 0E       		.uleb128 0xe
 2192 001c 00       		.byte	0
 2193 001d 00       		.byte	0
 2194 001e 03       		.uleb128 0x3
 2195 001f 24       		.uleb128 0x24
 2196 0020 00       		.byte	0
 2197 0021 0B       		.uleb128 0xb
 2198 0022 0B       		.uleb128 0xb
 2199 0023 3E       		.uleb128 0x3e
 2200 0024 0B       		.uleb128 0xb
 2201 0025 03       		.uleb128 0x3
 2202 0026 08       		.uleb128 0x8
 2203 0027 00       		.byte	0
 2204 0028 00       		.byte	0
 2205 0029 04       		.uleb128 0x4
 2206 002a 16       		.uleb128 0x16
 2207 002b 00       		.byte	0
 2208 002c 03       		.uleb128 0x3
ARM GAS  C:\Users\joel\AppData\Local\Temp\ccm1GvVc.s 			page 60


 2209 002d 0E       		.uleb128 0xe
 2210 002e 3A       		.uleb128 0x3a
 2211 002f 0B       		.uleb128 0xb
 2212 0030 3B       		.uleb128 0x3b
 2213 0031 05       		.uleb128 0x5
 2214 0032 49       		.uleb128 0x49
 2215 0033 13       		.uleb128 0x13
 2216 0034 00       		.byte	0
 2217 0035 00       		.byte	0
 2218 0036 05       		.uleb128 0x5
 2219 0037 35       		.uleb128 0x35
 2220 0038 00       		.byte	0
 2221 0039 49       		.uleb128 0x49
 2222 003a 13       		.uleb128 0x13
 2223 003b 00       		.byte	0
 2224 003c 00       		.byte	0
 2225 003d 06       		.uleb128 0x6
 2226 003e 2E       		.uleb128 0x2e
 2227 003f 00       		.byte	0
 2228 0040 3F       		.uleb128 0x3f
 2229 0041 19       		.uleb128 0x19
 2230 0042 03       		.uleb128 0x3
 2231 0043 0E       		.uleb128 0xe
 2232 0044 3A       		.uleb128 0x3a
 2233 0045 0B       		.uleb128 0xb
 2234 0046 3B       		.uleb128 0x3b
 2235 0047 0B       		.uleb128 0xb
 2236 0048 27       		.uleb128 0x27
 2237 0049 19       		.uleb128 0x19
 2238 004a 11       		.uleb128 0x11
 2239 004b 01       		.uleb128 0x1
 2240 004c 12       		.uleb128 0x12
 2241 004d 06       		.uleb128 0x6
 2242 004e 40       		.uleb128 0x40
 2243 004f 18       		.uleb128 0x18
 2244 0050 9642     		.uleb128 0x2116
 2245 0052 19       		.uleb128 0x19
 2246 0053 00       		.byte	0
 2247 0054 00       		.byte	0
 2248 0055 07       		.uleb128 0x7
 2249 0056 2E       		.uleb128 0x2e
 2250 0057 01       		.byte	0x1
 2251 0058 3F       		.uleb128 0x3f
 2252 0059 19       		.uleb128 0x19
 2253 005a 03       		.uleb128 0x3
 2254 005b 0E       		.uleb128 0xe
 2255 005c 3A       		.uleb128 0x3a
 2256 005d 0B       		.uleb128 0xb
 2257 005e 3B       		.uleb128 0x3b
 2258 005f 0B       		.uleb128 0xb
 2259 0060 27       		.uleb128 0x27
 2260 0061 19       		.uleb128 0x19
 2261 0062 11       		.uleb128 0x11
 2262 0063 01       		.uleb128 0x1
 2263 0064 12       		.uleb128 0x12
 2264 0065 06       		.uleb128 0x6
 2265 0066 40       		.uleb128 0x40
ARM GAS  C:\Users\joel\AppData\Local\Temp\ccm1GvVc.s 			page 61


 2266 0067 18       		.uleb128 0x18
 2267 0068 9642     		.uleb128 0x2116
 2268 006a 19       		.uleb128 0x19
 2269 006b 01       		.uleb128 0x1
 2270 006c 13       		.uleb128 0x13
 2271 006d 00       		.byte	0
 2272 006e 00       		.byte	0
 2273 006f 08       		.uleb128 0x8
 2274 0070 34       		.uleb128 0x34
 2275 0071 00       		.byte	0
 2276 0072 03       		.uleb128 0x3
 2277 0073 0E       		.uleb128 0xe
 2278 0074 3A       		.uleb128 0x3a
 2279 0075 0B       		.uleb128 0xb
 2280 0076 3B       		.uleb128 0x3b
 2281 0077 0B       		.uleb128 0xb
 2282 0078 49       		.uleb128 0x49
 2283 0079 13       		.uleb128 0x13
 2284 007a 02       		.uleb128 0x2
 2285 007b 18       		.uleb128 0x18
 2286 007c 00       		.byte	0
 2287 007d 00       		.byte	0
 2288 007e 09       		.uleb128 0x9
 2289 007f 2E       		.uleb128 0x2e
 2290 0080 00       		.byte	0
 2291 0081 3F       		.uleb128 0x3f
 2292 0082 19       		.uleb128 0x19
 2293 0083 03       		.uleb128 0x3
 2294 0084 0E       		.uleb128 0xe
 2295 0085 3A       		.uleb128 0x3a
 2296 0086 0B       		.uleb128 0xb
 2297 0087 3B       		.uleb128 0x3b
 2298 0088 0B       		.uleb128 0xb
 2299 0089 27       		.uleb128 0x27
 2300 008a 19       		.uleb128 0x19
 2301 008b 11       		.uleb128 0x11
 2302 008c 01       		.uleb128 0x1
 2303 008d 12       		.uleb128 0x12
 2304 008e 06       		.uleb128 0x6
 2305 008f 40       		.uleb128 0x40
 2306 0090 18       		.uleb128 0x18
 2307 0091 9742     		.uleb128 0x2117
 2308 0093 19       		.uleb128 0x19
 2309 0094 00       		.byte	0
 2310 0095 00       		.byte	0
 2311 0096 0A       		.uleb128 0xa
 2312 0097 2E       		.uleb128 0x2e
 2313 0098 00       		.byte	0
 2314 0099 3F       		.uleb128 0x3f
 2315 009a 19       		.uleb128 0x19
 2316 009b 03       		.uleb128 0x3
 2317 009c 0E       		.uleb128 0xe
 2318 009d 3A       		.uleb128 0x3a
 2319 009e 0B       		.uleb128 0xb
 2320 009f 3B       		.uleb128 0x3b
 2321 00a0 05       		.uleb128 0x5
 2322 00a1 27       		.uleb128 0x27
ARM GAS  C:\Users\joel\AppData\Local\Temp\ccm1GvVc.s 			page 62


 2323 00a2 19       		.uleb128 0x19
 2324 00a3 11       		.uleb128 0x11
 2325 00a4 01       		.uleb128 0x1
 2326 00a5 12       		.uleb128 0x12
 2327 00a6 06       		.uleb128 0x6
 2328 00a7 40       		.uleb128 0x40
 2329 00a8 18       		.uleb128 0x18
 2330 00a9 9742     		.uleb128 0x2117
 2331 00ab 19       		.uleb128 0x19
 2332 00ac 00       		.byte	0
 2333 00ad 00       		.byte	0
 2334 00ae 0B       		.uleb128 0xb
 2335 00af 2E       		.uleb128 0x2e
 2336 00b0 01       		.byte	0x1
 2337 00b1 3F       		.uleb128 0x3f
 2338 00b2 19       		.uleb128 0x19
 2339 00b3 03       		.uleb128 0x3
 2340 00b4 0E       		.uleb128 0xe
 2341 00b5 3A       		.uleb128 0x3a
 2342 00b6 0B       		.uleb128 0xb
 2343 00b7 3B       		.uleb128 0x3b
 2344 00b8 05       		.uleb128 0x5
 2345 00b9 27       		.uleb128 0x27
 2346 00ba 19       		.uleb128 0x19
 2347 00bb 11       		.uleb128 0x11
 2348 00bc 01       		.uleb128 0x1
 2349 00bd 12       		.uleb128 0x12
 2350 00be 06       		.uleb128 0x6
 2351 00bf 40       		.uleb128 0x40
 2352 00c0 18       		.uleb128 0x18
 2353 00c1 9742     		.uleb128 0x2117
 2354 00c3 19       		.uleb128 0x19
 2355 00c4 01       		.uleb128 0x1
 2356 00c5 13       		.uleb128 0x13
 2357 00c6 00       		.byte	0
 2358 00c7 00       		.byte	0
 2359 00c8 0C       		.uleb128 0xc
 2360 00c9 05       		.uleb128 0x5
 2361 00ca 00       		.byte	0
 2362 00cb 03       		.uleb128 0x3
 2363 00cc 0E       		.uleb128 0xe
 2364 00cd 3A       		.uleb128 0x3a
 2365 00ce 0B       		.uleb128 0xb
 2366 00cf 3B       		.uleb128 0x3b
 2367 00d0 05       		.uleb128 0x5
 2368 00d1 49       		.uleb128 0x49
 2369 00d2 13       		.uleb128 0x13
 2370 00d3 02       		.uleb128 0x2
 2371 00d4 18       		.uleb128 0x18
 2372 00d5 00       		.byte	0
 2373 00d6 00       		.byte	0
 2374 00d7 0D       		.uleb128 0xd
 2375 00d8 2E       		.uleb128 0x2e
 2376 00d9 01       		.byte	0x1
 2377 00da 3F       		.uleb128 0x3f
 2378 00db 19       		.uleb128 0x19
 2379 00dc 03       		.uleb128 0x3
ARM GAS  C:\Users\joel\AppData\Local\Temp\ccm1GvVc.s 			page 63


 2380 00dd 0E       		.uleb128 0xe
 2381 00de 3A       		.uleb128 0x3a
 2382 00df 0B       		.uleb128 0xb
 2383 00e0 3B       		.uleb128 0x3b
 2384 00e1 05       		.uleb128 0x5
 2385 00e2 27       		.uleb128 0x27
 2386 00e3 19       		.uleb128 0x19
 2387 00e4 49       		.uleb128 0x49
 2388 00e5 13       		.uleb128 0x13
 2389 00e6 11       		.uleb128 0x11
 2390 00e7 01       		.uleb128 0x1
 2391 00e8 12       		.uleb128 0x12
 2392 00e9 06       		.uleb128 0x6
 2393 00ea 40       		.uleb128 0x40
 2394 00eb 18       		.uleb128 0x18
 2395 00ec 9642     		.uleb128 0x2116
 2396 00ee 19       		.uleb128 0x19
 2397 00ef 01       		.uleb128 0x1
 2398 00f0 13       		.uleb128 0x13
 2399 00f1 00       		.byte	0
 2400 00f2 00       		.byte	0
 2401 00f3 0E       		.uleb128 0xe
 2402 00f4 34       		.uleb128 0x34
 2403 00f5 00       		.byte	0
 2404 00f6 03       		.uleb128 0x3
 2405 00f7 0E       		.uleb128 0xe
 2406 00f8 3A       		.uleb128 0x3a
 2407 00f9 0B       		.uleb128 0xb
 2408 00fa 3B       		.uleb128 0x3b
 2409 00fb 05       		.uleb128 0x5
 2410 00fc 49       		.uleb128 0x49
 2411 00fd 13       		.uleb128 0x13
 2412 00fe 02       		.uleb128 0x2
 2413 00ff 18       		.uleb128 0x18
 2414 0100 00       		.byte	0
 2415 0101 00       		.byte	0
 2416 0102 0F       		.uleb128 0xf
 2417 0103 2E       		.uleb128 0x2e
 2418 0104 01       		.byte	0x1
 2419 0105 3F       		.uleb128 0x3f
 2420 0106 19       		.uleb128 0x19
 2421 0107 03       		.uleb128 0x3
 2422 0108 0E       		.uleb128 0xe
 2423 0109 3A       		.uleb128 0x3a
 2424 010a 0B       		.uleb128 0xb
 2425 010b 3B       		.uleb128 0x3b
 2426 010c 05       		.uleb128 0x5
 2427 010d 27       		.uleb128 0x27
 2428 010e 19       		.uleb128 0x19
 2429 010f 11       		.uleb128 0x11
 2430 0110 01       		.uleb128 0x1
 2431 0111 12       		.uleb128 0x12
 2432 0112 06       		.uleb128 0x6
 2433 0113 40       		.uleb128 0x40
 2434 0114 18       		.uleb128 0x18
 2435 0115 9642     		.uleb128 0x2116
 2436 0117 19       		.uleb128 0x19
ARM GAS  C:\Users\joel\AppData\Local\Temp\ccm1GvVc.s 			page 64


 2437 0118 01       		.uleb128 0x1
 2438 0119 13       		.uleb128 0x13
 2439 011a 00       		.byte	0
 2440 011b 00       		.byte	0
 2441 011c 10       		.uleb128 0x10
 2442 011d 2E       		.uleb128 0x2e
 2443 011e 00       		.byte	0
 2444 011f 3F       		.uleb128 0x3f
 2445 0120 19       		.uleb128 0x19
 2446 0121 03       		.uleb128 0x3
 2447 0122 0E       		.uleb128 0xe
 2448 0123 3A       		.uleb128 0x3a
 2449 0124 0B       		.uleb128 0xb
 2450 0125 3B       		.uleb128 0x3b
 2451 0126 05       		.uleb128 0x5
 2452 0127 27       		.uleb128 0x27
 2453 0128 19       		.uleb128 0x19
 2454 0129 11       		.uleb128 0x11
 2455 012a 01       		.uleb128 0x1
 2456 012b 12       		.uleb128 0x12
 2457 012c 06       		.uleb128 0x6
 2458 012d 40       		.uleb128 0x40
 2459 012e 18       		.uleb128 0x18
 2460 012f 9642     		.uleb128 0x2116
 2461 0131 19       		.uleb128 0x19
 2462 0132 00       		.byte	0
 2463 0133 00       		.byte	0
 2464 0134 11       		.uleb128 0x11
 2465 0135 0F       		.uleb128 0xf
 2466 0136 00       		.byte	0
 2467 0137 0B       		.uleb128 0xb
 2468 0138 0B       		.uleb128 0xb
 2469 0139 49       		.uleb128 0x49
 2470 013a 13       		.uleb128 0x13
 2471 013b 00       		.byte	0
 2472 013c 00       		.byte	0
 2473 013d 12       		.uleb128 0x12
 2474 013e 26       		.uleb128 0x26
 2475 013f 00       		.byte	0
 2476 0140 49       		.uleb128 0x49
 2477 0141 13       		.uleb128 0x13
 2478 0142 00       		.byte	0
 2479 0143 00       		.byte	0
 2480 0144 13       		.uleb128 0x13
 2481 0145 34       		.uleb128 0x34
 2482 0146 00       		.byte	0
 2483 0147 03       		.uleb128 0x3
 2484 0148 0E       		.uleb128 0xe
 2485 0149 3A       		.uleb128 0x3a
 2486 014a 0B       		.uleb128 0xb
 2487 014b 3B       		.uleb128 0x3b
 2488 014c 0B       		.uleb128 0xb
 2489 014d 49       		.uleb128 0x49
 2490 014e 13       		.uleb128 0x13
 2491 014f 3F       		.uleb128 0x3f
 2492 0150 19       		.uleb128 0x19
 2493 0151 02       		.uleb128 0x2
ARM GAS  C:\Users\joel\AppData\Local\Temp\ccm1GvVc.s 			page 65


 2494 0152 18       		.uleb128 0x18
 2495 0153 00       		.byte	0
 2496 0154 00       		.byte	0
 2497 0155 14       		.uleb128 0x14
 2498 0156 01       		.uleb128 0x1
 2499 0157 01       		.byte	0x1
 2500 0158 49       		.uleb128 0x49
 2501 0159 13       		.uleb128 0x13
 2502 015a 01       		.uleb128 0x1
 2503 015b 13       		.uleb128 0x13
 2504 015c 00       		.byte	0
 2505 015d 00       		.byte	0
 2506 015e 15       		.uleb128 0x15
 2507 015f 21       		.uleb128 0x21
 2508 0160 00       		.byte	0
 2509 0161 49       		.uleb128 0x49
 2510 0162 13       		.uleb128 0x13
 2511 0163 2F       		.uleb128 0x2f
 2512 0164 0B       		.uleb128 0xb
 2513 0165 00       		.byte	0
 2514 0166 00       		.byte	0
 2515 0167 00       		.byte	0
 2516              		.section	.debug_aranges,"",%progbits
 2517 0000 D4000000 		.4byte	0xd4
 2518 0004 0200     		.2byte	0x2
 2519 0006 00000000 		.4byte	.Ldebug_info0
 2520 000a 04       		.byte	0x4
 2521 000b 00       		.byte	0
 2522 000c 0000     		.2byte	0
 2523 000e 0000     		.2byte	0
 2524 0010 00000000 		.4byte	.LFB0
 2525 0014 A4000000 		.4byte	.LFE0-.LFB0
 2526 0018 00000000 		.4byte	.LFB1
 2527 001c 64000000 		.4byte	.LFE1-.LFB1
 2528 0020 00000000 		.4byte	.LFB2
 2529 0024 20000000 		.4byte	.LFE2-.LFB2
 2530 0028 00000000 		.4byte	.LFB3
 2531 002c 50000000 		.4byte	.LFE3-.LFB3
 2532 0030 00000000 		.4byte	.LFB4
 2533 0034 18000000 		.4byte	.LFE4-.LFB4
 2534 0038 00000000 		.4byte	.LFB5
 2535 003c 18000000 		.4byte	.LFE5-.LFB5
 2536 0040 00000000 		.4byte	.LFB6
 2537 0044 18000000 		.4byte	.LFE6-.LFB6
 2538 0048 00000000 		.4byte	.LFB7
 2539 004c 18000000 		.4byte	.LFE7-.LFB7
 2540 0050 00000000 		.4byte	.LFB8
 2541 0054 20000000 		.4byte	.LFE8-.LFB8
 2542 0058 00000000 		.4byte	.LFB9
 2543 005c 20000000 		.4byte	.LFE9-.LFB9
 2544 0060 00000000 		.4byte	.LFB10
 2545 0064 3C000000 		.4byte	.LFE10-.LFB10
 2546 0068 00000000 		.4byte	.LFB11
 2547 006c 3C000000 		.4byte	.LFE11-.LFB11
 2548 0070 00000000 		.4byte	.LFB12
 2549 0074 10010000 		.4byte	.LFE12-.LFB12
 2550 0078 00000000 		.4byte	.LFB13
ARM GAS  C:\Users\joel\AppData\Local\Temp\ccm1GvVc.s 			page 66


 2551 007c 78000000 		.4byte	.LFE13-.LFB13
 2552 0080 00000000 		.4byte	.LFB14
 2553 0084 6C000000 		.4byte	.LFE14-.LFB14
 2554 0088 00000000 		.4byte	.LFB15
 2555 008c 6C000000 		.4byte	.LFE15-.LFB15
 2556 0090 00000000 		.4byte	.LFB16
 2557 0094 48000000 		.4byte	.LFE16-.LFB16
 2558 0098 00000000 		.4byte	.LFB17
 2559 009c 7C000000 		.4byte	.LFE17-.LFB17
 2560 00a0 00000000 		.4byte	.LFB18
 2561 00a4 38000000 		.4byte	.LFE18-.LFB18
 2562 00a8 00000000 		.4byte	.LFB19
 2563 00ac 5C000000 		.4byte	.LFE19-.LFB19
 2564 00b0 00000000 		.4byte	.LFB20
 2565 00b4 0E000000 		.4byte	.LFE20-.LFB20
 2566 00b8 00000000 		.4byte	.LFB21
 2567 00bc 0E000000 		.4byte	.LFE21-.LFB21
 2568 00c0 00000000 		.4byte	.LFB22
 2569 00c4 30000000 		.4byte	.LFE22-.LFB22
 2570 00c8 00000000 		.4byte	.LFB23
 2571 00cc 70000000 		.4byte	.LFE23-.LFB23
 2572 00d0 00000000 		.4byte	0
 2573 00d4 00000000 		.4byte	0
 2574              		.section	.debug_ranges,"",%progbits
 2575              	.Ldebug_ranges0:
 2576 0000 00000000 		.4byte	.LFB0
 2577 0004 A4000000 		.4byte	.LFE0
 2578 0008 00000000 		.4byte	.LFB1
 2579 000c 64000000 		.4byte	.LFE1
 2580 0010 00000000 		.4byte	.LFB2
 2581 0014 20000000 		.4byte	.LFE2
 2582 0018 00000000 		.4byte	.LFB3
 2583 001c 50000000 		.4byte	.LFE3
 2584 0020 00000000 		.4byte	.LFB4
 2585 0024 18000000 		.4byte	.LFE4
 2586 0028 00000000 		.4byte	.LFB5
 2587 002c 18000000 		.4byte	.LFE5
 2588 0030 00000000 		.4byte	.LFB6
 2589 0034 18000000 		.4byte	.LFE6
 2590 0038 00000000 		.4byte	.LFB7
 2591 003c 18000000 		.4byte	.LFE7
 2592 0040 00000000 		.4byte	.LFB8
 2593 0044 20000000 		.4byte	.LFE8
 2594 0048 00000000 		.4byte	.LFB9
 2595 004c 20000000 		.4byte	.LFE9
 2596 0050 00000000 		.4byte	.LFB10
 2597 0054 3C000000 		.4byte	.LFE10
 2598 0058 00000000 		.4byte	.LFB11
 2599 005c 3C000000 		.4byte	.LFE11
 2600 0060 00000000 		.4byte	.LFB12
 2601 0064 10010000 		.4byte	.LFE12
 2602 0068 00000000 		.4byte	.LFB13
 2603 006c 78000000 		.4byte	.LFE13
 2604 0070 00000000 		.4byte	.LFB14
 2605 0074 6C000000 		.4byte	.LFE14
 2606 0078 00000000 		.4byte	.LFB15
 2607 007c 6C000000 		.4byte	.LFE15
ARM GAS  C:\Users\joel\AppData\Local\Temp\ccm1GvVc.s 			page 67


 2608 0080 00000000 		.4byte	.LFB16
 2609 0084 48000000 		.4byte	.LFE16
 2610 0088 00000000 		.4byte	.LFB17
 2611 008c 7C000000 		.4byte	.LFE17
 2612 0090 00000000 		.4byte	.LFB18
 2613 0094 38000000 		.4byte	.LFE18
 2614 0098 00000000 		.4byte	.LFB19
 2615 009c 5C000000 		.4byte	.LFE19
 2616 00a0 00000000 		.4byte	.LFB20
 2617 00a4 0E000000 		.4byte	.LFE20
 2618 00a8 00000000 		.4byte	.LFB21
 2619 00ac 0E000000 		.4byte	.LFE21
 2620 00b0 00000000 		.4byte	.LFB22
 2621 00b4 30000000 		.4byte	.LFE22
 2622 00b8 00000000 		.4byte	.LFB23
 2623 00bc 70000000 		.4byte	.LFE23
 2624 00c0 00000000 		.4byte	0
 2625 00c4 00000000 		.4byte	0
 2626              		.section	.debug_line,"",%progbits
 2627              	.Ldebug_line0:
 2628 0000 88020000 		.section	.debug_str,"MS",%progbits,1
 2628      02004600 
 2628      00000201 
 2628      FB0E0D00 
 2628      01010101 
 2629              	.LASF52:
 2630 0000 4C43445F 		.ascii	"LCD_SPI_initVar\000"
 2630      5350495F 
 2630      696E6974 
 2630      56617200 
 2631              	.LASF56:
 2632 0010 4C43445F 		.ascii	"LCD_SPI_txBufferRead\000"
 2632      5350495F 
 2632      74784275 
 2632      66666572 
 2632      52656164 
 2633              	.LASF29:
 2634 0025 746D7053 		.ascii	"tmpStatus\000"
 2634      74617475 
 2634      7300
 2635              	.LASF27:
 2636 002f 4C43445F 		.ascii	"LCD_SPI_SetRxInterruptMode\000"
 2636      5350495F 
 2636      53657452 
 2636      78496E74 
 2636      65727275 
 2637              	.LASF25:
 2638 004a 4C43445F 		.ascii	"LCD_SPI_DisableRxInt\000"
 2638      5350495F 
 2638      44697361 
 2638      626C6552 
 2638      78496E74 
 2639              	.LASF7:
 2640 005f 6C6F6E67 		.ascii	"long long unsigned int\000"
 2640      206C6F6E 
 2640      6720756E 
 2640      7369676E 
ARM GAS  C:\Users\joel\AppData\Local\Temp\ccm1GvVc.s 			page 68


 2640      65642069 
 2641              	.LASF64:
 2642 0076 2E5C4765 		.ascii	".\\Generated_Source\\PSoC5\\LCD_SPI.c\000"
 2642      6E657261 
 2642      7465645F 
 2642      536F7572 
 2642      63655C50 
 2643              	.LASF41:
 2644 0099 4C43445F 		.ascii	"LCD_SPI_ClearRxBuffer\000"
 2644      5350495F 
 2644      436C6561 
 2644      72527842 
 2644      75666665 
 2645              	.LASF36:
 2646 00af 4C43445F 		.ascii	"LCD_SPI_ReadRxData\000"
 2646      5350495F 
 2646      52656164 
 2646      52784461 
 2646      746100
 2647              	.LASF55:
 2648 00c2 4C43445F 		.ascii	"LCD_SPI_txBuffer\000"
 2648      5350495F 
 2648      74784275 
 2648      66666572 
 2648      00
 2649              	.LASF6:
 2650 00d3 6C6F6E67 		.ascii	"long long int\000"
 2650      206C6F6E 
 2650      6720696E 
 2650      7400
 2651              	.LASF0:
 2652 00e1 7369676E 		.ascii	"signed char\000"
 2652      65642063 
 2652      68617200 
 2653              	.LASF17:
 2654 00ed 4C43445F 		.ascii	"LCD_SPI_Init\000"
 2654      5350495F 
 2654      496E6974 
 2654      00
 2655              	.LASF19:
 2656 00fa 4C43445F 		.ascii	"LCD_SPI_Enable\000"
 2656      5350495F 
 2656      456E6162 
 2656      6C6500
 2657              	.LASF62:
 2658 0109 4C43445F 		.ascii	"LCD_SPI_rxBufferFull\000"
 2658      5350495F 
 2658      72784275 
 2658      66666572 
 2658      46756C6C 
 2659              	.LASF4:
 2660 011e 6C6F6E67 		.ascii	"long int\000"
 2660      20696E74 
 2660      00
 2661              	.LASF43:
 2662 0127 4C43445F 		.ascii	"LCD_SPI_PutArray\000"
 2662      5350495F 
ARM GAS  C:\Users\joel\AppData\Local\Temp\ccm1GvVc.s 			page 69


 2662      50757441 
 2662      72726179 
 2662      00
 2663              	.LASF53:
 2664 0138 4C43445F 		.ascii	"LCD_SPI_swStatusTx\000"
 2664      5350495F 
 2664      73775374 
 2664      61747573 
 2664      547800
 2665              	.LASF35:
 2666 014b 746D7054 		.ascii	"tmpTxBufferRead\000"
 2666      78427566 
 2666      66657252 
 2666      65616400 
 2667              	.LASF57:
 2668 015b 4C43445F 		.ascii	"LCD_SPI_txBufferWrite\000"
 2668      5350495F 
 2668      74784275 
 2668      66666572 
 2668      57726974 
 2669              	.LASF9:
 2670 0171 75696E74 		.ascii	"uint8\000"
 2670      3800
 2671              	.LASF12:
 2672 0177 646F7562 		.ascii	"double\000"
 2672      6C6500
 2673              	.LASF51:
 2674 017e 4C43445F 		.ascii	"LCD_SPI_ReadStatus\000"
 2674      5350495F 
 2674      52656164 
 2674      53746174 
 2674      757300
 2675              	.LASF10:
 2676 0191 75696E74 		.ascii	"uint32\000"
 2676      333200
 2677              	.LASF60:
 2678 0198 4C43445F 		.ascii	"LCD_SPI_rxBufferRead\000"
 2678      5350495F 
 2678      72784275 
 2678      66666572 
 2678      52656164 
 2679              	.LASF30:
 2680 01ad 4C43445F 		.ascii	"LCD_SPI_ReadTxStatus\000"
 2680      5350495F 
 2680      52656164 
 2680      54785374 
 2680      61747573 
 2681              	.LASF8:
 2682 01c2 756E7369 		.ascii	"unsigned int\000"
 2682      676E6564 
 2682      20696E74 
 2682      00
 2683              	.LASF24:
 2684 01cf 4C43445F 		.ascii	"LCD_SPI_DisableTxInt\000"
 2684      5350495F 
 2684      44697361 
 2684      626C6554 
ARM GAS  C:\Users\joel\AppData\Local\Temp\ccm1GvVc.s 			page 70


 2684      78496E74 
 2685              	.LASF23:
 2686 01e4 4C43445F 		.ascii	"LCD_SPI_EnableRxInt\000"
 2686      5350495F 
 2686      456E6162 
 2686      6C655278 
 2686      496E7400 
 2687              	.LASF26:
 2688 01f8 4C43445F 		.ascii	"LCD_SPI_SetTxInterruptMode\000"
 2688      5350495F 
 2688      53657454 
 2688      78496E74 
 2688      65727275 
 2689              	.LASF5:
 2690 0213 6C6F6E67 		.ascii	"long unsigned int\000"
 2690      20756E73 
 2690      69676E65 
 2690      6420696E 
 2690      7400
 2691              	.LASF39:
 2692 0225 73697A65 		.ascii	"size\000"
 2692      00
 2693              	.LASF3:
 2694 022a 73686F72 		.ascii	"short unsigned int\000"
 2694      7420756E 
 2694      7369676E 
 2694      65642069 
 2694      6E7400
 2695              	.LASF46:
 2696 023d 62756649 		.ascii	"bufIndex\000"
 2696      6E646578 
 2696      00
 2697              	.LASF61:
 2698 0246 4C43445F 		.ascii	"LCD_SPI_rxBufferWrite\000"
 2698      5350495F 
 2698      72784275 
 2698      66666572 
 2698      57726974 
 2699              	.LASF28:
 2700 025c 696E7453 		.ascii	"intSrc\000"
 2700      726300
 2701              	.LASF49:
 2702 0263 4C43445F 		.ascii	"LCD_SPI_DisableInt\000"
 2702      5350495F 
 2702      44697361 
 2702      626C6549 
 2702      6E7400
 2703              	.LASF15:
 2704 0276 72656733 		.ascii	"reg32\000"
 2704      3200
 2705              	.LASF16:
 2706 027c 73697A65 		.ascii	"sizetype\000"
 2706      74797065 
 2706      00
 2707              	.LASF40:
 2708 0285 4C43445F 		.ascii	"LCD_SPI_GetTxBufferSize\000"
 2708      5350495F 
ARM GAS  C:\Users\joel\AppData\Local\Temp\ccm1GvVc.s 			page 71


 2708      47657454 
 2708      78427566 
 2708      66657253 
 2709              	.LASF63:
 2710 029d 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 2710      4320342E 
 2710      392E3320 
 2710      32303135 
 2710      30333033 
 2711 02d0 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m3 -mthumb -g -O"
 2711      20726576 
 2711      6973696F 
 2711      6E203232 
 2711      31323230 
 2712 0303 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 2712      66756E63 
 2712      74696F6E 
 2712      2D736563 
 2712      74696F6E 
 2713              	.LASF34:
 2714 032b 74656D70 		.ascii	"tempStatus\000"
 2714      53746174 
 2714      757300
 2715              	.LASF22:
 2716 0336 4C43445F 		.ascii	"LCD_SPI_EnableTxInt\000"
 2716      5350495F 
 2716      456E6162 
 2716      6C655478 
 2716      496E7400 
 2717              	.LASF18:
 2718 034a 4C43445F 		.ascii	"LCD_SPI_Start\000"
 2718      5350495F 
 2718      53746172 
 2718      7400
 2719              	.LASF11:
 2720 0358 666C6F61 		.ascii	"float\000"
 2720      7400
 2721              	.LASF48:
 2722 035e 4C43445F 		.ascii	"LCD_SPI_EnableInt\000"
 2722      5350495F 
 2722      456E6162 
 2722      6C65496E 
 2722      7400
 2723              	.LASF31:
 2724 0370 4C43445F 		.ascii	"LCD_SPI_ReadRxStatus\000"
 2724      5350495F 
 2724      52656164 
 2724      52785374 
 2724      61747573 
 2725              	.LASF14:
 2726 0385 72656738 		.ascii	"reg8\000"
 2726      00
 2727              	.LASF1:
 2728 038a 756E7369 		.ascii	"unsigned char\000"
 2728      676E6564 
 2728      20636861 
 2728      7200
ARM GAS  C:\Users\joel\AppData\Local\Temp\ccm1GvVc.s 			page 72


 2729              	.LASF2:
 2730 0398 73686F72 		.ascii	"short int\000"
 2730      7420696E 
 2730      7400
 2731              	.LASF59:
 2732 03a2 4C43445F 		.ascii	"LCD_SPI_rxBuffer\000"
 2732      5350495F 
 2732      72784275 
 2732      66666572 
 2732      00
 2733              	.LASF47:
 2734 03b3 4C43445F 		.ascii	"LCD_SPI_ClearFIFO\000"
 2734      5350495F 
 2734      436C6561 
 2734      72464946 
 2734      4F00
 2735              	.LASF45:
 2736 03c5 62797465 		.ascii	"byteCount\000"
 2736      436F756E 
 2736      7400
 2737              	.LASF37:
 2738 03cf 72784461 		.ascii	"rxData\000"
 2738      746100
 2739              	.LASF20:
 2740 03d6 4C43445F 		.ascii	"LCD_SPI_Stop\000"
 2740      5350495F 
 2740      53746F70 
 2740      00
 2741              	.LASF13:
 2742 03e3 63686172 		.ascii	"char\000"
 2742      00
 2743              	.LASF38:
 2744 03e8 4C43445F 		.ascii	"LCD_SPI_GetRxBufferSize\000"
 2744      5350495F 
 2744      47657452 
 2744      78427566 
 2744      66657253 
 2745              	.LASF44:
 2746 0400 62756666 		.ascii	"buffer\000"
 2746      657200
 2747              	.LASF42:
 2748 0407 4C43445F 		.ascii	"LCD_SPI_ClearTxBuffer\000"
 2748      5350495F 
 2748      436C6561 
 2748      72547842 
 2748      75666665 
 2749              	.LASF32:
 2750 041d 4C43445F 		.ascii	"LCD_SPI_WriteTxData\000"
 2750      5350495F 
 2750      57726974 
 2750      65547844 
 2750      61746100 
 2751              	.LASF21:
 2752 0431 656E6162 		.ascii	"enableInterrupts\000"
 2752      6C65496E 
 2752      74657272 
 2752      75707473 
ARM GAS  C:\Users\joel\AppData\Local\Temp\ccm1GvVc.s 			page 73


 2752      00
 2753              	.LASF65:
 2754 0442 433A5C55 		.ascii	"C:\\Users\\joel\\Desktop\\psoc\\psoc_ugfx_demo\\uGF"
 2754      73657273 
 2754      5C6A6F65 
 2754      6C5C4465 
 2754      736B746F 
 2755 046f 58204465 		.ascii	"X Demo.cydsn\000"
 2755      6D6F2E63 
 2755      7964736E 
 2755      00
 2756              	.LASF58:
 2757 047c 4C43445F 		.ascii	"LCD_SPI_txBufferFull\000"
 2757      5350495F 
 2757      74784275 
 2757      66666572 
 2757      46756C6C 
 2758              	.LASF54:
 2759 0491 4C43445F 		.ascii	"LCD_SPI_swStatusRx\000"
 2759      5350495F 
 2759      73775374 
 2759      61747573 
 2759      527800
 2760              	.LASF50:
 2761 04a4 4C43445F 		.ascii	"LCD_SPI_SetInterruptMode\000"
 2761      5350495F 
 2761      53657449 
 2761      6E746572 
 2761      72757074 
 2762              	.LASF33:
 2763 04bd 74784461 		.ascii	"txData\000"
 2763      746100
 2764              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
